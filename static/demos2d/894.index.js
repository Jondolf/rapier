"use strict";(self.webpackChunkrapier_testbed2d=self.webpackChunkrapier_testbed2d||[]).push([[894],{4740:(t,e,r)=>{r.d(e,{F:()=>i});class i{constructor(){this.fconv=new Float64Array(1),this.uconv=new Uint32Array(this.fconv.buffer),this.data=new Array,this.size=0}set(t,e){let r=this.index(t);for(;this.data.length<=r;)this.data.push(null);null==this.data[r]&&(this.size+=1),this.data[r]=e}len(){return this.size}delete(t){let e=this.index(t);e<this.data.length&&(null!=this.data[e]&&(this.size-=1),this.data[e]=null)}clear(){this.data=new Array}get(t){let e=this.index(t);return e<this.data.length?this.data[e]:null}forEach(t){for(const e of this.data)null!=e&&t(e)}getAll(){return this.data.filter((t=>null!=t))}index(t){return this.fconv[0]=t,this.uconv[0]}}},3129:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{_:()=>o,m:()=>_});var n=r(8912),a=r(594),s=t([n,a]);[n,a]=s.then?(await s)():s;class o{}class _{constructor(t,e,r,i,a){this.params=e,this.bodies=r,this.colliders=i,this.queries=a,this.raw=new n.vg(t),this.rawCharacterCollision=new n.Wx,this._applyImpulsesToDynamicBodies=!1,this._characterMass=null}free(){this.raw&&(this.raw.free(),this.rawCharacterCollision.free()),this.raw=void 0,this.rawCharacterCollision=void 0}up(){return this.raw.up()}setUp(t){let e=a.ut.intoRaw(t);return this.raw.setUp(e)}applyImpulsesToDynamicBodies(){return this._applyImpulsesToDynamicBodies}setApplyImpulsesToDynamicBodies(t){this._applyImpulsesToDynamicBodies=t}characterMass(){return this._characterMass}setCharacterMass(t){this._characterMass=t}offset(){return this.raw.offset()}setOffset(t){this.raw.setOffset(t)}slideEnabled(){return this.raw.slideEnabled()}setSlideEnabled(t){this.raw.setSlideEnabled(t)}autostepMaxHeight(){return this.raw.autostepMaxHeight()}autostepMinWidth(){return this.raw.autostepMinWidth()}autostepIncludesDynamicBodies(){return this.raw.autostepIncludesDynamicBodies()}autostepEnabled(){return this.raw.autostepEnabled()}enableAutostep(t,e,r){this.raw.enableAutostep(t,e,r)}disableAutostep(){return this.raw.disableAutostep()}maxSlopeClimbAngle(){return this.raw.maxSlopeClimbAngle()}setMaxSlopeClimbAngle(t){this.raw.setMaxSlopeClimbAngle(t)}minSlopeSlideAngle(){return this.raw.minSlopeSlideAngle()}setMinSlopeSlideAngle(t){this.raw.setMinSlopeSlideAngle(t)}snapToGroundDistance(){return this.raw.snapToGroundDistance()}enableSnapToGround(t){this.raw.enableSnapToGround(t)}disableSnapToGround(){this.raw.disableSnapToGround()}snapToGroundEnabled(){return this.raw.snapToGroundEnabled()}computeColliderMovement(t,e,r,i,n){let s=a.ut.intoRaw(e);this.raw.computeColliderMovement(this.params.dt,this.bodies.raw,this.colliders.raw,this.queries.raw,t.handle,s,this._applyImpulsesToDynamicBodies,this._characterMass,r,i,this.colliders.castClosure(n)),s.free()}computedMovement(){return a.ut.fromRaw(this.raw.computedMovement())}computedGrounded(){return this.raw.computedGrounded()}numComputedCollisions(){return this.raw.numComputedCollisions()}computedCollision(t,e){if(this.raw.computedCollision(t,this.rawCharacterCollision)){let t=this.rawCharacterCollision;return(e=null!=e?e:new o).translationDeltaApplied=a.ut.fromRaw(t.translationDeltaApplied()),e.translationDeltaRemaining=a.ut.fromRaw(t.translationDeltaRemaining()),e.toi=t.toi(),e.witness1=a.ut.fromRaw(t.worldWitness1()),e.witness2=a.ut.fromRaw(t.worldWitness2()),e.normal1=a.ut.fromRaw(t.worldNormal1()),e.normal2=a.ut.fromRaw(t.worldNormal2()),e.collider=this.colliders.get(t.handle()),e}return null}}i()}catch(t){i(t)}}))},37:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{_:()=>n._,m:()=>n.m});var n=r(3129),a=t([n]);n=(a.then?(await a)():a)[0],i()}catch(t){i(t)}}))},8029:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{K:()=>s});var n=r(8912),a=t([n]);n=(a.then?(await a)():a)[0];class s{constructor(t){this.raw=t||new n.LE}free(){this.raw&&this.raw.free(),this.raw=void 0}}i()}catch(t){i(t)}}))},6778:(t,e,r)=>{var i;r.d(e,{j:()=>i}),function(t){t[t.Average=0]="Average",t[t.Min=1]="Min",t[t.Multiply=2]="Multiply",t[t.Max=3]="Max"}(i||(i={}))},5789:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{C1:()=>w,JW:()=>h,ME:()=>s,Pf:()=>d,T9:()=>p,Vt:()=>a,_h:()=>g,au:()=>b,dl:()=>n,eZ:()=>u,s2:()=>c});var n,a,s,o=r(594),_=r(8912),l=t([_,o]);[_,o]=l.then?(await l)():l,function(t){t[t.Revolute=0]="Revolute",t[t.Fixed=1]="Fixed",t[t.Prismatic=2]="Prismatic",t[t.Rope=3]="Rope",t[t.Spring=4]="Spring"}(n||(n={})),function(t){t[t.AccelerationBased=0]="AccelerationBased",t[t.ForceBased=1]="ForceBased"}(a||(a={})),function(t){t[t.X=1]="X",t[t.Y=2]="Y",t[t.Z=4]="Z",t[t.AngX=8]="AngX",t[t.AngY=16]="AngY",t[t.AngZ=32]="AngZ"}(s||(s={}));class c{constructor(t,e,r){this.rawSet=t,this.bodySet=e,this.handle=r}static newTyped(t,e,r){switch(t.jointType(r)){case _.yk.Revolute:return new b(t,e,r);case _.yk.Prismatic:return new u(t,e,r);case _.yk.Fixed:return new h(t,e,r);case _.yk.Spring:return new p(t,e,r);case _.yk.Rope:return new d(t,e,r);default:return new c(t,e,r)}}finalizeDeserialization(t){this.bodySet=t}isValid(){return this.rawSet.contains(this.handle)}body1(){return this.bodySet.get(this.rawSet.jointBodyHandle1(this.handle))}body2(){return this.bodySet.get(this.rawSet.jointBodyHandle2(this.handle))}type(){return this.rawSet.jointType(this.handle)}anchor1(){return o.ut.fromRaw(this.rawSet.jointAnchor1(this.handle))}anchor2(){return o.ut.fromRaw(this.rawSet.jointAnchor2(this.handle))}setAnchor1(t){const e=o.ut.intoRaw(t);this.rawSet.jointSetAnchor1(this.handle,e),e.free()}setAnchor2(t){const e=o.ut.intoRaw(t);this.rawSet.jointSetAnchor2(this.handle,e),e.free()}setContactsEnabled(t){this.rawSet.jointSetContactsEnabled(this.handle,t)}contactsEnabled(){return this.rawSet.jointContactsEnabled(this.handle)}}class w extends c{limitsEnabled(){return this.rawSet.jointLimitsEnabled(this.handle,this.rawAxis())}limitsMin(){return this.rawSet.jointLimitsMin(this.handle,this.rawAxis())}limitsMax(){return this.rawSet.jointLimitsMax(this.handle,this.rawAxis())}setLimits(t,e){this.rawSet.jointSetLimits(this.handle,this.rawAxis(),t,e)}configureMotorModel(t){this.rawSet.jointConfigureMotorModel(this.handle,this.rawAxis(),t)}configureMotorVelocity(t,e){this.rawSet.jointConfigureMotorVelocity(this.handle,this.rawAxis(),t,e)}configureMotorPosition(t,e,r){this.rawSet.jointConfigureMotorPosition(this.handle,this.rawAxis(),t,e,r)}configureMotor(t,e,r,i){this.rawSet.jointConfigureMotor(this.handle,this.rawAxis(),t,e,r,i)}}class h extends c{}class d extends c{}class p extends c{}class u extends w{rawAxis(){return _.JM.X}}class b extends w{rawAxis(){return _.JM.AngX}}class g{constructor(){}static fixed(t,e,r,i){let a=new g;return a.anchor1=t,a.anchor2=r,a.frame1=e,a.frame2=i,a.jointType=n.Fixed,a}static spring(t,e,r,i,a){let s=new g;return s.anchor1=i,s.anchor2=a,s.length=t,s.stiffness=e,s.damping=r,s.jointType=n.Spring,s}static rope(t,e,r){let i=new g;return i.anchor1=e,i.anchor2=r,i.length=t,i.jointType=n.Rope,i}static revolute(t,e){let r=new g;return r.anchor1=t,r.anchor2=e,r.jointType=n.Revolute,r}static prismatic(t,e,r){let i=new g;return i.anchor1=t,i.anchor2=e,i.axis=r,i.jointType=n.Prismatic,i}intoRaw(){let t,e,r=o.ut.intoRaw(this.anchor1),i=o.ut.intoRaw(this.anchor2),a=!1,s=0,l=0;switch(this.jointType){case n.Fixed:let c=o.T3.intoRaw(this.frame1),w=o.T3.intoRaw(this.frame2);e=_.cQ.fixed(r,c,i,w),c.free(),w.free();break;case n.Spring:e=_.cQ.spring(this.length,this.stiffness,this.damping,r,i);break;case n.Rope:e=_.cQ.rope(this.length,r,i);break;case n.Prismatic:t=o.ut.intoRaw(this.axis),this.limitsEnabled&&(a=!0,s=this.limits[0],l=this.limits[1]),e=_.cQ.prismatic(r,i,t,a,s,l),t.free();break;case n.Revolute:e=_.cQ.revolute(r,i)}return r.free(),i.free(),e}}i()}catch(t){i(t)}}))},2179:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{l:()=>_});var n=r(8912),a=r(4740),s=r(5789),o=t([n,s]);[n,s]=o.then?(await o)():o;class _{constructor(t){this.raw=t||new n.Qc,this.map=new a.F,t&&t.forEachJointHandle((e=>{this.map.set(e,s.s2.newTyped(t,null,e))}))}free(){this.raw&&this.raw.free(),this.raw=void 0,this.map&&this.map.clear(),this.map=void 0}finalizeDeserialization(t){this.map.forEach((e=>e.finalizeDeserialization(t)))}createJoint(t,e,r,i,n){const a=e.intoRaw(),o=this.raw.createJoint(a,r,i,n);a.free();let _=s.s2.newTyped(this.raw,t,o);return this.map.set(o,_),_}remove(t,e){this.raw.remove(t,e),this.unmap(t)}forEachJointHandleAttachedToRigidBody(t,e){this.raw.forEachJointAttachedToRigidBody(t,e)}unmap(t){this.map.delete(t)}len(){return this.map.len()}contains(t){return null!=this.get(t)}get(t){return this.map.get(t)}forEach(t){this.map.forEach(t)}getAll(){return this.map.getAll()}}i()}catch(t){i(t)}}))},4155:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{Am:()=>l.Am,C1:()=>o.C1,JW:()=>o.JW,Jj:()=>n.Jj,Kd:()=>h.K,ME:()=>o.ME,Pf:()=>o.Pf,RT:()=>s.R,T9:()=>o.T9,UW:()=>l.UW,Vt:()=>o.Vt,_h:()=>o._h,au:()=>o.au,dl:()=>o.dl,eZ:()=>o.eZ,h1:()=>c.h,ib:()=>n.ib,jK:()=>w.j,jp:()=>l.jp,lX:()=>_.l,rF:()=>a.r,s2:()=>o.s2,wI:()=>l.wI,xr:()=>n.xr,yB:()=>d.y,yf:()=>l.yf});var n=r(123),a=r(829),s=r(5290),o=r(5789),_=r(2179),l=r(388),c=r(1285),w=r(6778),h=r(8029),d=r(824),p=t([n,a,s,o,_,l,c,h,d]);[n,a,s,o,_,l,c,h,d]=p.then?(await p)():p,i()}catch(t){i(t)}}))},5290:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{R:()=>s});var n=r(8912),a=t([n]);n=(a.then?(await a)():a)[0];class s{constructor(t){this.raw=t||new n.zu}free(){this.raw&&this.raw.free(),this.raw=void 0}get dt(){return this.raw.dt}get erp(){return this.raw.erp}get allowedLinearError(){return this.raw.allowedLinearError}get predictionDistance(){return this.raw.predictionDistance}get numSolverIterations(){return this.raw.numSolverIterations}get numAdditionalFrictionIterations(){return this.raw.numAdditionalFrictionIterations}get numInternalPgsIterations(){return this.raw.numInternalPgsIterations}get minIslandSize(){return this.raw.minIslandSize}get maxCcdSubsteps(){return this.raw.maxCcdSubsteps}set dt(t){this.raw.dt=t}set erp(t){this.raw.erp=t}set allowedLinearError(t){this.raw.allowedLinearError=t}set predictionDistance(t){this.raw.predictionDistance=t}set numSolverIterations(t){this.raw.numSolverIterations=t}set numAdditionalFrictionIterations(t){this.raw.numAdditionalFrictionIterations=t}set numInternalPgsIterations(t){this.raw.numInternalPgsIterations=t}set minIslandSize(t){this.raw.minIslandSize=t}set maxCcdSubsteps(t){this.raw.maxCcdSubsteps=t}switchToStandardPgsSolver(){this.raw.switchToStandardPgsSolver()}switchToSmallStepsPgsSolver(){this.raw.switchToSmallStepsPgsSolver()}}i()}catch(t){i(t)}}))},824:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{y:()=>s});var n=r(8912),a=t([n]);n=(a.then?(await a)():a)[0];class s{constructor(t){this.raw=t||new n.Is}free(){this.raw&&this.raw.free(),this.raw=void 0}forEachActiveRigidBodyHandle(t){this.raw.forEachActiveRigidBodyHandle(t)}}i()}catch(t){i(t)}}))},388:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{Am:()=>c,UW:()=>_,jp:()=>l,wI:()=>o,yf:()=>s});var n=r(8912),a=t([n]);n=(a.then?(await a)():a)[0];class s{constructor(t,e){this.rawSet=t,this.handle=e}static newTyped(t,e){switch(t.jointType(e)){case n.yk.Revolute:return new c(t,e);case n.yk.Prismatic:return new l(t,e);case n.yk.Fixed:return new _(t,e);default:return new s(t,e)}}isValid(){return this.rawSet.contains(this.handle)}setContactsEnabled(t){this.rawSet.jointSetContactsEnabled(this.handle,t)}contactsEnabled(){return this.rawSet.jointContactsEnabled(this.handle)}}class o extends s{}class _ extends s{}class l extends o{rawAxis(){return n.JM.X}}class c extends o{rawAxis(){return n.JM.AngX}}i()}catch(t){i(t)}}))},1285:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{h:()=>_});var n=r(8912),a=r(4740),s=r(388),o=t([n,s]);[n,s]=o.then?(await o)():o;class _{constructor(t){this.raw=t||new n.fl,this.map=new a.F,t&&t.forEachJointHandle((t=>{this.map.set(t,s.yf.newTyped(this.raw,t))}))}free(){this.raw&&this.raw.free(),this.raw=void 0,this.map&&this.map.clear(),this.map=void 0}createJoint(t,e,r,i){const n=t.intoRaw(),a=this.raw.createJoint(n,e,r,i);n.free();let o=s.yf.newTyped(this.raw,a);return this.map.set(a,o),o}remove(t,e){this.raw.remove(t,e),this.map.delete(t)}unmap(t){this.map.delete(t)}len(){return this.map.len()}contains(t){return null!=this.get(t)}get(t){return this.map.get(t)}forEach(t){this.map.forEach(t)}forEachJointHandleAttachedToRigidBody(t,e){this.raw.forEachJointAttachedToRigidBody(t,e)}getAll(){return this.map.getAll()}}i()}catch(t){i(t)}}))},123:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{Jj:()=>n,ib:()=>o,xr:()=>_});var n,a=r(594),s=t([a]);a=(s.then?(await s)():s)[0],function(t){t[t.Dynamic=0]="Dynamic",t[t.Fixed=1]="Fixed",t[t.KinematicPositionBased=2]="KinematicPositionBased",t[t.KinematicVelocityBased=3]="KinematicVelocityBased"}(n||(n={}));class o{constructor(t,e,r){this.rawSet=t,this.colliderSet=e,this.handle=r}finalizeDeserialization(t){this.colliderSet=t}isValid(){return this.rawSet.contains(this.handle)}lockTranslations(t,e){return this.rawSet.rbLockTranslations(this.handle,t,e)}lockRotations(t,e){return this.rawSet.rbLockRotations(this.handle,t,e)}setEnabledTranslations(t,e,r){return this.rawSet.rbSetEnabledTranslations(this.handle,t,e,r)}restrictTranslations(t,e,r){this.setEnabledTranslations(t,t,r)}dominanceGroup(){return this.rawSet.rbDominanceGroup(this.handle)}setDominanceGroup(t){this.rawSet.rbSetDominanceGroup(this.handle,t)}additionalSolverIterations(){return this.rawSet.rbAdditionalSolverIterations(this.handle)}setAdditionalSolverIterations(t){this.rawSet.rbSetAdditionalSolverIterations(this.handle,t)}enableCcd(t){this.rawSet.rbEnableCcd(this.handle,t)}translation(){let t=this.rawSet.rbTranslation(this.handle);return a.ut.fromRaw(t)}rotation(){let t=this.rawSet.rbRotation(this.handle);return a.T3.fromRaw(t)}nextTranslation(){let t=this.rawSet.rbNextTranslation(this.handle);return a.ut.fromRaw(t)}nextRotation(){let t=this.rawSet.rbNextRotation(this.handle);return a.T3.fromRaw(t)}setTranslation(t,e){this.rawSet.rbSetTranslation(this.handle,t.x,t.y,e)}setLinvel(t,e){let r=a.ut.intoRaw(t);this.rawSet.rbSetLinvel(this.handle,r,e),r.free()}gravityScale(){return this.rawSet.rbGravityScale(this.handle)}setGravityScale(t,e){this.rawSet.rbSetGravityScale(this.handle,t,e)}setRotation(t,e){this.rawSet.rbSetRotation(this.handle,t,e)}setAngvel(t,e){this.rawSet.rbSetAngvel(this.handle,t,e)}setNextKinematicTranslation(t){this.rawSet.rbSetNextKinematicTranslation(this.handle,t.x,t.y)}setNextKinematicRotation(t){this.rawSet.rbSetNextKinematicRotation(this.handle,t)}linvel(){return a.ut.fromRaw(this.rawSet.rbLinvel(this.handle))}angvel(){return this.rawSet.rbAngvel(this.handle)}mass(){return this.rawSet.rbMass(this.handle)}effectiveInvMass(){return a.ut.fromRaw(this.rawSet.rbEffectiveInvMass(this.handle))}invMass(){return this.rawSet.rbInvMass(this.handle)}localCom(){return a.ut.fromRaw(this.rawSet.rbLocalCom(this.handle))}worldCom(){return a.ut.fromRaw(this.rawSet.rbWorldCom(this.handle))}invPrincipalInertiaSqrt(){return this.rawSet.rbInvPrincipalInertiaSqrt(this.handle)}principalInertia(){return this.rawSet.rbPrincipalInertia(this.handle)}effectiveWorldInvInertiaSqrt(){return this.rawSet.rbEffectiveWorldInvInertiaSqrt(this.handle)}effectiveAngularInertia(){return this.rawSet.rbEffectiveAngularInertia(this.handle)}sleep(){this.rawSet.rbSleep(this.handle)}wakeUp(){this.rawSet.rbWakeUp(this.handle)}isCcdEnabled(){return this.rawSet.rbIsCcdEnabled(this.handle)}numColliders(){return this.rawSet.rbNumColliders(this.handle)}collider(t){return this.colliderSet.get(this.rawSet.rbCollider(this.handle,t))}setEnabled(t){this.rawSet.rbSetEnabled(this.handle,t)}isEnabled(){return this.rawSet.rbIsEnabled(this.handle)}bodyType(){return this.rawSet.rbBodyType(this.handle)}setBodyType(t,e){return this.rawSet.rbSetBodyType(this.handle,t,e)}isSleeping(){return this.rawSet.rbIsSleeping(this.handle)}isMoving(){return this.rawSet.rbIsMoving(this.handle)}isFixed(){return this.rawSet.rbIsFixed(this.handle)}isKinematic(){return this.rawSet.rbIsKinematic(this.handle)}isDynamic(){return this.rawSet.rbIsDynamic(this.handle)}linearDamping(){return this.rawSet.rbLinearDamping(this.handle)}angularDamping(){return this.rawSet.rbAngularDamping(this.handle)}setLinearDamping(t){this.rawSet.rbSetLinearDamping(this.handle,t)}recomputeMassPropertiesFromColliders(){this.rawSet.rbRecomputeMassPropertiesFromColliders(this.handle,this.colliderSet.raw)}setAdditionalMass(t,e){this.rawSet.rbSetAdditionalMass(this.handle,t,e)}setAdditionalMassProperties(t,e,r,i){let n=a.ut.intoRaw(e);this.rawSet.rbSetAdditionalMassProperties(this.handle,t,n,r,i),n.free()}setAngularDamping(t){this.rawSet.rbSetAngularDamping(this.handle,t)}resetForces(t){this.rawSet.rbResetForces(this.handle,t)}resetTorques(t){this.rawSet.rbResetTorques(this.handle,t)}addForce(t,e){const r=a.ut.intoRaw(t);this.rawSet.rbAddForce(this.handle,r,e),r.free()}applyImpulse(t,e){const r=a.ut.intoRaw(t);this.rawSet.rbApplyImpulse(this.handle,r,e),r.free()}addTorque(t,e){this.rawSet.rbAddTorque(this.handle,t,e)}applyTorqueImpulse(t,e){this.rawSet.rbApplyTorqueImpulse(this.handle,t,e)}addForceAtPoint(t,e,r){const i=a.ut.intoRaw(t),n=a.ut.intoRaw(e);this.rawSet.rbAddForceAtPoint(this.handle,i,n,r),i.free(),n.free()}applyImpulseAtPoint(t,e,r){const i=a.ut.intoRaw(t),n=a.ut.intoRaw(e);this.rawSet.rbApplyImpulseAtPoint(this.handle,i,n,r),i.free(),n.free()}}class _{constructor(t){this.enabled=!0,this.status=t,this.translation=a.ut.zeros(),this.rotation=a.T3.identity(),this.gravityScale=1,this.linvel=a.ut.zeros(),this.mass=0,this.massOnly=!1,this.centerOfMass=a.ut.zeros(),this.translationsEnabledX=!0,this.translationsEnabledY=!0,this.angvel=0,this.principalAngularInertia=0,this.rotationsEnabled=!0,this.linearDamping=0,this.angularDamping=0,this.canSleep=!0,this.sleeping=!1,this.ccdEnabled=!1,this.dominanceGroup=0,this.additionalSolverIterations=0}static dynamic(){return new _(n.Dynamic)}static kinematicPositionBased(){return new _(n.KinematicPositionBased)}static kinematicVelocityBased(){return new _(n.KinematicVelocityBased)}static fixed(){return new _(n.Fixed)}static newDynamic(){return new _(n.Dynamic)}static newKinematicPositionBased(){return new _(n.KinematicPositionBased)}static newKinematicVelocityBased(){return new _(n.KinematicVelocityBased)}static newStatic(){return new _(n.Fixed)}setDominanceGroup(t){return this.dominanceGroup=t,this}setAdditionalSolverIterations(t){return this.additionalSolverIterations=t,this}setEnabled(t){return this.enabled=t,this}setTranslation(t,e){if("number"!=typeof t||"number"!=typeof e)throw TypeError("The translation components must be numbers.");return this.translation={x:t,y:e},this}setRotation(t){return this.rotation=t,this}setGravityScale(t){return this.gravityScale=t,this}setAdditionalMass(t){return this.mass=t,this.massOnly=!0,this}setLinvel(t,e){if("number"!=typeof t||"number"!=typeof e)throw TypeError("The linvel components must be numbers.");return this.linvel={x:t,y:e},this}setAngvel(t){return this.angvel=t,this}setAdditionalMassProperties(t,e,r){return this.mass=t,a.ut.copy(this.centerOfMass,e),this.principalAngularInertia=r,this.massOnly=!1,this}enabledTranslations(t,e){return this.translationsEnabledX=t,this.translationsEnabledY=e,this}restrictTranslations(t,e){return this.enabledTranslations(t,e)}lockTranslations(){return this.restrictTranslations(!1,!1)}lockRotations(){return this.rotationsEnabled=!1,this}setLinearDamping(t){return this.linearDamping=t,this}setAngularDamping(t){return this.angularDamping=t,this}setCanSleep(t){return this.canSleep=t,this}setSleeping(t){return this.sleeping=t,this}setCcdEnabled(t){return this.ccdEnabled=t,this}setUserData(t){return this.userData=t,this}}i()}catch(t){i(t)}}))},829:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{r:()=>l});var n=r(8912),a=r(4740),s=r(594),o=r(123),_=t([n,o,s]);[n,o,s]=_.then?(await _)():_;class l{constructor(t){this.raw=t||new n.fY,this.map=new a.F,t&&t.forEachRigidBodyHandle((e=>{this.map.set(e,new o.ib(t,null,e))}))}free(){this.raw&&this.raw.free(),this.raw=void 0,this.map&&this.map.clear(),this.map=void 0}finalizeDeserialization(t){this.map.forEach((e=>e.finalizeDeserialization(t)))}createRigidBody(t,e){let r=s.ut.intoRaw(e.translation),i=s.T3.intoRaw(e.rotation),n=s.ut.intoRaw(e.linvel),a=s.ut.intoRaw(e.centerOfMass),_=this.raw.createRigidBody(e.enabled,r,i,e.gravityScale,e.mass,e.massOnly,a,n,e.angvel,e.principalAngularInertia,e.translationsEnabledX,e.translationsEnabledY,e.rotationsEnabled,e.linearDamping,e.angularDamping,e.status,e.canSleep,e.sleeping,e.ccdEnabled,e.dominanceGroup,e.additionalSolverIterations);r.free(),i.free(),n.free(),a.free();const l=new o.ib(this.raw,t,_);return l.userData=e.userData,this.map.set(_,l),l}remove(t,e,r,i,n){for(let e=0;e<this.raw.rbNumColliders(t);e+=1)r.unmap(this.raw.rbCollider(t,e));i.forEachJointHandleAttachedToRigidBody(t,(t=>i.unmap(t))),n.forEachJointHandleAttachedToRigidBody(t,(t=>n.unmap(t))),this.raw.remove(t,e.raw,r.raw,i.raw,n.raw),this.map.delete(t)}len(){return this.map.len()}contains(t){return null!=this.get(t)}get(t){return this.map.get(t)}forEach(t){this.map.forEach(t)}forEachActiveRigidBody(t,e){t.forEachActiveRigidBodyHandle((t=>{e(this.get(t))}))}getAll(){return this.map.getAll()}}i()}catch(t){i(t)}}))},8811:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.r(e),r.d(e,{ActiveCollisionTypes:()=>o.vq,ActiveEvents:()=>_.Md,ActiveHooks:()=>_.iX,Ball:()=>o.ec,BroadPhase:()=>o.NT,CCDSolver:()=>s.Kd,Capsule:()=>o.sw,CharacterCollision:()=>l._,CoefficientCombineRule:()=>s.jK,Collider:()=>o.YM,ColliderDesc:()=>o.ic,ColliderSet:()=>o.zY,ConvexPolygon:()=>o.to,Cuboid:()=>o.jv,DebugRenderBuffers:()=>_.tt,DebugRenderPipeline:()=>_.kh,EventQueue:()=>_.NH,FeatureType:()=>o.Te,FixedImpulseJoint:()=>s.JW,FixedMultibodyJoint:()=>s.UW,HalfSpace:()=>o.Fr,Heightfield:()=>o.f4,ImpulseJoint:()=>s.s2,ImpulseJointSet:()=>s.lX,IntegrationParameters:()=>s.RT,IslandManager:()=>s.yB,JointAxesMask:()=>s.ME,JointData:()=>s._h,JointType:()=>s.dl,KinematicCharacterController:()=>l.m,MassPropsMode:()=>o.uV,MotorModel:()=>s.Vt,MultibodyJoint:()=>s.yf,MultibodyJointSet:()=>s.h1,NarrowPhase:()=>o.L4,PhysicsPipeline:()=>_.DJ,PointColliderProjection:()=>o.Vl,PointProjection:()=>o.FP,Polyline:()=>o.aH,PrismaticImpulseJoint:()=>s.eZ,PrismaticMultibodyJoint:()=>s.jp,QueryFilterFlags:()=>_._m,QueryPipeline:()=>_.Vq,Ray:()=>o.zH,RayColliderIntersection:()=>o.No,RayColliderToi:()=>o.cu,RayIntersection:()=>o.Gz,RevoluteImpulseJoint:()=>s.au,RevoluteMultibodyJoint:()=>s.Am,RigidBody:()=>s.ib,RigidBodyDesc:()=>s.xr,RigidBodySet:()=>s.rF,RigidBodyType:()=>s.Jj,RopeImpulseJoint:()=>s.Pf,RotationOps:()=>a.T3,RoundConvexPolygon:()=>o.DM,RoundCuboid:()=>o.iA,RoundTriangle:()=>o.$R,Segment:()=>o.XX,SerializationPipeline:()=>_.y9,Shape:()=>o.bn,ShapeColliderTOI:()=>o.mB,ShapeContact:()=>o.Qi,ShapeTOI:()=>o.GJ,ShapeType:()=>o.DY,SolverFlags:()=>_.Nv,SpringImpulseJoint:()=>s.T9,TempContactForceEvent:()=>_.qV,TempContactManifold:()=>o.eL,TriMesh:()=>o.az,Triangle:()=>o.CJ,UnitImpulseJoint:()=>s.C1,UnitMultibodyJoint:()=>s.wI,Vector2:()=>a.FM,VectorOps:()=>a.ut,World:()=>_.q3,version:()=>w});var n=r(8912),a=r(594),s=r(4155),o=r(7106),_=r(1027),l=r(37),c=t([n,a,s,o,_,l]);function w(){return(0,n.i8)()}[n,a,s,o,_,l]=c.then?(await c)():c,i()}catch(h){i(h)}}))},7183:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{N:()=>s});var n=r(8912),a=t([n]);n=(a.then?(await a)():a)[0];class s{constructor(t){this.raw=t||new n.FU}free(){this.raw&&this.raw.free(),this.raw=void 0}}i()}catch(t){i(t)}}))},2470:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{YM:()=>b,ic:()=>g,uV:()=>a,vq:()=>n});var n,a,s=r(594),o=r(6778),_=r(975),l=r(9512),c=r(6586),w=r(3170),h=r(1611),d=r(1018),p=r(4112),u=t([c,s,h,d,p,w,_]);[c,s,h,d,p,w,_]=u.then?(await u)():u,function(t){t[t.DYNAMIC_DYNAMIC=1]="DYNAMIC_DYNAMIC",t[t.DYNAMIC_KINEMATIC=12]="DYNAMIC_KINEMATIC",t[t.DYNAMIC_FIXED=2]="DYNAMIC_FIXED",t[t.KINEMATIC_KINEMATIC=52224]="KINEMATIC_KINEMATIC",t[t.KINEMATIC_FIXED=8704]="KINEMATIC_FIXED",t[t.FIXED_FIXED=32]="FIXED_FIXED",t[t.DEFAULT=15]="DEFAULT",t[t.ALL=60943]="ALL"}(n||(n={}));class b{constructor(t,e,r,i){this.colliderSet=t,this.handle=e,this._parent=r,this._shape=i}finalizeDeserialization(t){null!=this.handle&&(this._parent=t.get(this.colliderSet.raw.coParent(this.handle)))}ensureShapeIsCached(){this._shape||(this._shape=c.bn.fromRaw(this.colliderSet.raw,this.handle))}get shape(){return this.ensureShapeIsCached(),this._shape}isValid(){return this.colliderSet.raw.contains(this.handle)}translation(){return s.ut.fromRaw(this.colliderSet.raw.coTranslation(this.handle))}rotation(){return s.T3.fromRaw(this.colliderSet.raw.coRotation(this.handle))}isSensor(){return this.colliderSet.raw.coIsSensor(this.handle)}setSensor(t){this.colliderSet.raw.coSetSensor(this.handle,t)}setShape(t){let e=t.intoRaw();this.colliderSet.raw.coSetShape(this.handle,e),e.free(),this._shape=t}setEnabled(t){this.colliderSet.raw.coSetEnabled(this.handle,t)}isEnabled(){return this.colliderSet.raw.coIsEnabled(this.handle)}setRestitution(t){this.colliderSet.raw.coSetRestitution(this.handle,t)}setFriction(t){this.colliderSet.raw.coSetFriction(this.handle,t)}frictionCombineRule(){return this.colliderSet.raw.coFrictionCombineRule(this.handle)}setFrictionCombineRule(t){this.colliderSet.raw.coSetFrictionCombineRule(this.handle,t)}restitutionCombineRule(){return this.colliderSet.raw.coRestitutionCombineRule(this.handle)}setRestitutionCombineRule(t){this.colliderSet.raw.coSetRestitutionCombineRule(this.handle,t)}setCollisionGroups(t){this.colliderSet.raw.coSetCollisionGroups(this.handle,t)}setSolverGroups(t){this.colliderSet.raw.coSetSolverGroups(this.handle,t)}activeHooks(){return this.colliderSet.raw.coActiveHooks(this.handle)}setActiveHooks(t){this.colliderSet.raw.coSetActiveHooks(this.handle,t)}activeEvents(){return this.colliderSet.raw.coActiveEvents(this.handle)}setActiveEvents(t){this.colliderSet.raw.coSetActiveEvents(this.handle,t)}activeCollisionTypes(){return this.colliderSet.raw.coActiveCollisionTypes(this.handle)}setContactForceEventThreshold(t){return this.colliderSet.raw.coSetContactForceEventThreshold(this.handle,t)}contactForceEventThreshold(){return this.colliderSet.raw.coContactForceEventThreshold(this.handle)}setActiveCollisionTypes(t){this.colliderSet.raw.coSetActiveCollisionTypes(this.handle,t)}setDensity(t){this.colliderSet.raw.coSetDensity(this.handle,t)}setMass(t){this.colliderSet.raw.coSetMass(this.handle,t)}setMassProperties(t,e,r){let i=s.ut.intoRaw(e);this.colliderSet.raw.coSetMassProperties(this.handle,t,i,r),i.free()}setTranslation(t){this.colliderSet.raw.coSetTranslation(this.handle,t.x,t.y)}setTranslationWrtParent(t){this.colliderSet.raw.coSetTranslationWrtParent(this.handle,t.x,t.y)}setRotation(t){this.colliderSet.raw.coSetRotation(this.handle,t)}setRotationWrtParent(t){this.colliderSet.raw.coSetRotationWrtParent(this.handle,t)}shapeType(){return this.colliderSet.raw.coShapeType(this.handle)}halfExtents(){return s.ut.fromRaw(this.colliderSet.raw.coHalfExtents(this.handle))}setHalfExtents(t){const e=s.ut.intoRaw(t);this.colliderSet.raw.coSetHalfExtents(this.handle,e)}radius(){return this.colliderSet.raw.coRadius(this.handle)}setRadius(t){this.colliderSet.raw.coSetRadius(this.handle,t)}roundRadius(){return this.colliderSet.raw.coRoundRadius(this.handle)}setRoundRadius(t){this.colliderSet.raw.coSetRoundRadius(this.handle,t)}halfHeight(){return this.colliderSet.raw.coHalfHeight(this.handle)}setHalfHeight(t){this.colliderSet.raw.coSetHalfHeight(this.handle,t)}vertices(){return this.colliderSet.raw.coVertices(this.handle)}indices(){return this.colliderSet.raw.coIndices(this.handle)}heightfieldHeights(){return this.colliderSet.raw.coHeightfieldHeights(this.handle)}heightfieldScale(){let t=this.colliderSet.raw.coHeightfieldScale(this.handle);return s.ut.fromRaw(t)}parent(){return this._parent}friction(){return this.colliderSet.raw.coFriction(this.handle)}restitution(){return this.colliderSet.raw.coRestitution(this.handle)}density(){return this.colliderSet.raw.coDensity(this.handle)}mass(){return this.colliderSet.raw.coMass(this.handle)}volume(){return this.colliderSet.raw.coVolume(this.handle)}collisionGroups(){return this.colliderSet.raw.coCollisionGroups(this.handle)}solverGroups(){return this.colliderSet.raw.coSolverGroups(this.handle)}containsPoint(t){let e=s.ut.intoRaw(t),r=this.colliderSet.raw.coContainsPoint(this.handle,e);return e.free(),r}projectPoint(t,e){let r=s.ut.intoRaw(t),i=h.F.fromRaw(this.colliderSet.raw.coProjectPoint(this.handle,r,e));return r.free(),i}intersectsRay(t,e){let r=s.ut.intoRaw(t.origin),i=s.ut.intoRaw(t.dir),n=this.colliderSet.raw.coIntersectsRay(this.handle,r,i,e);return r.free(),i.free(),n}castShape(t,e,r,i,n,a,o){let _=s.ut.intoRaw(t),l=s.ut.intoRaw(r),c=s.T3.intoRaw(i),w=s.ut.intoRaw(n),h=e.intoRaw(),p=d.G.fromRaw(this.colliderSet,this.colliderSet.raw.coCastShape(this.handle,_,h,l,c,w,a,o));return _.free(),l.free(),c.free(),w.free(),h.free(),p}castCollider(t,e,r,i,n){let a=s.ut.intoRaw(t),o=s.ut.intoRaw(r),_=d.m.fromRaw(this.colliderSet,this.colliderSet.raw.coCastCollider(this.handle,a,e.handle,o,i,n));return a.free(),o.free(),_}intersectsShape(t,e,r){let i=s.ut.intoRaw(e),n=s.T3.intoRaw(r),a=t.intoRaw(),o=this.colliderSet.raw.coIntersectsShape(this.handle,a,i,n);return i.free(),n.free(),a.free(),o}contactShape(t,e,r,i){let n=s.ut.intoRaw(e),a=s.T3.intoRaw(r),o=t.intoRaw(),_=p.Q.fromRaw(this.colliderSet.raw.coContactShape(this.handle,o,n,a,i));return n.free(),a.free(),o.free(),_}contactCollider(t,e){return p.Q.fromRaw(this.colliderSet.raw.coContactCollider(this.handle,t.handle,e))}castRay(t,e,r){let i=s.ut.intoRaw(t.origin),n=s.ut.intoRaw(t.dir),a=this.colliderSet.raw.coCastRay(this.handle,i,n,e,r);return i.free(),n.free(),a}castRayAndGetNormal(t,e,r){let i=s.ut.intoRaw(t.origin),n=s.ut.intoRaw(t.dir),a=w.Gz.fromRaw(this.colliderSet.raw.coCastRayAndGetNormal(this.handle,i,n,e,r));return i.free(),n.free(),a}}!function(t){t[t.Density=0]="Density",t[t.Mass=1]="Mass",t[t.MassProps=2]="MassProps"}(a||(a={}));class g{constructor(t){this.enabled=!0,this.shape=t,this.massPropsMode=a.Density,this.density=1,this.friction=.5,this.restitution=0,this.rotation=s.T3.identity(),this.translation=s.ut.zeros(),this.isSensor=!1,this.collisionGroups=4294967295,this.solverGroups=4294967295,this.frictionCombineRule=o.j.Average,this.restitutionCombineRule=o.j.Average,this.activeCollisionTypes=n.DEFAULT,this.activeEvents=_.Md.NONE,this.activeHooks=l.i.NONE,this.mass=0,this.centerOfMass=s.ut.zeros(),this.contactForceEventThreshold=0,this.principalAngularInertia=0,this.rotationsEnabled=!0}static ball(t){const e=new c.ec(t);return new g(e)}static capsule(t,e){const r=new c.sw(t,e);return new g(r)}static segment(t,e){const r=new c.XX(t,e);return new g(r)}static triangle(t,e,r){const i=new c.CJ(t,e,r);return new g(i)}static roundTriangle(t,e,r,i){const n=new c.$R(t,e,r,i);return new g(n)}static polyline(t,e){const r=new c.aH(t,e);return new g(r)}static trimesh(t,e){const r=new c.az(t,e);return new g(r)}static cuboid(t,e){const r=new c.jv(t,e);return new g(r)}static roundCuboid(t,e,r){const i=new c.iA(t,e,r);return new g(i)}static halfspace(t){const e=new c.Fr(t);return new g(e)}static heightfield(t,e){const r=new c.f4(t,e);return new g(r)}static convexHull(t){const e=new c.to(t,!1);return new g(e)}static convexPolyline(t){const e=new c.to(t,!0);return new g(e)}static roundConvexHull(t,e){const r=new c.DM(t,e,!1);return new g(r)}static roundConvexPolyline(t,e){const r=new c.DM(t,e,!0);return new g(r)}setTranslation(t,e){if("number"!=typeof t||"number"!=typeof e)throw TypeError("The translation components must be numbers.");return this.translation={x:t,y:e},this}setRotation(t){return this.rotation=t,this}setSensor(t){return this.isSensor=t,this}setEnabled(t){return this.enabled=t,this}setDensity(t){return this.massPropsMode=a.Density,this.density=t,this}setMass(t){return this.massPropsMode=a.Mass,this.mass=t,this}setMassProperties(t,e,r){return this.massPropsMode=a.MassProps,this.mass=t,s.ut.copy(this.centerOfMass,e),this.principalAngularInertia=r,this}setRestitution(t){return this.restitution=t,this}setFriction(t){return this.friction=t,this}setFrictionCombineRule(t){return this.frictionCombineRule=t,this}setRestitutionCombineRule(t){return this.restitutionCombineRule=t,this}setCollisionGroups(t){return this.collisionGroups=t,this}setSolverGroups(t){return this.solverGroups=t,this}setActiveHooks(t){return this.activeHooks=t,this}setActiveEvents(t){return this.activeEvents=t,this}setActiveCollisionTypes(t){return this.activeCollisionTypes=t,this}setContactForceEventThreshold(t){return this.contactForceEventThreshold=t,this}}i()}catch(t){i(t)}}))},8234:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{z:()=>l});var n=r(8912),a=r(4740),s=r(594),o=r(2470),_=t([n,o,s]);[n,o,s]=_.then?(await _)():_;class l{constructor(t){this.raw=t||new n.IQ,this.map=new a.F,t&&t.forEachColliderHandle((t=>{this.map.set(t,new o.YM(this,t,null))}))}free(){this.raw&&this.raw.free(),this.raw=void 0,this.map&&this.map.clear(),this.map=void 0}castClosure(t){return e=>t?t(this.get(e)):void 0}finalizeDeserialization(t){this.map.forEach((e=>e.finalizeDeserialization(t)))}createCollider(t,e,r){let i=null!=r&&null!=r;if(i&&isNaN(r))throw Error("Cannot create a collider with a parent rigid-body handle that is not a number.");let n=e.shape.intoRaw(),a=s.ut.intoRaw(e.translation),_=s.T3.intoRaw(e.rotation),l=s.ut.intoRaw(e.centerOfMass),c=this.raw.createCollider(e.enabled,n,a,_,e.massPropsMode,e.mass,l,e.principalAngularInertia,e.density,e.friction,e.restitution,e.frictionCombineRule,e.restitutionCombineRule,e.isSensor,e.collisionGroups,e.solverGroups,e.activeCollisionTypes,e.activeHooks,e.activeEvents,e.contactForceEventThreshold,i,i?r:0,t.raw);n.free(),a.free(),_.free(),l.free();let w=i?t.get(r):null,h=new o.YM(this,c,w,e.shape);return this.map.set(c,h),h}remove(t,e,r,i){this.raw.remove(t,e.raw,r.raw,i),this.unmap(t)}unmap(t){this.map.delete(t)}get(t){return this.map.get(t)}len(){return this.map.len()}contains(t){return null!=this.get(t)}forEach(t){this.map.forEach(t)}getAll(){return this.map.getAll()}}i()}catch(t){i(t)}}))},4112:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{Q:()=>s});var n=r(594),a=t([n]);n=(a.then?(await a)():a)[0];class s{constructor(t,e,r,i,n){this.distance=t,this.point1=e,this.point2=r,this.normal1=i,this.normal2=n}static fromRaw(t){if(!t)return null;const e=new s(t.distance(),n.ut.fromRaw(t.point1()),n.ut.fromRaw(t.point2()),n.ut.fromRaw(t.normal1()),n.ut.fromRaw(t.normal2()));return t.free(),e}}i()}catch(t){i(t)}}))},9308:(t,e,r)=>{var i;r.d(e,{T:()=>i}),function(t){t[t.Vertex=0]="Vertex",t[t.Face=1]="Face",t[t.Unknown=2]="Unknown"}(i||(i={}))},7106:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{$R:()=>s.$R,CJ:()=>s.CJ,DM:()=>s.DM,DY:()=>s.DY,FP:()=>w.F,Fr:()=>s.Fr,GJ:()=>h.G,Gz:()=>c.Gz,L4:()=>a.L,NT:()=>n.N,No:()=>c.No,Qi:()=>d.Q,Te:()=>l.T,Vl:()=>w.V,XX:()=>s.XX,YM:()=>o.YM,aH:()=>s.aH,az:()=>s.az,bn:()=>s.bn,cu:()=>c.cu,eL:()=>a.e,ec:()=>s.ec,f4:()=>s.f4,iA:()=>s.iA,ic:()=>o.ic,jv:()=>s.jv,mB:()=>h.m,sw:()=>s.sw,to:()=>s.to,uV:()=>o.uV,vq:()=>o.vq,zH:()=>c.zH,zY:()=>_.z});var n=r(7183),a=r(1465),s=r(6586),o=r(2470),_=r(8234),l=r(9308),c=r(3170),w=r(1611),h=r(1018),d=r(4112),p=t([n,a,s,o,_,c,w,h,d]);[n,a,s,o,_,c,w,h,d]=p.then?(await p)():p,i()}catch(t){i(t)}}))},1465:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{L:()=>o,e:()=>_});var n=r(8912),a=r(594),s=t([n,a]);[n,a]=s.then?(await s)():s;class o{constructor(t){this.raw=t||new n.uU,this.tempManifold=new _(null)}free(){this.raw&&this.raw.free(),this.raw=void 0}contactPairsWith(t,e){this.raw.contact_pairs_with(t,e)}intersectionPairsWith(t,e){this.raw.intersection_pairs_with(t,e)}contactPair(t,e,r){const i=this.raw.contact_pair(t,e);if(i){const e=i.collider1()!=t;let n;for(n=0;n<i.numContactManifolds();++n)this.tempManifold.raw=i.contactManifold(n),this.tempManifold.raw&&r(this.tempManifold,e),this.tempManifold.free();i.free()}}intersectionPair(t,e){return this.raw.intersection_pair(t,e)}}class _{constructor(t){this.raw=t}free(){this.raw&&this.raw.free(),this.raw=void 0}normal(){return a.ut.fromRaw(this.raw.normal())}localNormal1(){return a.ut.fromRaw(this.raw.local_n1())}localNormal2(){return a.ut.fromRaw(this.raw.local_n2())}subshape1(){return this.raw.subshape1()}subshape2(){return this.raw.subshape2()}numContacts(){return this.raw.num_contacts()}localContactPoint1(t){return a.ut.fromRaw(this.raw.contact_local_p1(t))}localContactPoint2(t){return a.ut.fromRaw(this.raw.contact_local_p2(t))}contactDist(t){return this.raw.contact_dist(t)}contactFid1(t){return this.raw.contact_fid1(t)}contactFid2(t){return this.raw.contact_fid2(t)}contactImpulse(t){return this.raw.contact_impulse(t)}contactTangentImpulse(t){return this.raw.contact_tangent_impulse(t)}numSolverContacts(){return this.raw.num_solver_contacts()}solverContactPoint(t){return a.ut.fromRaw(this.raw.solver_contact_point(t))}solverContactDist(t){return this.raw.solver_contact_dist(t)}solverContactFriction(t){return this.raw.solver_contact_friction(t)}solverContactRestitution(t){return this.raw.solver_contact_restitution(t)}solverContactTangentVelocity(t){return a.ut.fromRaw(this.raw.solver_contact_tangent_velocity(t))}}i()}catch(t){i(t)}}))},1611:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{F:()=>o,V:()=>_});var n=r(594),a=r(9308),s=t([n]);n=(s.then?(await s)():s)[0];class o{constructor(t,e){this.point=t,this.isInside=e}static fromRaw(t){if(!t)return null;const e=new o(n.ut.fromRaw(t.point()),t.isInside());return t.free(),e}}class _{constructor(t,e,r,i,n){this.featureType=a.T.Unknown,this.featureId=void 0,this.collider=t,this.point=e,this.isInside=r,void 0!==n&&(this.featureId=n),void 0!==i&&(this.featureType=i)}static fromRaw(t,e){if(!e)return null;const r=new _(t.get(e.colliderHandle()),n.ut.fromRaw(e.point()),e.isInside(),e.featureType(),e.featureId());return e.free(),r}}i()}catch(t){i(t)}}))},3170:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{Gz:()=>_,No:()=>l,cu:()=>c,zH:()=>o});var n=r(594),a=r(9308),s=t([n]);n=(s.then?(await s)():s)[0];class o{constructor(t,e){this.origin=t,this.dir=e}pointAt(t){return{x:this.origin.x+this.dir.x*t,y:this.origin.y+this.dir.y*t}}}class _{constructor(t,e,r,i){this.featureType=a.T.Unknown,this.featureId=void 0,this.toi=t,this.normal=e,void 0!==i&&(this.featureId=i),void 0!==r&&(this.featureType=r)}static fromRaw(t){if(!t)return null;const e=new _(t.toi(),n.ut.fromRaw(t.normal()),t.featureType(),t.featureId());return t.free(),e}}class l{constructor(t,e,r,i,n){this.featureType=a.T.Unknown,this.featureId=void 0,this.collider=t,this.toi=e,this.normal=r,void 0!==n&&(this.featureId=n),void 0!==i&&(this.featureType=i)}static fromRaw(t,e){if(!e)return null;const r=new l(t.get(e.colliderHandle()),e.toi(),n.ut.fromRaw(e.normal()),e.featureType(),e.featureId());return e.free(),r}}class c{constructor(t,e){this.collider=t,this.toi=e}static fromRaw(t,e){if(!e)return null;const r=new c(t.get(e.colliderHandle()),e.toi());return e.free(),r}}i()}catch(t){i(t)}}))},6586:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{$R:()=>y,CJ:()=>f,DM:()=>C,DY:()=>n,Fr:()=>p,XX:()=>m,aH:()=>S,az:()=>v,bn:()=>h,ec:()=>d,f4:()=>I,iA:()=>b,jv:()=>u,sw:()=>g,to:()=>R});var n,a=r(594),s=r(8912),o=r(4112),_=r(1611),l=r(3170),c=r(1018),w=t([s,a,c,o,_,l]);[s,a,c,o,_,l]=w.then?(await w)():w;class h{static fromRaw(t,e){const r=t.coShapeType(e);let i,n,o,_,l,c,w;switch(r){case s.IB.Ball:return new d(t.coRadius(e));case s.IB.Cuboid:return i=t.coHalfExtents(e),new u(i.x,i.y);case s.IB.RoundCuboid:return i=t.coHalfExtents(e),n=t.coRoundRadius(e),new b(i.x,i.y,n);case s.IB.Capsule:return l=t.coHalfHeight(e),c=t.coRadius(e),new g(l,c);case s.IB.Segment:return o=t.coVertices(e),new m(a.ut.new(o[0],o[1]),a.ut.new(o[2],o[3]));case s.IB.Polyline:return o=t.coVertices(e),_=t.coIndices(e),new S(o,_);case s.IB.Triangle:return o=t.coVertices(e),new f(a.ut.new(o[0],o[1]),a.ut.new(o[2],o[3]),a.ut.new(o[4],o[5]));case s.IB.RoundTriangle:return o=t.coVertices(e),n=t.coRoundRadius(e),new y(a.ut.new(o[0],o[1]),a.ut.new(o[2],o[3]),a.ut.new(o[4],o[5]),n);case s.IB.HalfSpace:return w=a.ut.fromRaw(t.coHalfspaceNormal(e)),new p(w);case s.IB.TriMesh:return o=t.coVertices(e),_=t.coIndices(e),new v(o,_);case s.IB.HeightField:const h=t.coHeightfieldScale(e),T=t.coHeightfieldHeights(e);return new I(T,h);case s.IB.ConvexPolygon:return o=t.coVertices(e),new R(o,!1);case s.IB.RoundConvexPolygon:return o=t.coVertices(e),n=t.coRoundRadius(e),new C(o,n,!1);default:throw new Error("unknown shape type: "+r)}}castShape(t,e,r,i,n,s,o,_,l){let w=a.ut.intoRaw(t),h=a.T3.intoRaw(e),d=a.ut.intoRaw(r),p=a.ut.intoRaw(n),u=a.T3.intoRaw(s),b=a.ut.intoRaw(o),g=this.intoRaw(),m=i.intoRaw(),f=c.G.fromRaw(null,g.castShape(w,h,d,m,p,u,b,_,l));return w.free(),h.free(),d.free(),p.free(),u.free(),b.free(),g.free(),m.free(),f}intersectsShape(t,e,r,i,n){let s=a.ut.intoRaw(t),o=a.T3.intoRaw(e),_=a.ut.intoRaw(i),l=a.T3.intoRaw(n),c=this.intoRaw(),w=r.intoRaw(),h=c.intersectsShape(s,o,w,_,l);return s.free(),o.free(),_.free(),l.free(),c.free(),w.free(),h}contactShape(t,e,r,i,n,s){let _=a.ut.intoRaw(t),l=a.T3.intoRaw(e),c=a.ut.intoRaw(i),w=a.T3.intoRaw(n),h=this.intoRaw(),d=r.intoRaw(),p=o.Q.fromRaw(h.contactShape(_,l,d,c,w,s));return _.free(),l.free(),c.free(),w.free(),h.free(),d.free(),p}containsPoint(t,e,r){let i=a.ut.intoRaw(t),n=a.T3.intoRaw(e),s=a.ut.intoRaw(r),o=this.intoRaw(),_=o.containsPoint(i,n,s);return i.free(),n.free(),s.free(),o.free(),_}projectPoint(t,e,r,i){let n=a.ut.intoRaw(t),s=a.T3.intoRaw(e),o=a.ut.intoRaw(r),l=this.intoRaw(),c=_.F.fromRaw(l.projectPoint(n,s,o,i));return n.free(),s.free(),o.free(),l.free(),c}intersectsRay(t,e,r,i){let n=a.ut.intoRaw(e),s=a.T3.intoRaw(r),o=a.ut.intoRaw(t.origin),_=a.ut.intoRaw(t.dir),l=this.intoRaw(),c=l.intersectsRay(n,s,o,_,i);return n.free(),s.free(),o.free(),_.free(),l.free(),c}castRay(t,e,r,i,n){let s=a.ut.intoRaw(e),o=a.T3.intoRaw(r),_=a.ut.intoRaw(t.origin),l=a.ut.intoRaw(t.dir),c=this.intoRaw(),w=c.castRay(s,o,_,l,i,n);return s.free(),o.free(),_.free(),l.free(),c.free(),w}castRayAndGetNormal(t,e,r,i,n){let s=a.ut.intoRaw(e),o=a.T3.intoRaw(r),_=a.ut.intoRaw(t.origin),c=a.ut.intoRaw(t.dir),w=this.intoRaw(),h=l.Gz.fromRaw(w.castRayAndGetNormal(s,o,_,c,i,n));return s.free(),o.free(),_.free(),c.free(),w.free(),h}}!function(t){t[t.Ball=0]="Ball",t[t.Cuboid=1]="Cuboid",t[t.Capsule=2]="Capsule",t[t.Segment=3]="Segment",t[t.Polyline=4]="Polyline",t[t.Triangle=5]="Triangle",t[t.TriMesh=6]="TriMesh",t[t.HeightField=7]="HeightField",t[t.ConvexPolygon=9]="ConvexPolygon",t[t.RoundCuboid=10]="RoundCuboid",t[t.RoundTriangle=11]="RoundTriangle",t[t.RoundConvexPolygon=12]="RoundConvexPolygon",t[t.HalfSpace=13]="HalfSpace"}(n||(n={}));class d extends h{constructor(t){super(),this.type=n.Ball,this.radius=t}intoRaw(){return s.X7.ball(this.radius)}}class p extends h{constructor(t){super(),this.type=n.HalfSpace,this.normal=t}intoRaw(){let t=a.ut.intoRaw(this.normal),e=s.X7.halfspace(t);return t.free(),e}}class u extends h{constructor(t,e){super(),this.type=n.Cuboid,this.halfExtents=a.ut.new(t,e)}intoRaw(){return s.X7.cuboid(this.halfExtents.x,this.halfExtents.y)}}class b extends h{constructor(t,e,r){super(),this.type=n.RoundCuboid,this.halfExtents=a.ut.new(t,e),this.borderRadius=r}intoRaw(){return s.X7.roundCuboid(this.halfExtents.x,this.halfExtents.y,this.borderRadius)}}class g extends h{constructor(t,e){super(),this.type=n.Capsule,this.halfHeight=t,this.radius=e}intoRaw(){return s.X7.capsule(this.halfHeight,this.radius)}}class m extends h{constructor(t,e){super(),this.type=n.Segment,this.a=t,this.b=e}intoRaw(){let t=a.ut.intoRaw(this.a),e=a.ut.intoRaw(this.b),r=s.X7.segment(t,e);return t.free(),e.free(),r}}class f extends h{constructor(t,e,r){super(),this.type=n.Triangle,this.a=t,this.b=e,this.c=r}intoRaw(){let t=a.ut.intoRaw(this.a),e=a.ut.intoRaw(this.b),r=a.ut.intoRaw(this.c),i=s.X7.triangle(t,e,r);return t.free(),e.free(),r.free(),i}}class y extends h{constructor(t,e,r,i){super(),this.type=n.RoundTriangle,this.a=t,this.b=e,this.c=r,this.borderRadius=i}intoRaw(){let t=a.ut.intoRaw(this.a),e=a.ut.intoRaw(this.b),r=a.ut.intoRaw(this.c),i=s.X7.roundTriangle(t,e,r,this.borderRadius);return t.free(),e.free(),r.free(),i}}class S extends h{constructor(t,e){super(),this.type=n.Polyline,this.vertices=t,this.indices=null!=e?e:new Uint32Array(0)}intoRaw(){return s.X7.polyline(this.vertices,this.indices)}}class v extends h{constructor(t,e){super(),this.type=n.TriMesh,this.vertices=t,this.indices=e}intoRaw(){return s.X7.trimesh(this.vertices,this.indices)}}class R extends h{constructor(t,e){super(),this.type=n.ConvexPolygon,this.vertices=t,this.skipConvexHullComputation=!!e}intoRaw(){return this.skipConvexHullComputation?s.X7.convexPolyline(this.vertices):s.X7.convexHull(this.vertices)}}class C extends h{constructor(t,e,r){super(),this.type=n.RoundConvexPolygon,this.vertices=t,this.borderRadius=e,this.skipConvexHullComputation=!!r}intoRaw(){return this.skipConvexHullComputation?s.X7.roundConvexPolyline(this.vertices,this.borderRadius):s.X7.roundConvexHull(this.vertices,this.borderRadius)}}class I extends h{constructor(t,e){super(),this.type=n.HeightField,this.heights=t,this.scale=e}intoRaw(){let t=a.ut.intoRaw(this.scale),e=s.X7.heightfield(this.heights,t);return t.free(),e}}i()}catch(t){i(t)}}))},1018:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{G:()=>s,m:()=>o});var n=r(594),a=t([n]);n=(a.then?(await a)():a)[0];class s{constructor(t,e,r,i,n){this.toi=t,this.witness1=e,this.witness2=r,this.normal1=i,this.normal2=n}static fromRaw(t,e){if(!e)return null;const r=new s(e.toi(),n.ut.fromRaw(e.witness1()),n.ut.fromRaw(e.witness2()),n.ut.fromRaw(e.normal1()),n.ut.fromRaw(e.normal2()));return e.free(),r}}class o extends s{constructor(t,e,r,i,n,a){super(e,r,i,n,a),this.collider=t}static fromRaw(t,e){if(!e)return null;const r=new o(t.get(e.colliderHandle()),e.toi(),n.ut.fromRaw(e.witness1()),n.ut.fromRaw(e.witness2()),n.ut.fromRaw(e.normal1()),n.ut.fromRaw(e.normal2()));return e.free(),r}}i()}catch(t){i(t)}}))},594:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{FM:()=>s,T3:()=>_,ut:()=>o});var n=r(8912),a=t([n]);n=(a.then?(await a)():a)[0];class s{constructor(t,e){this.x=t,this.y=e}}class o{static new(t,e){return new s(t,e)}static zeros(){return o.new(0,0)}static fromRaw(t){if(!t)return null;let e=o.new(t.x,t.y);return t.free(),e}static intoRaw(t){return new n.WF(t.x,t.y)}static copy(t,e){t.x=e.x,t.y=e.y}}class _{static identity(){return 0}static fromRaw(t){if(!t)return null;let e=t.angle;return t.free(),e}static intoRaw(t){return n.$Z.fromAngle(t)}}i()}catch(t){i(t)}}))},3350:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{k:()=>o,t:()=>s});var n=r(8912),a=t([n]);n=(a.then?(await a)():a)[0];class s{constructor(t,e){this.vertices=t,this.colors=e}}class o{constructor(t){this.raw=t||new n.wb}free(){this.raw&&this.raw.free(),this.raw=void 0,this.vertices=void 0,this.colors=void 0}render(t,e,r,i,n){this.raw.render(t.raw,e.raw,r.raw,i.raw,n.raw),this.vertices=this.raw.vertices(),this.colors=this.raw.colors()}}i()}catch(t){i(t)}}))},975:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{Md:()=>n,NH:()=>l,qV:()=>_});var n,a=r(8912),s=r(594),o=t([s,a]);[s,a]=o.then?(await o)():o,function(t){t[t.NONE=0]="NONE",t[t.COLLISION_EVENTS=1]="COLLISION_EVENTS",t[t.CONTACT_FORCE_EVENTS=2]="CONTACT_FORCE_EVENTS"}(n||(n={}));class _{free(){this.raw&&this.raw.free(),this.raw=void 0}collider1(){return this.raw.collider1()}collider2(){return this.raw.collider2()}totalForce(){return s.ut.fromRaw(this.raw.total_force())}totalForceMagnitude(){return this.raw.total_force_magnitude()}maxForceDirection(){return s.ut.fromRaw(this.raw.max_force_direction())}maxForceMagnitude(){return this.raw.max_force_magnitude()}}class l{constructor(t,e){this.raw=e||new a.we(t)}free(){this.raw&&this.raw.free(),this.raw=void 0}drainCollisionEvents(t){this.raw.drainCollisionEvents(t)}drainContactForceEvents(t){let e=new _;this.raw.drainContactForceEvents((r=>{e.raw=r,t(e),e.free()}))}clear(){this.raw.clear()}}i()}catch(t){i(t)}}))},1027:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{DJ:()=>a.D,Md:()=>o.Md,NH:()=>o.NH,Nv:()=>_.N,Vq:()=>c.V,_m:()=>c._,iX:()=>_.i,kh:()=>l.k,q3:()=>n.q,qV:()=>o.qV,tt:()=>l.t,y9:()=>s.y});var n=r(1347),a=r(2413),s=r(5521),o=r(975),_=r(9512),l=r(3350),c=r(8974),w=t([n,a,s,o,l,c]);[n,a,s,o,l,c]=w.then?(await w)():w,i()}catch(t){i(t)}}))},9512:(t,e,r)=>{var i,n;r.d(e,{N:()=>n,i:()=>i}),function(t){t[t.NONE=0]="NONE",t[t.FILTER_CONTACT_PAIRS=1]="FILTER_CONTACT_PAIRS",t[t.FILTER_INTERSECTION_PAIRS=2]="FILTER_INTERSECTION_PAIRS"}(i||(i={})),function(t){t[t.EMPTY=0]="EMPTY",t[t.COMPUTE_IMPULSE=1]="COMPUTE_IMPULSE"}(n||(n={}))},2413:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{D:()=>o});var n=r(8912),a=r(594),s=t([n,a]);[n,a]=s.then?(await s)():s;class o{constructor(t){this.raw=t||new n._q}free(){this.raw&&this.raw.free(),this.raw=void 0}step(t,e,r,i,n,s,o,_,l,c,w,h){let d=a.ut.intoRaw(t);w?this.raw.stepWithEvents(d,e.raw,r.raw,i.raw,n.raw,s.raw,o.raw,_.raw,l.raw,c.raw,w.raw,h,h?h.filterContactPair:null,h?h.filterIntersectionPair:null):this.raw.step(d,e.raw,r.raw,i.raw,n.raw,s.raw,o.raw,_.raw,l.raw,c.raw),d.free()}}i()}catch(t){i(t)}}))},8974:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{V:()=>w,_:()=>n});var n,a=r(8912),s=r(3170),o=r(1611),_=r(1018),l=r(594),c=t([a,l,s,o,_]);[a,l,s,o,_]=c.then?(await c)():c,function(t){t[t.EXCLUDE_FIXED=1]="EXCLUDE_FIXED",t[t.EXCLUDE_KINEMATIC=2]="EXCLUDE_KINEMATIC",t[t.EXCLUDE_DYNAMIC=4]="EXCLUDE_DYNAMIC",t[t.EXCLUDE_SENSORS=8]="EXCLUDE_SENSORS",t[t.EXCLUDE_SOLIDS=16]="EXCLUDE_SOLIDS",t[t.ONLY_DYNAMIC=3]="ONLY_DYNAMIC",t[t.ONLY_KINEMATIC=5]="ONLY_KINEMATIC",t[t.ONLY_FIXED=6]="ONLY_FIXED"}(n||(n={}));class w{constructor(t){this.raw=t||new a.nv}free(){this.raw&&this.raw.free(),this.raw=void 0}update(t,e){this.raw.update(t.raw,e.raw)}castRay(t,e,r,i,n,a,o,_,c,w){let h=l.ut.intoRaw(r.origin),d=l.ut.intoRaw(r.dir),p=s.cu.fromRaw(e,this.raw.castRay(t.raw,e.raw,h,d,i,n,a,o,_,c,w));return h.free(),d.free(),p}castRayAndGetNormal(t,e,r,i,n,a,o,_,c,w){let h=l.ut.intoRaw(r.origin),d=l.ut.intoRaw(r.dir),p=s.No.fromRaw(e,this.raw.castRayAndGetNormal(t.raw,e.raw,h,d,i,n,a,o,_,c,w));return h.free(),d.free(),p}intersectionsWithRay(t,e,r,i,n,a,o,_,c,w,h){let d=l.ut.intoRaw(r.origin),p=l.ut.intoRaw(r.dir);this.raw.intersectionsWithRay(t.raw,e.raw,d,p,i,n,(t=>a(s.No.fromRaw(e,t))),o,_,c,w,h),d.free(),p.free()}intersectionWithShape(t,e,r,i,n,a,s,o,_,c){let w=l.ut.intoRaw(r),h=l.T3.intoRaw(i),d=n.intoRaw(),p=this.raw.intersectionWithShape(t.raw,e.raw,w,h,d,a,s,o,_,c);return w.free(),h.free(),d.free(),p}projectPoint(t,e,r,i,n,a,s,_,c){let w=l.ut.intoRaw(r),h=o.V.fromRaw(e,this.raw.projectPoint(t.raw,e.raw,w,i,n,a,s,_,c));return w.free(),h}projectPointAndGetFeature(t,e,r,i,n,a,s,_){let c=l.ut.intoRaw(r),w=o.V.fromRaw(e,this.raw.projectPointAndGetFeature(t.raw,e.raw,c,i,n,a,s,_));return c.free(),w}intersectionsWithPoint(t,e,r,i,n,a,s,o,_){let c=l.ut.intoRaw(r);this.raw.intersectionsWithPoint(t.raw,e.raw,c,i,n,a,s,o,_),c.free()}castShape(t,e,r,i,n,a,s,o,c,w,h,d,p){let u=l.ut.intoRaw(r),b=l.T3.intoRaw(i),g=l.ut.intoRaw(n),m=a.intoRaw(),f=_.m.fromRaw(e,this.raw.castShape(t.raw,e.raw,u,b,g,m,s,o,c,w,h,d,p));return u.free(),b.free(),g.free(),m.free(),f}intersectionsWithShape(t,e,r,i,n,a,s,o,_,c,w){let h=l.ut.intoRaw(r),d=l.T3.intoRaw(i),p=n.intoRaw();this.raw.intersectionsWithShape(t.raw,e.raw,h,d,p,a,s,o,_,c,w),h.free(),d.free(),p.free()}collidersWithAabbIntersectingAabb(t,e,r){let i=l.ut.intoRaw(t),n=l.ut.intoRaw(e);this.raw.collidersWithAabbIntersectingAabb(i,n,r),i.free(),n.free()}}i()}catch(t){i(t)}}))},5521:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{y:()=>_});var n=r(8912),a=r(594),s=r(1347),o=t([n,a,s]);[n,a,s]=o.then?(await o)():o;class _{constructor(t){this.raw=t||new n.w0}free(){this.raw&&this.raw.free(),this.raw=void 0}serializeAll(t,e,r,i,n,s,o,_,l){let c=a.ut.intoRaw(t);const w=this.raw.serializeAll(c,e.raw,r.raw,i.raw,n.raw,s.raw,o.raw,_.raw,l.raw);return c.free(),w}deserializeAll(t){return s.q.fromRaw(this.raw.deserializeAll(t))}}i()}catch(t){i(t)}}))},1347:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{q:()=>y});var n=r(7183),a=r(1465),s=r(8234),o=r(5290),_=r(824),l=r(829),c=r(2179),w=r(1285),h=r(8029),d=r(594),p=r(2413),u=r(8974),b=r(5521),g=r(3350),m=r(3129),f=t([o,_,n,a,l,s,c,w,h,u,p,b,g,d,m]);[o,_,n,a,l,s,c,w,h,u,p,b,g,d,m]=f.then?(await f)():f;class y{constructor(t,e,r,i,d,m,f,y,S,v,R,C,I,T){this.gravity=t,this.integrationParameters=new o.R(e),this.islands=new _.y(r),this.broadPhase=new n.N(i),this.narrowPhase=new a.L(d),this.bodies=new l.r(m),this.colliders=new s.z(f),this.impulseJoints=new c.l(y),this.multibodyJoints=new w.h(S),this.ccdSolver=new h.K(v),this.queryPipeline=new u.V(R),this.physicsPipeline=new p.D(C),this.serializationPipeline=new b.y(I),this.debugRenderPipeline=new g.k(T),this.characterControllers=new Set,this.impulseJoints.finalizeDeserialization(this.bodies),this.bodies.finalizeDeserialization(this.colliders),this.colliders.finalizeDeserialization(this.bodies)}free(){this.integrationParameters.free(),this.islands.free(),this.broadPhase.free(),this.narrowPhase.free(),this.bodies.free(),this.colliders.free(),this.impulseJoints.free(),this.multibodyJoints.free(),this.ccdSolver.free(),this.queryPipeline.free(),this.physicsPipeline.free(),this.serializationPipeline.free(),this.debugRenderPipeline.free(),this.characterControllers.forEach((t=>t.free())),this.integrationParameters=void 0,this.islands=void 0,this.broadPhase=void 0,this.narrowPhase=void 0,this.bodies=void 0,this.colliders=void 0,this.ccdSolver=void 0,this.impulseJoints=void 0,this.multibodyJoints=void 0,this.queryPipeline=void 0,this.physicsPipeline=void 0,this.serializationPipeline=void 0,this.debugRenderPipeline=void 0,this.characterControllers=void 0}static fromRaw(t){return t?new y(d.ut.fromRaw(t.takeGravity()),t.takeIntegrationParameters(),t.takeIslandManager(),t.takeBroadPhase(),t.takeNarrowPhase(),t.takeBodies(),t.takeColliders(),t.takeImpulseJoints(),t.takeMultibodyJoints()):null}takeSnapshot(){return this.serializationPipeline.serializeAll(this.gravity,this.integrationParameters,this.islands,this.broadPhase,this.narrowPhase,this.bodies,this.colliders,this.impulseJoints,this.multibodyJoints)}static restoreSnapshot(t){return(new b.y).deserializeAll(t)}debugRender(){return this.debugRenderPipeline.render(this.bodies,this.colliders,this.impulseJoints,this.multibodyJoints,this.narrowPhase),new g.t(this.debugRenderPipeline.vertices,this.debugRenderPipeline.colors)}step(t,e){this.physicsPipeline.step(this.gravity,this.integrationParameters,this.islands,this.broadPhase,this.narrowPhase,this.bodies,this.colliders,this.impulseJoints,this.multibodyJoints,this.ccdSolver,t,e),this.queryPipeline.update(this.bodies,this.colliders)}propagateModifiedBodyPositionsToColliders(){this.bodies.raw.propagateModifiedBodyPositionsToColliders(this.colliders.raw)}updateSceneQueries(){this.propagateModifiedBodyPositionsToColliders(),this.queryPipeline.update(this.bodies,this.colliders)}get timestep(){return this.integrationParameters.dt}set timestep(t){this.integrationParameters.dt=t}get numSolverIterations(){return this.integrationParameters.numSolverIterations}set numSolverIterations(t){this.integrationParameters.numSolverIterations=t}get numAdditionalFrictionIterations(){return this.integrationParameters.numAdditionalFrictionIterations}set numAdditionalFrictionIterations(t){this.integrationParameters.numAdditionalFrictionIterations=t}get numInternalPgsIterations(){return this.integrationParameters.numInternalPgsIterations}set numInternalPgsIterations(t){this.integrationParameters.numInternalPgsIterations=t}switchToStandardPgsSolver(){this.integrationParameters.switchToStandardPgsSolver()}switchToSmallStepsPgsSolver(){this.integrationParameters.switchToSmallStepsPgsSolver()}createRigidBody(t){return this.bodies.createRigidBody(this.colliders,t)}createCharacterController(t){let e=new m.m(t,this.integrationParameters,this.bodies,this.colliders,this.queryPipeline);return this.characterControllers.add(e),e}removeCharacterController(t){this.characterControllers.delete(t),t.free()}createCollider(t,e){let r=e?e.handle:void 0;return this.colliders.createCollider(this.bodies,t,r)}createImpulseJoint(t,e,r,i){return this.impulseJoints.createJoint(this.bodies,t,e.handle,r.handle,i)}createMultibodyJoint(t,e,r,i){return this.multibodyJoints.createJoint(t,e.handle,r.handle,i)}getRigidBody(t){return this.bodies.get(t)}getCollider(t){return this.colliders.get(t)}getImpulseJoint(t){return this.impulseJoints.get(t)}getMultibodyJoint(t){return this.multibodyJoints.get(t)}removeRigidBody(t){this.bodies&&this.bodies.remove(t.handle,this.islands,this.colliders,this.impulseJoints,this.multibodyJoints)}removeCollider(t,e){this.colliders&&this.colliders.remove(t.handle,this.islands,this.bodies,e)}removeImpulseJoint(t,e){this.impulseJoints&&this.impulseJoints.remove(t.handle,e)}removeMultibodyJoint(t,e){this.impulseJoints&&this.multibodyJoints.remove(t.handle,e)}forEachCollider(t){this.colliders.forEach(t)}forEachRigidBody(t){this.bodies.forEach(t)}forEachActiveRigidBody(t){this.bodies.forEachActiveRigidBody(this.islands,t)}castRay(t,e,r,i,n,a,s,o){return this.queryPipeline.castRay(this.bodies,this.colliders,t,e,r,i,n,a?a.handle:null,s?s.handle:null,this.colliders.castClosure(o))}castRayAndGetNormal(t,e,r,i,n,a,s,o){return this.queryPipeline.castRayAndGetNormal(this.bodies,this.colliders,t,e,r,i,n,a?a.handle:null,s?s.handle:null,this.colliders.castClosure(o))}intersectionsWithRay(t,e,r,i,n,a,s,o,_){this.queryPipeline.intersectionsWithRay(this.bodies,this.colliders,t,e,r,i,n,a,s?s.handle:null,o?o.handle:null,this.colliders.castClosure(_))}intersectionWithShape(t,e,r,i,n,a,s,o){let _=this.queryPipeline.intersectionWithShape(this.bodies,this.colliders,t,e,r,i,n,a?a.handle:null,s?s.handle:null,this.colliders.castClosure(o));return null!=_?this.colliders.get(_):null}projectPoint(t,e,r,i,n,a,s){return this.queryPipeline.projectPoint(this.bodies,this.colliders,t,e,r,i,n?n.handle:null,a?a.handle:null,this.colliders.castClosure(s))}projectPointAndGetFeature(t,e,r,i,n,a){return this.queryPipeline.projectPointAndGetFeature(this.bodies,this.colliders,t,e,r,i?i.handle:null,n?n.handle:null,this.colliders.castClosure(a))}intersectionsWithPoint(t,e,r,i,n,a,s){this.queryPipeline.intersectionsWithPoint(this.bodies,this.colliders,t,this.colliders.castClosure(e),r,i,n?n.handle:null,a?a.handle:null,this.colliders.castClosure(s))}castShape(t,e,r,i,n,a,s,o,_,l,c){return this.queryPipeline.castShape(this.bodies,this.colliders,t,e,r,i,n,a,s,o,_?_.handle:null,l?l.handle:null,this.colliders.castClosure(c))}intersectionsWithShape(t,e,r,i,n,a,s,o,_){this.queryPipeline.intersectionsWithShape(this.bodies,this.colliders,t,e,r,this.colliders.castClosure(i),n,a,s?s.handle:null,o?o.handle:null,this.colliders.castClosure(_))}collidersWithAabbIntersectingAabb(t,e,r){this.queryPipeline.collidersWithAabbIntersectingAabb(t,e,this.colliders.castClosure(r))}contactPairsWith(t,e){this.narrowPhase.contactPairsWith(t.handle,this.colliders.castClosure(e))}intersectionPairsWith(t,e){this.narrowPhase.intersectionPairsWith(t.handle,this.colliders.castClosure(e))}contactPair(t,e,r){this.narrowPhase.contactPair(t.handle,e.handle,r)}intersectionPair(t,e){return this.narrowPhase.intersectionPair(t.handle,e.handle)}}i()}catch(t){i(t)}}))},7894:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.r(e),r.d(e,{ActiveCollisionTypes:()=>n.ActiveCollisionTypes,ActiveEvents:()=>n.ActiveEvents,ActiveHooks:()=>n.ActiveHooks,Ball:()=>n.Ball,BroadPhase:()=>n.BroadPhase,CCDSolver:()=>n.CCDSolver,Capsule:()=>n.Capsule,CharacterCollision:()=>n.CharacterCollision,CoefficientCombineRule:()=>n.CoefficientCombineRule,Collider:()=>n.Collider,ColliderDesc:()=>n.ColliderDesc,ColliderSet:()=>n.ColliderSet,ConvexPolygon:()=>n.ConvexPolygon,Cuboid:()=>n.Cuboid,DebugRenderBuffers:()=>n.DebugRenderBuffers,DebugRenderPipeline:()=>n.DebugRenderPipeline,EventQueue:()=>n.EventQueue,FeatureType:()=>n.FeatureType,FixedImpulseJoint:()=>n.FixedImpulseJoint,FixedMultibodyJoint:()=>n.FixedMultibodyJoint,HalfSpace:()=>n.HalfSpace,Heightfield:()=>n.Heightfield,ImpulseJoint:()=>n.ImpulseJoint,ImpulseJointSet:()=>n.ImpulseJointSet,IntegrationParameters:()=>n.IntegrationParameters,IslandManager:()=>n.IslandManager,JointAxesMask:()=>n.JointAxesMask,JointData:()=>n.JointData,JointType:()=>n.JointType,KinematicCharacterController:()=>n.KinematicCharacterController,MassPropsMode:()=>n.MassPropsMode,MotorModel:()=>n.MotorModel,MultibodyJoint:()=>n.MultibodyJoint,MultibodyJointSet:()=>n.MultibodyJointSet,NarrowPhase:()=>n.NarrowPhase,PhysicsPipeline:()=>n.PhysicsPipeline,PointColliderProjection:()=>n.PointColliderProjection,PointProjection:()=>n.PointProjection,Polyline:()=>n.Polyline,PrismaticImpulseJoint:()=>n.PrismaticImpulseJoint,PrismaticMultibodyJoint:()=>n.PrismaticMultibodyJoint,QueryFilterFlags:()=>n.QueryFilterFlags,QueryPipeline:()=>n.QueryPipeline,Ray:()=>n.Ray,RayColliderIntersection:()=>n.RayColliderIntersection,RayColliderToi:()=>n.RayColliderToi,RayIntersection:()=>n.RayIntersection,RevoluteImpulseJoint:()=>n.RevoluteImpulseJoint,RevoluteMultibodyJoint:()=>n.RevoluteMultibodyJoint,RigidBody:()=>n.RigidBody,RigidBodyDesc:()=>n.RigidBodyDesc,RigidBodySet:()=>n.RigidBodySet,RigidBodyType:()=>n.RigidBodyType,RopeImpulseJoint:()=>n.RopeImpulseJoint,RotationOps:()=>n.RotationOps,RoundConvexPolygon:()=>n.RoundConvexPolygon,RoundCuboid:()=>n.RoundCuboid,RoundTriangle:()=>n.RoundTriangle,Segment:()=>n.Segment,SerializationPipeline:()=>n.SerializationPipeline,Shape:()=>n.Shape,ShapeColliderTOI:()=>n.ShapeColliderTOI,ShapeContact:()=>n.ShapeContact,ShapeTOI:()=>n.ShapeTOI,ShapeType:()=>n.ShapeType,SolverFlags:()=>n.SolverFlags,SpringImpulseJoint:()=>n.SpringImpulseJoint,TempContactForceEvent:()=>n.TempContactForceEvent,TempContactManifold:()=>n.TempContactManifold,TriMesh:()=>n.TriMesh,Triangle:()=>n.Triangle,UnitImpulseJoint:()=>n.UnitImpulseJoint,UnitMultibodyJoint:()=>n.UnitMultibodyJoint,Vector2:()=>n.Vector2,VectorOps:()=>n.VectorOps,World:()=>n.World,default:()=>s,version:()=>n.version});var n=r(8811),a=t([n]);const s=n=(a.then?(await a)():a)[0];i()}catch(t){i(t)}}))},8912:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{$Z:()=>a.$Z,FU:()=>a.FU,IB:()=>a.IB,IQ:()=>a.IQ,Is:()=>a.Is,JM:()=>a.JM,LE:()=>a.LE,Qc:()=>a.Qc,WF:()=>a.WF,Wx:()=>a.Wx,X7:()=>a.X7,_q:()=>a._q,cQ:()=>a.cQ,fY:()=>a.fY,fl:()=>a.fl,i8:()=>a.i8,nv:()=>a.nv,uU:()=>a.uU,vg:()=>a.vg,w0:()=>a.w0,wb:()=>a.wb,we:()=>a.we,yk:()=>a.yk,zu:()=>a.zu});var n=r(1579),a=r(4141),s=t([n]);n=(s.then?(await s)():s)[0],(0,a.oT)(n),i()}catch(t){i(t)}}))},4141:(t,e,r)=>{let i;function n(t){i=t}r.d(e,{$B:()=>mt,$Z:()=>at,FU:()=>D,H6:()=>Tt,HT:()=>dt,IB:()=>x,IQ:()=>B,Is:()=>V,JM:()=>F,Ky:()=>At,L6:()=>Mt,LE:()=>k,M1:()=>ut,Ne:()=>gt,Nl:()=>ft,Or:()=>xt,PN:()=>yt,Qc:()=>X,Qk:()=>Pt,Tt:()=>St,WF:()=>wt,Wx:()=>H,X7:()=>ot,Zc:()=>jt,Zf:()=>Rt,_q:()=>Q,cQ:()=>W,e_:()=>Et,fY:()=>nt,fl:()=>K,fr:()=>Ct,i8:()=>m,nv:()=>tt,o$:()=>bt,oH:()=>Ft,oT:()=>n,p7:()=>vt,pT:()=>ht,rU:()=>It,uU:()=>Y,ug:()=>pt,vg:()=>U,w0:()=>st,wb:()=>L,we:()=>O,yk:()=>j,zu:()=>q}),t=r.hmd(t);const a=new Array(128).fill(void 0);a.push(void 0,null,!0,!1);let s=a.length;function o(t){s===a.length&&a.push(a.length+1);const e=s;return s=a[e],a[e]=t,e}function _(t){return a[t]}function l(t){const e=_(t);return function(t){t<132||(a[t]=s,s=t)}(t),e}function c(t){return null==t}let w=null;function h(){return null!==w&&0!==w.byteLength||(w=new Float64Array(i.memory.buffer)),w}let d=null;function p(){return null!==d&&0!==d.byteLength||(d=new Int32Array(i.memory.buffer)),d}let u=new("undefined"==typeof TextDecoder?(0,t.require)("util").TextDecoder:TextDecoder)("utf-8",{ignoreBOM:!0,fatal:!0});u.decode();let b=null;function g(t,e){return t>>>=0,u.decode((null!==b&&0!==b.byteLength||(b=new Uint8Array(i.memory.buffer)),b).subarray(t,t+e))}function m(){let t,e;try{const a=i.__wbindgen_add_to_stack_pointer(-16);i.version(a);var r=p()[a/4+0],n=p()[a/4+1];return t=r,e=n,g(r,n)}finally{i.__wbindgen_add_to_stack_pointer(16),i.__wbindgen_free(t,e,1)}}function f(t,e){if(!(t instanceof e))throw new Error(`expected instance of ${e.name}`);return t.ptr}let y=null;function S(){return null!==y&&0!==y.byteLength||(y=new Float32Array(i.memory.buffer)),y}let v=128;function R(t){if(1==v)throw new Error("out of js stack");return a[--v]=t,v}function C(t,e){return t>>>=0,S().subarray(t/4,t/4+e)}let I=null;function T(){return null!==I&&0!==I.byteLength||(I=new Uint32Array(i.memory.buffer)),I}let A=0;function P(t,e){const r=e(4*t.length,4)>>>0;return S().set(t,r/4),A=t.length,r}function E(t,e){const r=e(4*t.length,4)>>>0;return T().set(t,r/4),A=t.length,r}function M(t,e){try{return t.apply(this,e)}catch(t){i.__wbindgen_exn_store(o(t))}}Object.freeze({Vertex:0,0:"Vertex",Face:1,1:"Face",Unknown:2,2:"Unknown"}),Object.freeze({Dynamic:0,0:"Dynamic",Fixed:1,1:"Fixed",KinematicPositionBased:2,2:"KinematicPositionBased",KinematicVelocityBased:3,3:"KinematicVelocityBased"});const j=Object.freeze({Revolute:0,0:"Revolute",Fixed:1,1:"Fixed",Prismatic:2,2:"Prismatic",Rope:3,3:"Rope",Spring:4,4:"Spring",Generic:5,5:"Generic"}),x=Object.freeze({Ball:0,0:"Ball",Cuboid:1,1:"Cuboid",Capsule:2,2:"Capsule",Segment:3,3:"Segment",Polyline:4,4:"Polyline",Triangle:5,5:"Triangle",TriMesh:6,6:"TriMesh",HeightField:7,7:"HeightField",Compound:8,8:"Compound",ConvexPolygon:9,9:"ConvexPolygon",RoundCuboid:10,10:"RoundCuboid",RoundTriangle:11,11:"RoundTriangle",RoundConvexPolygon:12,12:"RoundConvexPolygon",HalfSpace:13,13:"HalfSpace"}),F=(Object.freeze({AccelerationBased:0,0:"AccelerationBased",ForceBased:1,1:"ForceBased"}),Object.freeze({X:0,0:"X",Y:1,1:"Y",AngX:2,2:"AngX"}));class D{static __wrap(t){t>>>=0;const e=Object.create(D.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawbroadphase_free(t)}constructor(){const t=i.rawbroadphase_new();return this.__wbg_ptr=t>>>0,this}}class k{__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawccdsolver_free(t)}constructor(){const t=i.rawccdsolver_new();return this.__wbg_ptr=t>>>0,this}}class H{__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawcharactercollision_free(t)}constructor(){const t=i.rawcharactercollision_new();return this.__wbg_ptr=t>>>0,this}handle(){return i.rawcharactercollision_handle(this.__wbg_ptr)}translationDeltaApplied(){const t=i.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);return wt.__wrap(t)}translationDeltaRemaining(){const t=i.rawcharactercollision_translationDeltaRemaining(this.__wbg_ptr);return wt.__wrap(t)}toi(){return i.rawcharactercollision_toi(this.__wbg_ptr)}worldWitness1(){const t=i.rawcharactercollision_worldWitness1(this.__wbg_ptr);return wt.__wrap(t)}worldWitness2(){const t=i.rawcharactercollision_worldWitness2(this.__wbg_ptr);return wt.__wrap(t)}worldNormal1(){const t=i.rawcharactercollision_worldNormal1(this.__wbg_ptr);return wt.__wrap(t)}worldNormal2(){const t=i.rawcharactercollision_worldNormal2(this.__wbg_ptr);return wt.__wrap(t)}}class B{static __wrap(t){t>>>=0;const e=Object.create(B.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawcolliderset_free(t)}coTranslation(t){const e=i.rawcolliderset_coTranslation(this.__wbg_ptr,t);return wt.__wrap(e)}coRotation(t){const e=i.rawcolliderset_coRotation(this.__wbg_ptr,t);return at.__wrap(e)}coSetTranslation(t,e,r){i.rawcolliderset_coSetTranslation(this.__wbg_ptr,t,e,r)}coSetTranslationWrtParent(t,e,r){i.rawcolliderset_coSetTranslationWrtParent(this.__wbg_ptr,t,e,r)}coSetRotation(t,e){i.rawcolliderset_coSetRotation(this.__wbg_ptr,t,e)}coSetRotationWrtParent(t,e){i.rawcolliderset_coSetRotationWrtParent(this.__wbg_ptr,t,e)}coIsSensor(t){return 0!==i.rawcolliderset_coIsSensor(this.__wbg_ptr,t)}coShapeType(t){return i.rawcolliderset_coShapeType(this.__wbg_ptr,t)}coHalfspaceNormal(t){const e=i.rawcolliderset_coHalfspaceNormal(this.__wbg_ptr,t);return 0===e?void 0:wt.__wrap(e)}coHalfExtents(t){const e=i.rawcolliderset_coHalfExtents(this.__wbg_ptr,t);return 0===e?void 0:wt.__wrap(e)}coSetHalfExtents(t,e){f(e,wt),i.rawcolliderset_coSetHalfExtents(this.__wbg_ptr,t,e.__wbg_ptr)}coRadius(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawcolliderset_coRadius(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=S()[n/4+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}coSetRadius(t,e){i.rawcolliderset_coSetRadius(this.__wbg_ptr,t,e)}coHalfHeight(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawcolliderset_coHalfHeight(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=S()[n/4+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}coSetHalfHeight(t,e){i.rawcolliderset_coSetHalfHeight(this.__wbg_ptr,t,e)}coRoundRadius(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawcolliderset_coRoundRadius(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=S()[n/4+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}coSetRoundRadius(t,e){i.rawcolliderset_coSetRoundRadius(this.__wbg_ptr,t,e)}coVertices(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawcolliderset_coVertices(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=p()[n/4+1];let a;return 0!==e&&(a=C(e,r).slice(),i.__wbindgen_free(e,4*r,4)),a}finally{i.__wbindgen_add_to_stack_pointer(16)}}coIndices(t){try{const s=i.__wbindgen_add_to_stack_pointer(-16);i.rawcolliderset_coIndices(s,this.__wbg_ptr,t);var e=p()[s/4+0],r=p()[s/4+1];let o;return 0!==e&&(o=(n=e,a=r,n>>>=0,T().subarray(n/4,n/4+a)).slice(),i.__wbindgen_free(e,4*r,4)),o}finally{i.__wbindgen_add_to_stack_pointer(16)}var n,a}coHeightfieldHeights(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawcolliderset_coHeightfieldHeights(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=p()[n/4+1];let a;return 0!==e&&(a=C(e,r).slice(),i.__wbindgen_free(e,4*r,4)),a}finally{i.__wbindgen_add_to_stack_pointer(16)}}coHeightfieldScale(t){const e=i.rawcolliderset_coHeightfieldScale(this.__wbg_ptr,t);return 0===e?void 0:wt.__wrap(e)}coParent(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawcolliderset_coParent(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=h()[n/8+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}coSetEnabled(t,e){i.rawcolliderset_coSetEnabled(this.__wbg_ptr,t,e)}coIsEnabled(t){return 0!==i.rawcolliderset_coIsEnabled(this.__wbg_ptr,t)}coFriction(t){return i.rawcolliderset_coFriction(this.__wbg_ptr,t)}coRestitution(t){return i.rawcolliderset_coRestitution(this.__wbg_ptr,t)}coDensity(t){return i.rawcolliderset_coDensity(this.__wbg_ptr,t)}coMass(t){return i.rawcolliderset_coMass(this.__wbg_ptr,t)}coVolume(t){return i.rawcolliderset_coVolume(this.__wbg_ptr,t)}coCollisionGroups(t){return i.rawcolliderset_coCollisionGroups(this.__wbg_ptr,t)>>>0}coSolverGroups(t){return i.rawcolliderset_coSolverGroups(this.__wbg_ptr,t)>>>0}coActiveHooks(t){return i.rawcolliderset_coActiveHooks(this.__wbg_ptr,t)>>>0}coActiveCollisionTypes(t){return i.rawcolliderset_coActiveCollisionTypes(this.__wbg_ptr,t)}coActiveEvents(t){return i.rawcolliderset_coActiveEvents(this.__wbg_ptr,t)>>>0}coContactForceEventThreshold(t){return i.rawcolliderset_coContactForceEventThreshold(this.__wbg_ptr,t)}coContainsPoint(t,e){return f(e,wt),0!==i.rawcolliderset_coContainsPoint(this.__wbg_ptr,t,e.__wbg_ptr)}coCastShape(t,e,r,n,a,s,o,_){f(e,wt),f(r,ot),f(n,wt),f(a,at),f(s,wt);const l=i.rawcolliderset_coCastShape(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,a.__wbg_ptr,s.__wbg_ptr,o,_);return 0===l?void 0:ct.__wrap(l)}coCastCollider(t,e,r,n,a,s){f(e,wt),f(n,wt);const o=i.rawcolliderset_coCastCollider(this.__wbg_ptr,t,e.__wbg_ptr,r,n.__wbg_ptr,a,s);return 0===o?void 0:_t.__wrap(o)}coIntersectsShape(t,e,r,n){return f(e,ot),f(r,wt),f(n,at),0!==i.rawcolliderset_coIntersectsShape(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr)}coContactShape(t,e,r,n,a){f(e,ot),f(r,wt),f(n,at);const s=i.rawcolliderset_coContactShape(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,a);return 0===s?void 0:lt.__wrap(s)}coContactCollider(t,e,r){const n=i.rawcolliderset_coContactCollider(this.__wbg_ptr,t,e,r);return 0===n?void 0:lt.__wrap(n)}coProjectPoint(t,e,r){f(e,wt);const n=i.rawcolliderset_coProjectPoint(this.__wbg_ptr,t,e.__wbg_ptr,r);return $.__wrap(n)}coIntersectsRay(t,e,r,n){return f(e,wt),f(r,wt),0!==i.rawcolliderset_coIntersectsRay(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n)}coCastRay(t,e,r,n,a){return f(e,wt),f(r,wt),i.rawcolliderset_coCastRay(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n,a)}coCastRayAndGetNormal(t,e,r,n,a){f(e,wt),f(r,wt);const s=i.rawcolliderset_coCastRayAndGetNormal(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n,a);return 0===s?void 0:it.__wrap(s)}coSetSensor(t,e){i.rawcolliderset_coSetSensor(this.__wbg_ptr,t,e)}coSetRestitution(t,e){i.rawcolliderset_coSetRestitution(this.__wbg_ptr,t,e)}coSetFriction(t,e){i.rawcolliderset_coSetFriction(this.__wbg_ptr,t,e)}coFrictionCombineRule(t){return i.rawcolliderset_coFrictionCombineRule(this.__wbg_ptr,t)>>>0}coSetFrictionCombineRule(t,e){i.rawcolliderset_coSetFrictionCombineRule(this.__wbg_ptr,t,e)}coRestitutionCombineRule(t){return i.rawcolliderset_coRestitutionCombineRule(this.__wbg_ptr,t)>>>0}coSetRestitutionCombineRule(t,e){i.rawcolliderset_coSetRestitutionCombineRule(this.__wbg_ptr,t,e)}coSetCollisionGroups(t,e){i.rawcolliderset_coSetCollisionGroups(this.__wbg_ptr,t,e)}coSetSolverGroups(t,e){i.rawcolliderset_coSetSolverGroups(this.__wbg_ptr,t,e)}coSetActiveHooks(t,e){i.rawcolliderset_coSetActiveHooks(this.__wbg_ptr,t,e)}coSetActiveEvents(t,e){i.rawcolliderset_coSetActiveEvents(this.__wbg_ptr,t,e)}coSetActiveCollisionTypes(t,e){i.rawcolliderset_coSetActiveCollisionTypes(this.__wbg_ptr,t,e)}coSetShape(t,e){f(e,ot),i.rawcolliderset_coSetShape(this.__wbg_ptr,t,e.__wbg_ptr)}coSetContactForceEventThreshold(t,e){i.rawcolliderset_coSetContactForceEventThreshold(this.__wbg_ptr,t,e)}coSetDensity(t,e){i.rawcolliderset_coSetDensity(this.__wbg_ptr,t,e)}coSetMass(t,e){i.rawcolliderset_coSetMass(this.__wbg_ptr,t,e)}coSetMassProperties(t,e,r,n){f(r,wt),i.rawcolliderset_coSetMassProperties(this.__wbg_ptr,t,e,r.__wbg_ptr,n)}constructor(){const t=i.rawcolliderset_new();return this.__wbg_ptr=t>>>0,this}len(){return i.rawcolliderset_len(this.__wbg_ptr)>>>0}contains(t){return 0!==i.rawcolliderset_contains(this.__wbg_ptr,t)}createCollider(t,e,r,n,a,s,o,_,l,c,w,d,u,b,g,m,y,S,v,R,C,I,T){try{const E=i.__wbindgen_add_to_stack_pointer(-16);f(e,ot),f(r,wt),f(n,at),f(o,wt),f(T,nt),i.rawcolliderset_createCollider(E,this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,a,s,o.__wbg_ptr,_,l,c,w,d,u,b,g,m,y,S,v,R,C,I,T.__wbg_ptr);var A=p()[E/4+0],P=h()[E/8+1];return 0===A?void 0:P}finally{i.__wbindgen_add_to_stack_pointer(16)}}remove(t,e,r,n){f(e,V),f(r,nt),i.rawcolliderset_remove(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n)}isHandleValid(t){return 0!==i.rawcolliderset_contains(this.__wbg_ptr,t)}forEachColliderHandle(t){try{i.rawcolliderset_forEachColliderHandle(this.__wbg_ptr,R(t))}finally{a[v++]=void 0}}}class J{static __wrap(t){t>>>=0;const e=Object.create(J.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawcontactforceevent_free(t)}collider1(){return i.rawcontactforceevent_collider1(this.__wbg_ptr)}collider2(){return i.rawcontactforceevent_collider2(this.__wbg_ptr)}total_force(){const t=i.rawcontactforceevent_total_force(this.__wbg_ptr);return wt.__wrap(t)}total_force_magnitude(){return i.rawcontactforceevent_total_force_magnitude(this.__wbg_ptr)}max_force_direction(){const t=i.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);return wt.__wrap(t)}max_force_magnitude(){return i.rawcontactforceevent_max_force_magnitude(this.__wbg_ptr)}}class N{static __wrap(t){t>>>=0;const e=Object.create(N.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawcontactmanifold_free(t)}normal(){const t=i.rawcontactmanifold_normal(this.__wbg_ptr);return wt.__wrap(t)}local_n1(){const t=i.rawcontactmanifold_local_n1(this.__wbg_ptr);return wt.__wrap(t)}local_n2(){const t=i.rawcontactmanifold_local_n2(this.__wbg_ptr);return wt.__wrap(t)}subshape1(){return i.rawcontactmanifold_subshape1(this.__wbg_ptr)>>>0}subshape2(){return i.rawcontactmanifold_subshape2(this.__wbg_ptr)>>>0}num_contacts(){return i.rawcontactmanifold_num_contacts(this.__wbg_ptr)>>>0}contact_local_p1(t){const e=i.rawcontactmanifold_contact_local_p1(this.__wbg_ptr,t);return 0===e?void 0:wt.__wrap(e)}contact_local_p2(t){const e=i.rawcontactmanifold_contact_local_p2(this.__wbg_ptr,t);return 0===e?void 0:wt.__wrap(e)}contact_dist(t){return i.rawcontactmanifold_contact_dist(this.__wbg_ptr,t)}contact_fid1(t){return i.rawcontactmanifold_contact_fid1(this.__wbg_ptr,t)>>>0}contact_fid2(t){return i.rawcontactmanifold_contact_fid2(this.__wbg_ptr,t)>>>0}contact_impulse(t){return i.rawcontactmanifold_contact_impulse(this.__wbg_ptr,t)}contact_tangent_impulse(t){return i.rawcontactmanifold_contact_tangent_impulse(this.__wbg_ptr,t)}num_solver_contacts(){return i.rawcontactmanifold_num_solver_contacts(this.__wbg_ptr)>>>0}solver_contact_point(t){const e=i.rawcontactmanifold_solver_contact_point(this.__wbg_ptr,t);return 0===e?void 0:wt.__wrap(e)}solver_contact_dist(t){return i.rawcontactmanifold_solver_contact_dist(this.__wbg_ptr,t)}solver_contact_friction(t){return i.rawcontactmanifold_solver_contact_friction(this.__wbg_ptr,t)}solver_contact_restitution(t){return i.rawcontactmanifold_solver_contact_restitution(this.__wbg_ptr,t)}solver_contact_tangent_velocity(t){const e=i.rawcontactmanifold_solver_contact_tangent_velocity(this.__wbg_ptr,t);return wt.__wrap(e)}}class z{static __wrap(t){t>>>=0;const e=Object.create(z.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawcontactpair_free(t)}collider1(){return i.rawcontactpair_collider1(this.__wbg_ptr)}collider2(){return i.rawcontactpair_collider2(this.__wbg_ptr)}numContactManifolds(){return i.rawcontactpair_numContactManifolds(this.__wbg_ptr)>>>0}contactManifold(t){const e=i.rawcontactpair_contactManifold(this.__wbg_ptr,t);return 0===e?void 0:N.__wrap(e)}}class L{__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawdebugrenderpipeline_free(t)}constructor(){const t=i.rawdebugrenderpipeline_new();return this.__wbg_ptr=t>>>0,this}vertices(){return l(i.rawdebugrenderpipeline_vertices(this.__wbg_ptr))}colors(){return l(i.rawdebugrenderpipeline_colors(this.__wbg_ptr))}render(t,e,r,n,a){f(t,nt),f(e,B),f(r,X),f(n,K),f(a,Y),i.rawdebugrenderpipeline_render(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,a.__wbg_ptr)}}class G{static __wrap(t){t>>>=0;const e=Object.create(G.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawdeserializedworld_free(t)}takeGravity(){const t=i.rawdeserializedworld_takeGravity(this.__wbg_ptr);return 0===t?void 0:wt.__wrap(t)}takeIntegrationParameters(){const t=i.rawdeserializedworld_takeIntegrationParameters(this.__wbg_ptr);return 0===t?void 0:q.__wrap(t)}takeIslandManager(){const t=i.rawdeserializedworld_takeIslandManager(this.__wbg_ptr);return 0===t?void 0:V.__wrap(t)}takeBroadPhase(){const t=i.rawdeserializedworld_takeBroadPhase(this.__wbg_ptr);return 0===t?void 0:D.__wrap(t)}takeNarrowPhase(){const t=i.rawdeserializedworld_takeNarrowPhase(this.__wbg_ptr);return 0===t?void 0:Y.__wrap(t)}takeBodies(){const t=i.rawdeserializedworld_takeBodies(this.__wbg_ptr);return 0===t?void 0:nt.__wrap(t)}takeColliders(){const t=i.rawdeserializedworld_takeColliders(this.__wbg_ptr);return 0===t?void 0:B.__wrap(t)}takeImpulseJoints(){const t=i.rawdeserializedworld_takeImpulseJoints(this.__wbg_ptr);return 0===t?void 0:X.__wrap(t)}takeMultibodyJoints(){const t=i.rawdeserializedworld_takeMultibodyJoints(this.__wbg_ptr);return 0===t?void 0:K.__wrap(t)}}class O{__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_raweventqueue_free(t)}constructor(t){const e=i.raweventqueue_new(t);return this.__wbg_ptr=e>>>0,this}drainCollisionEvents(t){try{i.raweventqueue_drainCollisionEvents(this.__wbg_ptr,R(t))}finally{a[v++]=void 0}}drainContactForceEvents(t){try{i.raweventqueue_drainContactForceEvents(this.__wbg_ptr,R(t))}finally{a[v++]=void 0}}clear(){i.raweventqueue_clear(this.__wbg_ptr)}}class W{static __wrap(t){t>>>=0;const e=Object.create(W.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawgenericjoint_free(t)}static spring(t,e,r,n,a){f(n,wt),f(a,wt);const s=i.rawgenericjoint_spring(t,e,r,n.__wbg_ptr,a.__wbg_ptr);return W.__wrap(s)}static rope(t,e,r){f(e,wt),f(r,wt);const n=i.rawgenericjoint_rope(t,e.__wbg_ptr,r.__wbg_ptr);return W.__wrap(n)}static prismatic(t,e,r,n,a,s){f(t,wt),f(e,wt),f(r,wt);const o=i.rawgenericjoint_prismatic(t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n,a,s);return 0===o?void 0:W.__wrap(o)}static fixed(t,e,r,n){f(t,wt),f(e,at),f(r,wt),f(n,at);const a=i.rawgenericjoint_fixed(t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr);return W.__wrap(a)}static revolute(t,e){f(t,wt),f(e,wt);const r=i.rawgenericjoint_revolute(t.__wbg_ptr,e.__wbg_ptr);return 0===r?void 0:W.__wrap(r)}}class X{static __wrap(t){t>>>=0;const e=Object.create(X.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawimpulsejointset_free(t)}jointType(t){return i.rawimpulsejointset_jointType(this.__wbg_ptr,t)}jointBodyHandle1(t){return i.rawimpulsejointset_jointBodyHandle1(this.__wbg_ptr,t)}jointBodyHandle2(t){return i.rawimpulsejointset_jointBodyHandle2(this.__wbg_ptr,t)}jointFrameX1(t){const e=i.rawimpulsejointset_jointFrameX1(this.__wbg_ptr,t);return at.__wrap(e)}jointFrameX2(t){const e=i.rawimpulsejointset_jointFrameX2(this.__wbg_ptr,t);return at.__wrap(e)}jointAnchor1(t){const e=i.rawimpulsejointset_jointAnchor1(this.__wbg_ptr,t);return wt.__wrap(e)}jointAnchor2(t){const e=i.rawimpulsejointset_jointAnchor2(this.__wbg_ptr,t);return wt.__wrap(e)}jointSetAnchor1(t,e){f(e,wt),i.rawimpulsejointset_jointSetAnchor1(this.__wbg_ptr,t,e.__wbg_ptr)}jointSetAnchor2(t,e){f(e,wt),i.rawimpulsejointset_jointSetAnchor2(this.__wbg_ptr,t,e.__wbg_ptr)}jointContactsEnabled(t){return 0!==i.rawimpulsejointset_jointContactsEnabled(this.__wbg_ptr,t)}jointSetContactsEnabled(t,e){i.rawimpulsejointset_jointSetContactsEnabled(this.__wbg_ptr,t,e)}jointLimitsEnabled(t,e){return 0!==i.rawimpulsejointset_jointLimitsEnabled(this.__wbg_ptr,t,e)}jointLimitsMin(t,e){return i.rawimpulsejointset_jointLimitsMin(this.__wbg_ptr,t,e)}jointLimitsMax(t,e){return i.rawimpulsejointset_jointLimitsMax(this.__wbg_ptr,t,e)}jointSetLimits(t,e,r,n){i.rawimpulsejointset_jointSetLimits(this.__wbg_ptr,t,e,r,n)}jointConfigureMotorModel(t,e,r){i.rawimpulsejointset_jointConfigureMotorModel(this.__wbg_ptr,t,e,r)}jointConfigureMotorVelocity(t,e,r,n){i.rawimpulsejointset_jointConfigureMotorVelocity(this.__wbg_ptr,t,e,r,n)}jointConfigureMotorPosition(t,e,r,n,a){i.rawimpulsejointset_jointConfigureMotorPosition(this.__wbg_ptr,t,e,r,n,a)}jointConfigureMotor(t,e,r,n,a,s){i.rawimpulsejointset_jointConfigureMotor(this.__wbg_ptr,t,e,r,n,a,s)}constructor(){const t=i.rawimpulsejointset_new();return this.__wbg_ptr=t>>>0,this}createJoint(t,e,r,n){return f(t,W),i.rawimpulsejointset_createJoint(this.__wbg_ptr,t.__wbg_ptr,e,r,n)}remove(t,e){i.rawimpulsejointset_remove(this.__wbg_ptr,t,e)}len(){return i.rawimpulsejointset_len(this.__wbg_ptr)>>>0}contains(t){return 0!==i.rawimpulsejointset_contains(this.__wbg_ptr,t)}forEachJointHandle(t){try{i.rawimpulsejointset_forEachJointHandle(this.__wbg_ptr,R(t))}finally{a[v++]=void 0}}forEachJointAttachedToRigidBody(t,e){try{i.rawimpulsejointset_forEachJointAttachedToRigidBody(this.__wbg_ptr,t,R(e))}finally{a[v++]=void 0}}}class q{static __wrap(t){t>>>=0;const e=Object.create(q.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawintegrationparameters_free(t)}constructor(){const t=i.rawintegrationparameters_new();return this.__wbg_ptr=t>>>0,this}get dt(){return i.rawintegrationparameters_dt(this.__wbg_ptr)}get erp(){return i.rawintegrationparameters_erp(this.__wbg_ptr)}get allowedLinearError(){return i.rawintegrationparameters_allowedLinearError(this.__wbg_ptr)}get predictionDistance(){return i.rawcontactforceevent_max_force_magnitude(this.__wbg_ptr)}get numSolverIterations(){return i.rawintegrationparameters_numSolverIterations(this.__wbg_ptr)>>>0}get numAdditionalFrictionIterations(){return i.rawintegrationparameters_numAdditionalFrictionIterations(this.__wbg_ptr)>>>0}get numInternalPgsIterations(){return i.rawintegrationparameters_numInternalPgsIterations(this.__wbg_ptr)>>>0}get minIslandSize(){return i.rawintegrationparameters_minIslandSize(this.__wbg_ptr)>>>0}get maxCcdSubsteps(){return i.rawintegrationparameters_maxCcdSubsteps(this.__wbg_ptr)>>>0}set dt(t){i.rawintegrationparameters_set_dt(this.__wbg_ptr,t)}set erp(t){i.rawintegrationparameters_set_erp(this.__wbg_ptr,t)}set allowedLinearError(t){i.rawintegrationparameters_set_allowedLinearError(this.__wbg_ptr,t)}set predictionDistance(t){i.rawintegrationparameters_set_predictionDistance(this.__wbg_ptr,t)}set numSolverIterations(t){i.rawintegrationparameters_set_numSolverIterations(this.__wbg_ptr,t)}set numAdditionalFrictionIterations(t){i.rawintegrationparameters_set_numAdditionalFrictionIterations(this.__wbg_ptr,t)}set numInternalPgsIterations(t){i.rawintegrationparameters_set_numInternalPgsIterations(this.__wbg_ptr,t)}set minIslandSize(t){i.rawintegrationparameters_set_minIslandSize(this.__wbg_ptr,t)}set maxCcdSubsteps(t){i.rawintegrationparameters_set_maxCcdSubsteps(this.__wbg_ptr,t)}switchToStandardPgsSolver(){i.rawintegrationparameters_switchToStandardPgsSolver(this.__wbg_ptr)}switchToSmallStepsPgsSolver(){i.rawintegrationparameters_switchToSmallStepsPgsSolver(this.__wbg_ptr)}}class V{static __wrap(t){t>>>=0;const e=Object.create(V.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawislandmanager_free(t)}constructor(){const t=i.rawislandmanager_new();return this.__wbg_ptr=t>>>0,this}forEachActiveRigidBodyHandle(t){try{i.rawislandmanager_forEachActiveRigidBodyHandle(this.__wbg_ptr,R(t))}finally{a[v++]=void 0}}}class U{__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawkinematiccharactercontroller_free(t)}constructor(t){const e=i.rawkinematiccharactercontroller_new(t);return this.__wbg_ptr=e>>>0,this}up(){const t=i.rawkinematiccharactercontroller_up(this.__wbg_ptr);return wt.__wrap(t)}setUp(t){f(t,wt),i.rawkinematiccharactercontroller_setUp(this.__wbg_ptr,t.__wbg_ptr)}offset(){return i.rawintegrationparameters_dt(this.__wbg_ptr)}setOffset(t){i.rawkinematiccharactercontroller_setOffset(this.__wbg_ptr,t)}slideEnabled(){return 0!==i.rawkinematiccharactercontroller_slideEnabled(this.__wbg_ptr)}setSlideEnabled(t){i.rawkinematiccharactercontroller_setSlideEnabled(this.__wbg_ptr,t)}autostepMaxHeight(){try{const r=i.__wbindgen_add_to_stack_pointer(-16);i.rawkinematiccharactercontroller_autostepMaxHeight(r,this.__wbg_ptr);var t=p()[r/4+0],e=S()[r/4+1];return 0===t?void 0:e}finally{i.__wbindgen_add_to_stack_pointer(16)}}autostepMinWidth(){try{const r=i.__wbindgen_add_to_stack_pointer(-16);i.rawkinematiccharactercontroller_autostepMinWidth(r,this.__wbg_ptr);var t=p()[r/4+0],e=S()[r/4+1];return 0===t?void 0:e}finally{i.__wbindgen_add_to_stack_pointer(16)}}autostepIncludesDynamicBodies(){const t=i.rawkinematiccharactercontroller_autostepIncludesDynamicBodies(this.__wbg_ptr);return 16777215===t?void 0:0!==t}autostepEnabled(){return 0!==i.rawkinematiccharactercontroller_autostepEnabled(this.__wbg_ptr)}enableAutostep(t,e,r){i.rawkinematiccharactercontroller_enableAutostep(this.__wbg_ptr,t,e,r)}disableAutostep(){i.rawkinematiccharactercontroller_disableAutostep(this.__wbg_ptr)}maxSlopeClimbAngle(){return i.rawkinematiccharactercontroller_maxSlopeClimbAngle(this.__wbg_ptr)}setMaxSlopeClimbAngle(t){i.rawkinematiccharactercontroller_setMaxSlopeClimbAngle(this.__wbg_ptr,t)}minSlopeSlideAngle(){return i.rawkinematiccharactercontroller_minSlopeSlideAngle(this.__wbg_ptr)}setMinSlopeSlideAngle(t){i.rawkinematiccharactercontroller_setMinSlopeSlideAngle(this.__wbg_ptr,t)}snapToGroundDistance(){try{const r=i.__wbindgen_add_to_stack_pointer(-16);i.rawkinematiccharactercontroller_snapToGroundDistance(r,this.__wbg_ptr);var t=p()[r/4+0],e=S()[r/4+1];return 0===t?void 0:e}finally{i.__wbindgen_add_to_stack_pointer(16)}}enableSnapToGround(t){i.rawkinematiccharactercontroller_enableSnapToGround(this.__wbg_ptr,t)}disableSnapToGround(){i.rawkinematiccharactercontroller_disableSnapToGround(this.__wbg_ptr)}snapToGroundEnabled(){return 0!==i.rawkinematiccharactercontroller_snapToGroundEnabled(this.__wbg_ptr)}computeColliderMovement(t,e,r,n,s,o,_,l,w,h,d){try{f(e,nt),f(r,B),f(n,tt),f(o,wt),i.rawkinematiccharactercontroller_computeColliderMovement(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,s,o.__wbg_ptr,_,!c(l),c(l)?0:l,w,!c(h),c(h)?0:h,R(d))}finally{a[v++]=void 0}}computedMovement(){const t=i.rawkinematiccharactercontroller_computedMovement(this.__wbg_ptr);return wt.__wrap(t)}computedGrounded(){return 0!==i.rawkinematiccharactercontroller_computedGrounded(this.__wbg_ptr)}numComputedCollisions(){return i.rawkinematiccharactercontroller_numComputedCollisions(this.__wbg_ptr)>>>0}computedCollision(t,e){return f(e,H),0!==i.rawkinematiccharactercontroller_computedCollision(this.__wbg_ptr,t,e.__wbg_ptr)}}class K{static __wrap(t){t>>>=0;const e=Object.create(K.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawmultibodyjointset_free(t)}jointType(t){return i.rawmultibodyjointset_jointType(this.__wbg_ptr,t)}jointFrameX1(t){const e=i.rawmultibodyjointset_jointFrameX1(this.__wbg_ptr,t);return at.__wrap(e)}jointFrameX2(t){const e=i.rawmultibodyjointset_jointFrameX2(this.__wbg_ptr,t);return at.__wrap(e)}jointAnchor1(t){const e=i.rawmultibodyjointset_jointAnchor1(this.__wbg_ptr,t);return wt.__wrap(e)}jointAnchor2(t){const e=i.rawmultibodyjointset_jointAnchor2(this.__wbg_ptr,t);return wt.__wrap(e)}jointContactsEnabled(t){return 0!==i.rawmultibodyjointset_jointContactsEnabled(this.__wbg_ptr,t)}jointSetContactsEnabled(t,e){i.rawmultibodyjointset_jointSetContactsEnabled(this.__wbg_ptr,t,e)}jointLimitsEnabled(t,e){return 0!==i.rawmultibodyjointset_jointLimitsEnabled(this.__wbg_ptr,t,e)}jointLimitsMin(t,e){return i.rawmultibodyjointset_jointLimitsMin(this.__wbg_ptr,t,e)}jointLimitsMax(t,e){return i.rawmultibodyjointset_jointLimitsMax(this.__wbg_ptr,t,e)}constructor(){const t=i.rawmultibodyjointset_new();return this.__wbg_ptr=t>>>0,this}createJoint(t,e,r,n){return f(t,W),i.rawmultibodyjointset_createJoint(this.__wbg_ptr,t.__wbg_ptr,e,r,n)}remove(t,e){i.rawmultibodyjointset_remove(this.__wbg_ptr,t,e)}contains(t){return 0!==i.rawmultibodyjointset_contains(this.__wbg_ptr,t)}forEachJointHandle(t){try{i.rawmultibodyjointset_forEachJointHandle(this.__wbg_ptr,R(t))}finally{a[v++]=void 0}}forEachJointAttachedToRigidBody(t,e){try{i.rawmultibodyjointset_forEachJointAttachedToRigidBody(this.__wbg_ptr,t,R(e))}finally{a[v++]=void 0}}}class Y{static __wrap(t){t>>>=0;const e=Object.create(Y.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawnarrowphase_free(t)}constructor(){const t=i.rawnarrowphase_new();return this.__wbg_ptr=t>>>0,this}contact_pairs_with(t,e){i.rawnarrowphase_contact_pairs_with(this.__wbg_ptr,t,o(e))}contact_pair(t,e){const r=i.rawnarrowphase_contact_pair(this.__wbg_ptr,t,e);return 0===r?void 0:z.__wrap(r)}intersection_pairs_with(t,e){i.rawnarrowphase_intersection_pairs_with(this.__wbg_ptr,t,o(e))}intersection_pair(t,e){return 0!==i.rawnarrowphase_intersection_pair(this.__wbg_ptr,t,e)}}class Q{__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawphysicspipeline_free(t)}constructor(){const t=i.rawphysicspipeline_new();return this.__wbg_ptr=t>>>0,this}step(t,e,r,n,a,s,o,_,l,c){f(t,wt),f(e,q),f(r,V),f(n,D),f(a,Y),f(s,nt),f(o,B),f(_,X),f(l,K),f(c,k),i.rawphysicspipeline_step(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,a.__wbg_ptr,s.__wbg_ptr,o.__wbg_ptr,_.__wbg_ptr,l.__wbg_ptr,c.__wbg_ptr)}stepWithEvents(t,e,r,n,a,s,_,l,c,w,h,d,p,u){f(t,wt),f(e,q),f(r,V),f(n,D),f(a,Y),f(s,nt),f(_,B),f(l,X),f(c,K),f(w,k),f(h,O),i.rawphysicspipeline_stepWithEvents(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,a.__wbg_ptr,s.__wbg_ptr,_.__wbg_ptr,l.__wbg_ptr,c.__wbg_ptr,w.__wbg_ptr,h.__wbg_ptr,o(d),o(p),o(u))}}class Z{static __wrap(t){t>>>=0;const e=Object.create(Z.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawpointcolliderprojection_free(t)}colliderHandle(){return i.rawpointcolliderprojection_colliderHandle(this.__wbg_ptr)}point(){const t=i.rawpointcolliderprojection_point(this.__wbg_ptr);return wt.__wrap(t)}isInside(){return 0!==i.rawpointcolliderprojection_isInside(this.__wbg_ptr)}featureType(){return i.rawpointcolliderprojection_featureType(this.__wbg_ptr)}featureId(){try{const r=i.__wbindgen_add_to_stack_pointer(-16);i.rawpointcolliderprojection_featureId(r,this.__wbg_ptr);var t=p()[r/4+0],e=p()[r/4+1];return 0===t?void 0:e>>>0}finally{i.__wbindgen_add_to_stack_pointer(16)}}}class ${static __wrap(t){t>>>=0;const e=Object.create($.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawpointprojection_free(t)}point(){const t=i.rawpointprojection_point(this.__wbg_ptr);return wt.__wrap(t)}isInside(){return 0!==i.rawpointprojection_isInside(this.__wbg_ptr)}}class tt{__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawquerypipeline_free(t)}constructor(){const t=i.rawquerypipeline_new();return this.__wbg_ptr=t>>>0,this}update(t,e){f(t,nt),f(e,B),i.rawquerypipeline_update(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr)}castRay(t,e,r,n,s,o,_,l,w,h,d){try{f(t,nt),f(e,B),f(r,wt),f(n,wt);const p=i.rawquerypipeline_castRay(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,s,o,_,!c(l),c(l)?0:l,!c(w),c(w)?0:w,!c(h),c(h)?0:h,R(d));return 0===p?void 0:rt.__wrap(p)}finally{a[v++]=void 0}}castRayAndGetNormal(t,e,r,n,s,o,_,l,w,h,d){try{f(t,nt),f(e,B),f(r,wt),f(n,wt);const p=i.rawquerypipeline_castRayAndGetNormal(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,s,o,_,!c(l),c(l)?0:l,!c(w),c(w)?0:w,!c(h),c(h)?0:h,R(d));return 0===p?void 0:et.__wrap(p)}finally{a[v++]=void 0}}intersectionsWithRay(t,e,r,n,s,o,_,l,w,h,d,p){try{f(t,nt),f(e,B),f(r,wt),f(n,wt),i.rawquerypipeline_intersectionsWithRay(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,s,o,R(_),l,!c(w),c(w)?0:w,!c(h),c(h)?0:h,!c(d),c(d)?0:d,R(p))}finally{a[v++]=void 0,a[v++]=void 0}}intersectionWithShape(t,e,r,n,s,o,_,l,w,d){try{const g=i.__wbindgen_add_to_stack_pointer(-16);f(t,nt),f(e,B),f(r,wt),f(n,at),f(s,ot),i.rawquerypipeline_intersectionWithShape(g,this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,o,!c(_),c(_)?0:_,!c(l),c(l)?0:l,!c(w),c(w)?0:w,R(d));var u=p()[g/4+0],b=h()[g/8+1];return 0===u?void 0:b}finally{i.__wbindgen_add_to_stack_pointer(16),a[v++]=void 0}}projectPoint(t,e,r,n,s,o,_,l,w){try{f(t,nt),f(e,B),f(r,wt);const h=i.rawquerypipeline_projectPoint(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n,s,!c(o),c(o)?0:o,!c(_),c(_)?0:_,!c(l),c(l)?0:l,R(w));return 0===h?void 0:Z.__wrap(h)}finally{a[v++]=void 0}}projectPointAndGetFeature(t,e,r,n,s,o,_,l){try{f(t,nt),f(e,B),f(r,wt);const w=i.rawquerypipeline_projectPointAndGetFeature(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n,!c(s),c(s)?0:s,!c(o),c(o)?0:o,!c(_),c(_)?0:_,R(l));return 0===w?void 0:Z.__wrap(w)}finally{a[v++]=void 0}}intersectionsWithPoint(t,e,r,n,s,o,_,l,w){try{f(t,nt),f(e,B),f(r,wt),i.rawquerypipeline_intersectionsWithPoint(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,R(n),s,!c(o),c(o)?0:o,!c(_),c(_)?0:_,!c(l),c(l)?0:l,R(w))}finally{a[v++]=void 0,a[v++]=void 0}}castShape(t,e,r,n,s,o,_,l,w,h,d,p,u){try{f(t,nt),f(e,B),f(r,wt),f(n,at),f(s,wt),f(o,ot);const b=i.rawquerypipeline_castShape(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,o.__wbg_ptr,_,l,w,!c(h),c(h)?0:h,!c(d),c(d)?0:d,!c(p),c(p)?0:p,R(u));return 0===b?void 0:_t.__wrap(b)}finally{a[v++]=void 0}}intersectionsWithShape(t,e,r,n,s,o,_,l,w,h,d){try{f(t,nt),f(e,B),f(r,wt),f(n,at),f(s,ot),i.rawquerypipeline_intersectionsWithShape(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,R(o),_,!c(l),c(l)?0:l,!c(w),c(w)?0:w,!c(h),c(h)?0:h,R(d))}finally{a[v++]=void 0,a[v++]=void 0}}collidersWithAabbIntersectingAabb(t,e,r){try{f(t,wt),f(e,wt),i.rawquerypipeline_collidersWithAabbIntersectingAabb(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,R(r))}finally{a[v++]=void 0}}}class et{static __wrap(t){t>>>=0;const e=Object.create(et.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawraycolliderintersection_free(t)}colliderHandle(){return i.rawpointcolliderprojection_colliderHandle(this.__wbg_ptr)}normal(){const t=i.rawraycolliderintersection_normal(this.__wbg_ptr);return wt.__wrap(t)}toi(){return i.rawraycolliderintersection_toi(this.__wbg_ptr)}featureType(){return i.rawpointcolliderprojection_featureType(this.__wbg_ptr)}featureId(){try{const r=i.__wbindgen_add_to_stack_pointer(-16);i.rawpointcolliderprojection_featureId(r,this.__wbg_ptr);var t=p()[r/4+0],e=p()[r/4+1];return 0===t?void 0:e>>>0}finally{i.__wbindgen_add_to_stack_pointer(16)}}}class rt{static __wrap(t){t>>>=0;const e=Object.create(rt.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawraycollidertoi_free(t)}colliderHandle(){return i.rawcontactforceevent_collider1(this.__wbg_ptr)}toi(){return i.rawraycolliderintersection_toi(this.__wbg_ptr)}}class it{static __wrap(t){t>>>=0;const e=Object.create(it.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawrayintersection_free(t)}normal(){const t=i.rawraycolliderintersection_normal(this.__wbg_ptr);return wt.__wrap(t)}toi(){return i.rawraycolliderintersection_toi(this.__wbg_ptr)}featureType(){return i.rawpointcolliderprojection_featureType(this.__wbg_ptr)}featureId(){try{const r=i.__wbindgen_add_to_stack_pointer(-16);i.rawpointcolliderprojection_featureId(r,this.__wbg_ptr);var t=p()[r/4+0],e=p()[r/4+1];return 0===t?void 0:e>>>0}finally{i.__wbindgen_add_to_stack_pointer(16)}}}class nt{static __wrap(t){t>>>=0;const e=Object.create(nt.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawrigidbodyset_free(t)}rbTranslation(t){const e=i.rawrigidbodyset_rbTranslation(this.__wbg_ptr,t);return wt.__wrap(e)}rbRotation(t){const e=i.rawrigidbodyset_rbRotation(this.__wbg_ptr,t);return at.__wrap(e)}rbSleep(t){i.rawrigidbodyset_rbSleep(this.__wbg_ptr,t)}rbIsSleeping(t){return 0!==i.rawrigidbodyset_rbIsSleeping(this.__wbg_ptr,t)}rbIsMoving(t){return 0!==i.rawrigidbodyset_rbIsMoving(this.__wbg_ptr,t)}rbNextTranslation(t){const e=i.rawrigidbodyset_rbNextTranslation(this.__wbg_ptr,t);return wt.__wrap(e)}rbNextRotation(t){const e=i.rawrigidbodyset_rbNextRotation(this.__wbg_ptr,t);return at.__wrap(e)}rbSetTranslation(t,e,r,n){i.rawrigidbodyset_rbSetTranslation(this.__wbg_ptr,t,e,r,n)}rbSetRotation(t,e,r){i.rawrigidbodyset_rbSetRotation(this.__wbg_ptr,t,e,r)}rbSetLinvel(t,e,r){f(e,wt),i.rawrigidbodyset_rbSetLinvel(this.__wbg_ptr,t,e.__wbg_ptr,r)}rbSetAngvel(t,e,r){i.rawrigidbodyset_rbSetAngvel(this.__wbg_ptr,t,e,r)}rbSetNextKinematicTranslation(t,e,r){i.rawrigidbodyset_rbSetNextKinematicTranslation(this.__wbg_ptr,t,e,r)}rbSetNextKinematicRotation(t,e){i.rawrigidbodyset_rbSetNextKinematicRotation(this.__wbg_ptr,t,e)}rbRecomputeMassPropertiesFromColliders(t,e){f(e,B),i.rawrigidbodyset_rbRecomputeMassPropertiesFromColliders(this.__wbg_ptr,t,e.__wbg_ptr)}rbSetAdditionalMass(t,e,r){i.rawrigidbodyset_rbSetAdditionalMass(this.__wbg_ptr,t,e,r)}rbSetAdditionalMassProperties(t,e,r,n,a){f(r,wt),i.rawrigidbodyset_rbSetAdditionalMassProperties(this.__wbg_ptr,t,e,r.__wbg_ptr,n,a)}rbLinvel(t){const e=i.rawrigidbodyset_rbLinvel(this.__wbg_ptr,t);return wt.__wrap(e)}rbAngvel(t){return i.rawrigidbodyset_rbAngvel(this.__wbg_ptr,t)}rbLockTranslations(t,e,r){i.rawrigidbodyset_rbLockTranslations(this.__wbg_ptr,t,e,r)}rbSetEnabledTranslations(t,e,r,n){i.rawrigidbodyset_rbSetEnabledTranslations(this.__wbg_ptr,t,e,r,n)}rbLockRotations(t,e,r){i.rawrigidbodyset_rbLockRotations(this.__wbg_ptr,t,e,r)}rbDominanceGroup(t){return i.rawrigidbodyset_rbDominanceGroup(this.__wbg_ptr,t)}rbSetDominanceGroup(t,e){i.rawrigidbodyset_rbSetDominanceGroup(this.__wbg_ptr,t,e)}rbEnableCcd(t,e){i.rawrigidbodyset_rbEnableCcd(this.__wbg_ptr,t,e)}rbMass(t){return i.rawrigidbodyset_rbMass(this.__wbg_ptr,t)}rbInvMass(t){return i.rawrigidbodyset_rbInvMass(this.__wbg_ptr,t)}rbEffectiveInvMass(t){const e=i.rawrigidbodyset_rbEffectiveInvMass(this.__wbg_ptr,t);return wt.__wrap(e)}rbLocalCom(t){const e=i.rawrigidbodyset_rbLocalCom(this.__wbg_ptr,t);return wt.__wrap(e)}rbWorldCom(t){const e=i.rawrigidbodyset_rbWorldCom(this.__wbg_ptr,t);return wt.__wrap(e)}rbInvPrincipalInertiaSqrt(t){return i.rawrigidbodyset_rbInvPrincipalInertiaSqrt(this.__wbg_ptr,t)}rbPrincipalInertia(t){return i.rawrigidbodyset_rbPrincipalInertia(this.__wbg_ptr,t)}rbEffectiveWorldInvInertiaSqrt(t){return i.rawrigidbodyset_rbEffectiveWorldInvInertiaSqrt(this.__wbg_ptr,t)}rbEffectiveAngularInertia(t){return i.rawrigidbodyset_rbEffectiveAngularInertia(this.__wbg_ptr,t)}rbWakeUp(t){i.rawrigidbodyset_rbWakeUp(this.__wbg_ptr,t)}rbIsCcdEnabled(t){return 0!==i.rawrigidbodyset_rbIsCcdEnabled(this.__wbg_ptr,t)}rbNumColliders(t){return i.rawrigidbodyset_rbNumColliders(this.__wbg_ptr,t)>>>0}rbCollider(t,e){return i.rawrigidbodyset_rbCollider(this.__wbg_ptr,t,e)}rbBodyType(t){return i.rawrigidbodyset_rbBodyType(this.__wbg_ptr,t)}rbSetBodyType(t,e,r){i.rawrigidbodyset_rbSetBodyType(this.__wbg_ptr,t,e,r)}rbIsFixed(t){return 0!==i.rawrigidbodyset_rbIsFixed(this.__wbg_ptr,t)}rbIsKinematic(t){return 0!==i.rawrigidbodyset_rbIsKinematic(this.__wbg_ptr,t)}rbIsDynamic(t){return 0!==i.rawrigidbodyset_rbIsDynamic(this.__wbg_ptr,t)}rbLinearDamping(t){return i.rawrigidbodyset_rbLinearDamping(this.__wbg_ptr,t)}rbAngularDamping(t){return i.rawrigidbodyset_rbAngularDamping(this.__wbg_ptr,t)}rbSetLinearDamping(t,e){i.rawrigidbodyset_rbSetLinearDamping(this.__wbg_ptr,t,e)}rbSetAngularDamping(t,e){i.rawrigidbodyset_rbSetAngularDamping(this.__wbg_ptr,t,e)}rbSetEnabled(t,e){i.rawrigidbodyset_rbSetEnabled(this.__wbg_ptr,t,e)}rbIsEnabled(t){return 0!==i.rawrigidbodyset_rbIsEnabled(this.__wbg_ptr,t)}rbGravityScale(t){return i.rawrigidbodyset_rbGravityScale(this.__wbg_ptr,t)}rbSetGravityScale(t,e,r){i.rawrigidbodyset_rbSetGravityScale(this.__wbg_ptr,t,e,r)}rbResetForces(t,e){i.rawrigidbodyset_rbResetForces(this.__wbg_ptr,t,e)}rbResetTorques(t,e){i.rawrigidbodyset_rbResetTorques(this.__wbg_ptr,t,e)}rbAddForce(t,e,r){f(e,wt),i.rawrigidbodyset_rbAddForce(this.__wbg_ptr,t,e.__wbg_ptr,r)}rbApplyImpulse(t,e,r){f(e,wt),i.rawrigidbodyset_rbApplyImpulse(this.__wbg_ptr,t,e.__wbg_ptr,r)}rbAddTorque(t,e,r){i.rawrigidbodyset_rbAddTorque(this.__wbg_ptr,t,e,r)}rbApplyTorqueImpulse(t,e,r){i.rawrigidbodyset_rbApplyTorqueImpulse(this.__wbg_ptr,t,e,r)}rbAddForceAtPoint(t,e,r,n){f(e,wt),f(r,wt),i.rawrigidbodyset_rbAddForceAtPoint(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n)}rbApplyImpulseAtPoint(t,e,r,n){f(e,wt),f(r,wt),i.rawrigidbodyset_rbApplyImpulseAtPoint(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n)}rbAdditionalSolverIterations(t){return i.rawrigidbodyset_rbAdditionalSolverIterations(this.__wbg_ptr,t)>>>0}rbSetAdditionalSolverIterations(t,e){i.rawrigidbodyset_rbSetAdditionalSolverIterations(this.__wbg_ptr,t,e)}rbUserData(t){return i.rawrigidbodyset_rbUserData(this.__wbg_ptr,t)>>>0}rbSetUserData(t,e){i.rawrigidbodyset_rbSetUserData(this.__wbg_ptr,t,e)}constructor(){const t=i.rawrigidbodyset_new();return this.__wbg_ptr=t>>>0,this}createRigidBody(t,e,r,n,a,s,o,_,l,c,w,h,d,p,u,b,g,m,y,S,v){return f(e,wt),f(r,at),f(o,wt),f(_,wt),i.rawrigidbodyset_createRigidBody(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n,a,s,o.__wbg_ptr,_.__wbg_ptr,l,c,w,h,d,p,u,b,g,m,y,S,v)}remove(t,e,r,n,a){f(e,V),f(r,B),f(n,X),f(a,K),i.rawrigidbodyset_remove(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,a.__wbg_ptr)}len(){return i.rawcolliderset_len(this.__wbg_ptr)>>>0}contains(t){return 0!==i.rawrigidbodyset_contains(this.__wbg_ptr,t)}forEachRigidBodyHandle(t){try{i.rawrigidbodyset_forEachRigidBodyHandle(this.__wbg_ptr,R(t))}finally{a[v++]=void 0}}propagateModifiedBodyPositionsToColliders(t){f(t,B),i.rawrigidbodyset_propagateModifiedBodyPositionsToColliders(this.__wbg_ptr,t.__wbg_ptr)}}class at{static __wrap(t){t>>>=0;const e=Object.create(at.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawrotation_free(t)}static identity(){const t=i.rawrotation_identity();return at.__wrap(t)}static fromAngle(t){const e=i.rawrotation_fromAngle(t);return at.__wrap(e)}get im(){return i.rawintegrationparameters_dt(this.__wbg_ptr)}get re(){return i.rawrotation_re(this.__wbg_ptr)}get angle(){return i.rawrotation_angle(this.__wbg_ptr)}}class st{__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawserializationpipeline_free(t)}constructor(){const t=i.rawserializationpipeline_new();return this.__wbg_ptr=t>>>0,this}serializeAll(t,e,r,n,a,s,o,_,c){return f(t,wt),f(e,q),f(r,V),f(n,D),f(a,Y),f(s,nt),f(o,B),f(_,X),f(c,K),l(i.rawserializationpipeline_serializeAll(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,a.__wbg_ptr,s.__wbg_ptr,o.__wbg_ptr,_.__wbg_ptr,c.__wbg_ptr))}deserializeAll(t){const e=i.rawserializationpipeline_deserializeAll(this.__wbg_ptr,o(t));return 0===e?void 0:G.__wrap(e)}}class ot{static __wrap(t){t>>>=0;const e=Object.create(ot.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawshape_free(t)}static cuboid(t,e){const r=i.rawshape_cuboid(t,e);return ot.__wrap(r)}static roundCuboid(t,e,r){const n=i.rawshape_roundCuboid(t,e,r);return ot.__wrap(n)}static ball(t){const e=i.rawshape_ball(t);return ot.__wrap(e)}static halfspace(t){f(t,wt);const e=i.rawshape_halfspace(t.__wbg_ptr);return ot.__wrap(e)}static capsule(t,e){const r=i.rawshape_capsule(t,e);return ot.__wrap(r)}static polyline(t,e){const r=P(t,i.__wbindgen_malloc),n=A,a=E(e,i.__wbindgen_malloc),s=A,o=i.rawshape_polyline(r,n,a,s);return ot.__wrap(o)}static trimesh(t,e){const r=P(t,i.__wbindgen_malloc),n=A,a=E(e,i.__wbindgen_malloc),s=A,o=i.rawshape_trimesh(r,n,a,s);return ot.__wrap(o)}static heightfield(t,e){const r=P(t,i.__wbindgen_malloc),n=A;f(e,wt);const a=i.rawshape_heightfield(r,n,e.__wbg_ptr);return ot.__wrap(a)}static segment(t,e){f(t,wt),f(e,wt);const r=i.rawshape_segment(t.__wbg_ptr,e.__wbg_ptr);return ot.__wrap(r)}static triangle(t,e,r){f(t,wt),f(e,wt),f(r,wt);const n=i.rawshape_triangle(t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr);return ot.__wrap(n)}static roundTriangle(t,e,r,n){f(t,wt),f(e,wt),f(r,wt);const a=i.rawshape_roundTriangle(t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n);return ot.__wrap(a)}static convexHull(t){const e=P(t,i.__wbindgen_malloc),r=A,n=i.rawshape_convexHull(e,r);return 0===n?void 0:ot.__wrap(n)}static roundConvexHull(t,e){const r=P(t,i.__wbindgen_malloc),n=A,a=i.rawshape_roundConvexHull(r,n,e);return 0===a?void 0:ot.__wrap(a)}static convexPolyline(t){const e=P(t,i.__wbindgen_malloc),r=A,n=i.rawshape_convexPolyline(e,r);return 0===n?void 0:ot.__wrap(n)}static roundConvexPolyline(t,e){const r=P(t,i.__wbindgen_malloc),n=A,a=i.rawshape_roundConvexPolyline(r,n,e);return 0===a?void 0:ot.__wrap(a)}castShape(t,e,r,n,a,s,o,_,l){f(t,wt),f(e,at),f(r,wt),f(n,ot),f(a,wt),f(s,at),f(o,wt);const c=i.rawshape_castShape(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,a.__wbg_ptr,s.__wbg_ptr,o.__wbg_ptr,_,l);return 0===c?void 0:ct.__wrap(c)}intersectsShape(t,e,r,n,a){return f(t,wt),f(e,at),f(r,ot),f(n,wt),f(a,at),0!==i.rawshape_intersectsShape(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,a.__wbg_ptr)}contactShape(t,e,r,n,a,s){f(t,wt),f(e,at),f(r,ot),f(n,wt),f(a,at);const o=i.rawshape_contactShape(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,a.__wbg_ptr,s);return 0===o?void 0:lt.__wrap(o)}containsPoint(t,e,r){return f(t,wt),f(e,at),f(r,wt),0!==i.rawshape_containsPoint(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr)}projectPoint(t,e,r,n){f(t,wt),f(e,at),f(r,wt);const a=i.rawshape_projectPoint(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n);return $.__wrap(a)}intersectsRay(t,e,r,n,a){return f(t,wt),f(e,at),f(r,wt),f(n,wt),0!==i.rawshape_intersectsRay(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,a)}castRay(t,e,r,n,a,s){return f(t,wt),f(e,at),f(r,wt),f(n,wt),i.rawshape_castRay(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,a,s)}castRayAndGetNormal(t,e,r,n,a,s){f(t,wt),f(e,at),f(r,wt),f(n,wt);const o=i.rawshape_castRayAndGetNormal(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,a,s);return 0===o?void 0:it.__wrap(o)}}class _t{static __wrap(t){t>>>=0;const e=Object.create(_t.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawshapecollidertoi_free(t)}colliderHandle(){return i.rawcontactforceevent_collider1(this.__wbg_ptr)}toi(){return i.rawraycolliderintersection_toi(this.__wbg_ptr)}witness1(){const t=i.rawraycolliderintersection_normal(this.__wbg_ptr);return wt.__wrap(t)}witness2(){const t=i.rawshapecollidertoi_witness2(this.__wbg_ptr);return wt.__wrap(t)}normal1(){const t=i.rawshapecollidertoi_normal1(this.__wbg_ptr);return wt.__wrap(t)}normal2(){const t=i.rawkinematiccharactercontroller_up(this.__wbg_ptr);return wt.__wrap(t)}}class lt{static __wrap(t){t>>>=0;const e=Object.create(lt.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawshapecontact_free(t)}distance(){return i.rawcontactforceevent_total_force_magnitude(this.__wbg_ptr)}point1(){const t=i.rawpointprojection_point(this.__wbg_ptr);return wt.__wrap(t)}point2(){const t=i.rawpointcolliderprojection_point(this.__wbg_ptr);return wt.__wrap(t)}normal1(){const t=i.rawcontactforceevent_total_force(this.__wbg_ptr);return wt.__wrap(t)}normal2(){const t=i.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);return wt.__wrap(t)}}class ct{static __wrap(t){t>>>=0;const e=Object.create(ct.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawshapetoi_free(t)}toi(){return i.rawrotation_re(this.__wbg_ptr)}witness1(){const t=i.rawshapetoi_witness1(this.__wbg_ptr);return wt.__wrap(t)}witness2(){const t=i.rawraycolliderintersection_normal(this.__wbg_ptr);return wt.__wrap(t)}normal1(){const t=i.rawshapecollidertoi_witness2(this.__wbg_ptr);return wt.__wrap(t)}normal2(){const t=i.rawshapecollidertoi_normal1(this.__wbg_ptr);return wt.__wrap(t)}}class wt{static __wrap(t){t>>>=0;const e=Object.create(wt.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawvector_free(t)}static zero(){const t=i.rawvector_zero();return wt.__wrap(t)}constructor(t,e){const r=i.rawvector_new(t,e);return this.__wbg_ptr=r>>>0,this}get x(){return i.rawrotation_re(this.__wbg_ptr)}set x(t){i.rawvector_set_x(this.__wbg_ptr,t)}get y(){return i.rawintegrationparameters_dt(this.__wbg_ptr)}set y(t){i.rawintegrationparameters_set_dt(this.__wbg_ptr,t)}xy(){const t=i.rawvector_xy(this.__wbg_ptr);return wt.__wrap(t)}yx(){const t=i.rawvector_yx(this.__wbg_ptr);return wt.__wrap(t)}}function ht(t){return o(t)}function dt(t){const e=_(t);return"boolean"==typeof e?e?1:0:2}function pt(t){l(t)}function ut(t,e){const r=_(e),i="number"==typeof r?r:void 0;h()[t/8+1]=c(i)?0:i,p()[t/4+0]=!c(i)}function bt(t){return"function"==typeof _(t)}function gt(t){return o(et.__wrap(t))}function mt(t){return o(J.__wrap(t))}function ft(){return M((function(t,e,r){return o(_(t).call(_(e),_(r)))}),arguments)}function yt(){return M((function(t,e,r,i){return o(_(t).call(_(e),_(r),_(i)))}),arguments)}function St(){return M((function(t,e,r,i,n){return o(_(t).call(_(e),_(r),_(i),_(n)))}),arguments)}function vt(t,e,r,i){return o(_(t).bind(_(e),_(r),_(i)))}function Rt(t){return o(_(t).buffer)}function Ct(t,e,r){return o(new Uint8Array(_(t),e>>>0,r>>>0))}function It(t){return o(new Uint8Array(_(t)))}function Tt(t,e,r){_(t).set(_(e),r>>>0)}function At(t){return _(t).length}function Pt(t,e,r){return o(new Float32Array(_(t),e>>>0,r>>>0))}function Et(t,e,r){_(t).set(_(e),r>>>0)}function Mt(t){return _(t).length}function jt(t){return o(new Float32Array(t>>>0))}function xt(t,e){throw new Error(g(t,e))}function Ft(){return o(i.memory)}},1579:(t,e,r)=>{var i=r(4141);t.exports=r.v(e,t.id,"49b1a36e9eb54128aeb4",{"./rapier_wasm2d_bg.js":{__wbindgen_number_new:i.pT,__wbindgen_boolean_get:i.HT,__wbindgen_object_drop_ref:i.ug,__wbindgen_number_get:i.M1,__wbindgen_is_function:i.o$,__wbg_rawraycolliderintersection_new:i.Ne,__wbg_rawcontactforceevent_new:i.$B,__wbg_call_01734de55d61e11d:i.Nl,__wbg_call_4c92f6aec1e1d6e6:i.PN,__wbg_call_776890ca77946e2f:i.Tt,__wbg_bind_60a9a80cada2f33c:i.p7,__wbg_buffer_085ec1f694018c4f:i.Zf,__wbg_newwithbyteoffsetandlength_6da8e527659b86aa:i.fr,__wbg_new_8125e318e6245eed:i.rU,__wbg_set_5cf90238115182c3:i.H6,__wbg_length_72e2208bbc0efc61:i.Ky,__wbg_newwithbyteoffsetandlength_69193e31c844b792:i.Qk,__wbg_set_6146c51d49a2c0df:i.e_,__wbg_length_d7327c75a759af37:i.L6,__wbg_newwithlength_68d29ab115d0099c:i.Zc,__wbindgen_throw:i.Or,__wbindgen_memory:i.oH}})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,