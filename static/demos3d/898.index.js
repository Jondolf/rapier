"use strict";(self.webpackChunkrapier_testbed3d=self.webpackChunkrapier_testbed3d||[]).push([[898],{3390:(t,e,r)=>{r.d(e,{F:()=>i});class i{constructor(){this.fconv=new Float64Array(1),this.uconv=new Uint32Array(this.fconv.buffer),this.data=new Array,this.size=0}set(t,e){let r=this.index(t);for(;this.data.length<=r;)this.data.push(null);null==this.data[r]&&(this.size+=1),this.data[r]=e}len(){return this.size}delete(t){let e=this.index(t);e<this.data.length&&(null!=this.data[e]&&(this.size-=1),this.data[e]=null)}clear(){this.data=new Array}get(t){let e=this.index(t);return e<this.data.length?this.data[e]:null}forEach(t){for(const e of this.data)null!=e&&t(e)}getAll(){return this.data.filter((t=>null!=t))}index(t){return this.fconv[0]=t,this.uconv[0]}}},1322:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{_:()=>o,m:()=>_});var n=r(9458),s=r(3750),a=t([n,s]);[n,s]=a.then?(await a)():a;class o{}class _{constructor(t,e,r,i,s){this.params=e,this.bodies=r,this.colliders=i,this.queries=s,this.raw=new n.vg(t),this.rawCharacterCollision=new n.Wx,this._applyImpulsesToDynamicBodies=!1,this._characterMass=null}free(){this.raw&&(this.raw.free(),this.rawCharacterCollision.free()),this.raw=void 0,this.rawCharacterCollision=void 0}up(){return this.raw.up()}setUp(t){let e=s.ut.intoRaw(t);return this.raw.setUp(e)}applyImpulsesToDynamicBodies(){return this._applyImpulsesToDynamicBodies}setApplyImpulsesToDynamicBodies(t){this._applyImpulsesToDynamicBodies=t}characterMass(){return this._characterMass}setCharacterMass(t){this._characterMass=t}offset(){return this.raw.offset()}setOffset(t){this.raw.setOffset(t)}slideEnabled(){return this.raw.slideEnabled()}setSlideEnabled(t){this.raw.setSlideEnabled(t)}autostepMaxHeight(){return this.raw.autostepMaxHeight()}autostepMinWidth(){return this.raw.autostepMinWidth()}autostepIncludesDynamicBodies(){return this.raw.autostepIncludesDynamicBodies()}autostepEnabled(){return this.raw.autostepEnabled()}enableAutostep(t,e,r){this.raw.enableAutostep(t,e,r)}disableAutostep(){return this.raw.disableAutostep()}maxSlopeClimbAngle(){return this.raw.maxSlopeClimbAngle()}setMaxSlopeClimbAngle(t){this.raw.setMaxSlopeClimbAngle(t)}minSlopeSlideAngle(){return this.raw.minSlopeSlideAngle()}setMinSlopeSlideAngle(t){this.raw.setMinSlopeSlideAngle(t)}snapToGroundDistance(){return this.raw.snapToGroundDistance()}enableSnapToGround(t){this.raw.enableSnapToGround(t)}disableSnapToGround(){this.raw.disableSnapToGround()}snapToGroundEnabled(){return this.raw.snapToGroundEnabled()}computeColliderMovement(t,e,r,i,n){let a=s.ut.intoRaw(e);this.raw.computeColliderMovement(this.params.dt,this.bodies.raw,this.colliders.raw,this.queries.raw,t.handle,a,this._applyImpulsesToDynamicBodies,this._characterMass,r,i,this.colliders.castClosure(n)),a.free()}computedMovement(){return s.ut.fromRaw(this.raw.computedMovement())}computedGrounded(){return this.raw.computedGrounded()}numComputedCollisions(){return this.raw.numComputedCollisions()}computedCollision(t,e){if(this.raw.computedCollision(t,this.rawCharacterCollision)){let t=this.rawCharacterCollision;return(e=null!=e?e:new o).translationDeltaApplied=s.ut.fromRaw(t.translationDeltaApplied()),e.translationDeltaRemaining=s.ut.fromRaw(t.translationDeltaRemaining()),e.toi=t.toi(),e.witness1=s.ut.fromRaw(t.worldWitness1()),e.witness2=s.ut.fromRaw(t.worldWitness2()),e.normal1=s.ut.fromRaw(t.worldNormal1()),e.normal2=s.ut.fromRaw(t.worldNormal2()),e.collider=this.colliders.get(t.handle()),e}return null}}i()}catch(t){i(t)}}))},1970:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{SX:()=>s.S,_i:()=>n._,mI:()=>n.m});var n=r(1322),s=r(273),a=t([n,s]);[n,s]=a.then?(await a)():a,i()}catch(t){i(t)}}))},273:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{S:()=>o});var n=r(9458),s=r(3750),a=t([n,s]);[n,s]=a.then?(await a)():a;class o{constructor(t,e,r,i){this.raw=new n.JX(t.handle),this.bodies=e,this.colliders=r,this.queries=i,this._chassis=t}free(){this.raw&&this.raw.free(),this.raw=void 0}updateVehicle(t,e,r,i){this.raw.update_vehicle(t,this.bodies.raw,this.colliders.raw,this.queries.raw,e,r,this.colliders.castClosure(i))}currentVehicleSpeed(){return this.raw.current_vehicle_speed()}chassis(){return this._chassis}get indexUpAxis(){return this.raw.index_up_axis()}set indexUpAxis(t){this.raw.set_index_up_axis(t)}get indexForwardAxis(){return this.raw.index_forward_axis()}set setIndexForwardAxis(t){this.raw.set_index_forward_axis(t)}addWheel(t,e,r,i,n){let a=s.ut.intoRaw(t),o=s.ut.intoRaw(e),_=s.ut.intoRaw(r);this.raw.add_wheel(a,o,_,i,n),a.free(),o.free(),_.free()}numWheels(){return this.raw.num_wheels()}wheelChassisConnectionPointCs(t){return s.ut.fromRaw(this.raw.wheel_chassis_connection_point_cs(t))}setWheelChassisConnectionPointCs(t,e){let r=s.ut.intoRaw(e);this.raw.set_wheel_chassis_connection_point_cs(t,r),r.free()}wheelSuspensionRestLength(t){return this.raw.wheel_suspension_rest_length(t)}setWheelSuspensionRestLength(t,e){this.raw.set_wheel_suspension_rest_length(t,e)}wheelMaxSuspensionTravel(t){return this.raw.wheel_max_suspension_travel(t)}setWheelMaxSuspensionTravel(t,e){this.raw.set_wheel_max_suspension_travel(t,e)}wheelRadius(t){return this.raw.wheel_radius(t)}setWheelRadius(t,e){this.raw.set_wheel_radius(t,e)}wheelSuspensionStiffness(t){return this.raw.wheel_suspension_stiffness(t)}setWheelSuspensionStiffness(t,e){this.raw.set_wheel_suspension_stiffness(t,e)}wheelSuspensionCompression(t){return this.raw.wheel_suspension_compression(t)}setWheelSuspensionCompression(t,e){this.raw.set_wheel_suspension_compression(t,e)}wheelSuspensionRelaxation(t){return this.raw.wheel_suspension_relaxation(t)}setWheelSuspensionRelaxation(t,e){this.raw.set_wheel_suspension_relaxation(t,e)}wheelMaxSuspensionForce(t){return this.raw.wheel_max_suspension_force(t)}setWheelMaxSuspensionForce(t,e){this.raw.set_wheel_max_suspension_force(t,e)}wheelBrake(t){return this.raw.wheel_brake(t)}setWheelBrake(t,e){this.raw.set_wheel_brake(t,e)}wheelSteering(t){return this.raw.wheel_steering(t)}setWheelSteering(t,e){this.raw.set_wheel_steering(t,e)}wheelEngineForce(t){return this.raw.wheel_engine_force(t)}setWheelEngineForce(t,e){this.raw.set_wheel_engine_force(t,e)}wheelDirectionCs(t){return s.ut.fromRaw(this.raw.wheel_direction_cs(t))}setWheelDirectionCs(t,e){let r=s.ut.intoRaw(e);this.raw.set_wheel_direction_cs(t,r),r.free()}wheelAxleCs(t){return s.ut.fromRaw(this.raw.wheel_axle_cs(t))}setWheelAxleCs(t,e){let r=s.ut.intoRaw(e);this.raw.set_wheel_axle_cs(t,r),r.free()}wheelFrictionSlip(t){return this.raw.wheel_friction_slip(t)}setWheelFrictionSlip(t,e){this.raw.set_wheel_friction_slip(t,e)}wheelSideFrictionStiffness(t){return this.raw.wheel_side_friction_stiffness(t)}setWheelSideFrictionStiffness(t,e){this.raw.set_wheel_side_friction_stiffness(t,e)}wheelRotation(t){return this.raw.wheel_rotation(t)}wheelForwardImpulse(t){return this.raw.wheel_forward_impulse(t)}wheelSideImpulse(t){return this.raw.wheel_side_impulse(t)}wheelSuspensionForce(t){return this.raw.wheel_suspension_force(t)}wheelContactNormal(t){return s.ut.fromRaw(this.raw.wheel_contact_normal_ws(t))}wheelContactPoint(t){return s.ut.fromRaw(this.raw.wheel_contact_point_ws(t))}wheelSuspensionLength(t){return this.raw.wheel_suspension_length(t)}wheelHardPoint(t){return s.ut.fromRaw(this.raw.wheel_hard_point_ws(t))}wheelIsInContact(t){return this.raw.wheel_is_in_contact(t)}wheelGroundObject(t){return this.colliders.get(this.raw.wheel_ground_object(t))}}i()}catch(t){i(t)}}))},5671:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{K:()=>a});var n=r(9458),s=t([n]);n=(s.then?(await s)():s)[0];class a{constructor(t){this.raw=t||new n.LE}free(){this.raw&&this.raw.free(),this.raw=void 0}}i()}catch(t){i(t)}}))},3992:(t,e,r)=>{var i;r.d(e,{j:()=>i}),function(t){t[t.Average=0]="Average",t[t.Min=1]="Min",t[t.Multiply=2]="Multiply",t[t.Max=3]="Max"}(i||(i={}))},2906:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{C1:()=>h,JW:()=>w,ME:()=>a,Pf:()=>d,T9:()=>p,TV:()=>g,VH:()=>y,Vt:()=>s,_h:()=>m,au:()=>b,dl:()=>n,eZ:()=>u,s2:()=>c});var n,s,a,o=r(3750),_=r(9458),l=t([_,o]);[_,o]=l.then?(await l)():l,function(t){t[t.Revolute=0]="Revolute",t[t.Fixed=1]="Fixed",t[t.Prismatic=2]="Prismatic",t[t.Rope=3]="Rope",t[t.Spring=4]="Spring",t[t.Spherical=5]="Spherical",t[t.Generic=6]="Generic"}(n||(n={})),function(t){t[t.AccelerationBased=0]="AccelerationBased",t[t.ForceBased=1]="ForceBased"}(s||(s={})),function(t){t[t.X=1]="X",t[t.Y=2]="Y",t[t.Z=4]="Z",t[t.AngX=8]="AngX",t[t.AngY=16]="AngY",t[t.AngZ=32]="AngZ"}(a||(a={}));class c{constructor(t,e,r){this.rawSet=t,this.bodySet=e,this.handle=r}static newTyped(t,e,r){switch(t.jointType(r)){case _.yk.Revolute:return new b(t,e,r);case _.yk.Prismatic:return new u(t,e,r);case _.yk.Fixed:return new w(t,e,r);case _.yk.Spring:return new p(t,e,r);case _.yk.Rope:return new d(t,e,r);case _.yk.Spherical:return new y(t,e,r);case _.yk.Generic:return new g(t,e,r);default:return new c(t,e,r)}}finalizeDeserialization(t){this.bodySet=t}isValid(){return this.rawSet.contains(this.handle)}body1(){return this.bodySet.get(this.rawSet.jointBodyHandle1(this.handle))}body2(){return this.bodySet.get(this.rawSet.jointBodyHandle2(this.handle))}type(){return this.rawSet.jointType(this.handle)}frameX1(){return o.T3.fromRaw(this.rawSet.jointFrameX1(this.handle))}frameX2(){return o.T3.fromRaw(this.rawSet.jointFrameX2(this.handle))}anchor1(){return o.ut.fromRaw(this.rawSet.jointAnchor1(this.handle))}anchor2(){return o.ut.fromRaw(this.rawSet.jointAnchor2(this.handle))}setAnchor1(t){const e=o.ut.intoRaw(t);this.rawSet.jointSetAnchor1(this.handle,e),e.free()}setAnchor2(t){const e=o.ut.intoRaw(t);this.rawSet.jointSetAnchor2(this.handle,e),e.free()}setContactsEnabled(t){this.rawSet.jointSetContactsEnabled(this.handle,t)}contactsEnabled(){return this.rawSet.jointContactsEnabled(this.handle)}}class h extends c{limitsEnabled(){return this.rawSet.jointLimitsEnabled(this.handle,this.rawAxis())}limitsMin(){return this.rawSet.jointLimitsMin(this.handle,this.rawAxis())}limitsMax(){return this.rawSet.jointLimitsMax(this.handle,this.rawAxis())}setLimits(t,e){this.rawSet.jointSetLimits(this.handle,this.rawAxis(),t,e)}configureMotorModel(t){this.rawSet.jointConfigureMotorModel(this.handle,this.rawAxis(),t)}configureMotorVelocity(t,e){this.rawSet.jointConfigureMotorVelocity(this.handle,this.rawAxis(),t,e)}configureMotorPosition(t,e,r){this.rawSet.jointConfigureMotorPosition(this.handle,this.rawAxis(),t,e,r)}configureMotor(t,e,r,i){this.rawSet.jointConfigureMotor(this.handle,this.rawAxis(),t,e,r,i)}}class w extends c{}class d extends c{}class p extends c{}class u extends h{rawAxis(){return _.JM.X}}class b extends h{rawAxis(){return _.JM.AngX}}class g extends c{}class y extends c{}class m{constructor(){}static fixed(t,e,r,i){let s=new m;return s.anchor1=t,s.anchor2=r,s.frame1=e,s.frame2=i,s.jointType=n.Fixed,s}static spring(t,e,r,i,s){let a=new m;return a.anchor1=i,a.anchor2=s,a.length=t,a.stiffness=e,a.damping=r,a.jointType=n.Spring,a}static rope(t,e,r){let i=new m;return i.anchor1=e,i.anchor2=r,i.length=t,i.jointType=n.Rope,i}static generic(t,e,r,i){let s=new m;return s.anchor1=t,s.anchor2=e,s.axis=r,s.axesMask=i,s.jointType=n.Generic,s}static spherical(t,e){let r=new m;return r.anchor1=t,r.anchor2=e,r.jointType=n.Spherical,r}static prismatic(t,e,r){let i=new m;return i.anchor1=t,i.anchor2=e,i.axis=r,i.jointType=n.Prismatic,i}static revolute(t,e,r){let i=new m;return i.anchor1=t,i.anchor2=e,i.axis=r,i.jointType=n.Revolute,i}intoRaw(){let t,e,r=o.ut.intoRaw(this.anchor1),i=o.ut.intoRaw(this.anchor2),s=!1,a=0,l=0;switch(this.jointType){case n.Fixed:let c=o.T3.intoRaw(this.frame1),h=o.T3.intoRaw(this.frame2);e=_.cQ.fixed(r,c,i,h),c.free(),h.free();break;case n.Spring:e=_.cQ.spring(this.length,this.stiffness,this.damping,r,i);break;case n.Rope:e=_.cQ.rope(this.length,r,i);break;case n.Prismatic:t=o.ut.intoRaw(this.axis),this.limitsEnabled&&(s=!0,a=this.limits[0],l=this.limits[1]),e=_.cQ.prismatic(r,i,t,s,a,l),t.free();break;case n.Generic:t=o.ut.intoRaw(this.axis);let w=this.axesMask;e=_.cQ.generic(r,i,t,w);break;case n.Spherical:e=_.cQ.spherical(r,i);break;case n.Revolute:t=o.ut.intoRaw(this.axis),e=_.cQ.revolute(r,i,t),t.free()}return r.free(),i.free(),e}}i()}catch(t){i(t)}}))},7292:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{l:()=>_});var n=r(9458),s=r(3390),a=r(2906),o=t([n,a]);[n,a]=o.then?(await o)():o;class _{constructor(t){this.raw=t||new n.Qc,this.map=new s.F,t&&t.forEachJointHandle((e=>{this.map.set(e,a.s2.newTyped(t,null,e))}))}free(){this.raw&&this.raw.free(),this.raw=void 0,this.map&&this.map.clear(),this.map=void 0}finalizeDeserialization(t){this.map.forEach((e=>e.finalizeDeserialization(t)))}createJoint(t,e,r,i,n){const s=e.intoRaw(),o=this.raw.createJoint(s,r,i,n);s.free();let _=a.s2.newTyped(this.raw,t,o);return this.map.set(o,_),_}remove(t,e){this.raw.remove(t,e),this.unmap(t)}forEachJointHandleAttachedToRigidBody(t,e){this.raw.forEachJointAttachedToRigidBody(t,e)}unmap(t){this.map.delete(t)}len(){return this.map.len()}contains(t){return null!=this.get(t)}get(t){return this.map.get(t)}forEach(t){this.map.forEach(t)}getAll(){return this.map.getAll()}}i()}catch(t){i(t)}}))},8275:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{Am:()=>l.Am,C1:()=>o.C1,JW:()=>o.JW,Jj:()=>n.Jj,Kd:()=>w.K,ME:()=>o.ME,Pf:()=>o.Pf,RT:()=>a.R,T9:()=>o.T9,TV:()=>o.TV,UW:()=>l.UW,VH:()=>o.VH,Vt:()=>o.Vt,_h:()=>o._h,au:()=>o.au,dl:()=>o.dl,dx:()=>l.dx,eZ:()=>o.eZ,h1:()=>c.h,ib:()=>n.ib,jK:()=>h.j,jp:()=>l.jp,lX:()=>_.l,rF:()=>s.r,s2:()=>o.s2,wI:()=>l.wI,xr:()=>n.xr,yB:()=>d.y,yf:()=>l.yf});var n=r(8458),s=r(9743),a=r(2815),o=r(2906),_=r(7292),l=r(9608),c=r(2681),h=r(3992),w=r(5671),d=r(9484),p=t([n,s,a,o,_,l,c,w,d]);[n,s,a,o,_,l,c,w,d]=p.then?(await p)():p,i()}catch(t){i(t)}}))},2815:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{R:()=>a});var n=r(9458),s=t([n]);n=(s.then?(await s)():s)[0];class a{constructor(t){this.raw=t||new n.zu}free(){this.raw&&this.raw.free(),this.raw=void 0}get dt(){return this.raw.dt}get erp(){return this.raw.erp}get allowedLinearError(){return this.raw.allowedLinearError}get predictionDistance(){return this.raw.predictionDistance}get numSolverIterations(){return this.raw.numSolverIterations}get numAdditionalFrictionIterations(){return this.raw.numAdditionalFrictionIterations}get numInternalPgsIterations(){return this.raw.numInternalPgsIterations}get minIslandSize(){return this.raw.minIslandSize}get maxCcdSubsteps(){return this.raw.maxCcdSubsteps}set dt(t){this.raw.dt=t}set erp(t){this.raw.erp=t}set allowedLinearError(t){this.raw.allowedLinearError=t}set predictionDistance(t){this.raw.predictionDistance=t}set numSolverIterations(t){this.raw.numSolverIterations=t}set numAdditionalFrictionIterations(t){this.raw.numAdditionalFrictionIterations=t}set numInternalPgsIterations(t){this.raw.numInternalPgsIterations=t}set minIslandSize(t){this.raw.minIslandSize=t}set maxCcdSubsteps(t){this.raw.maxCcdSubsteps=t}switchToStandardPgsSolver(){this.raw.switchToStandardPgsSolver()}switchToSmallStepsPgsSolver(){this.raw.switchToSmallStepsPgsSolver()}}i()}catch(t){i(t)}}))},9484:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{y:()=>a});var n=r(9458),s=t([n]);n=(s.then?(await s)():s)[0];class a{constructor(t){this.raw=t||new n.Is}free(){this.raw&&this.raw.free(),this.raw=void 0}forEachActiveRigidBodyHandle(t){this.raw.forEachActiveRigidBodyHandle(t)}}i()}catch(t){i(t)}}))},9608:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{Am:()=>c,UW:()=>_,dx:()=>h,jp:()=>l,wI:()=>o,yf:()=>a});var n=r(9458),s=t([n]);n=(s.then?(await s)():s)[0];class a{constructor(t,e){this.rawSet=t,this.handle=e}static newTyped(t,e){switch(t.jointType(e)){case n.yk.Revolute:return new c(t,e);case n.yk.Prismatic:return new l(t,e);case n.yk.Fixed:return new _(t,e);case n.yk.Spherical:return new h(t,e);default:return new a(t,e)}}isValid(){return this.rawSet.contains(this.handle)}setContactsEnabled(t){this.rawSet.jointSetContactsEnabled(this.handle,t)}contactsEnabled(){return this.rawSet.jointContactsEnabled(this.handle)}}class o extends a{}class _ extends a{}class l extends o{rawAxis(){return n.JM.X}}class c extends o{rawAxis(){return n.JM.AngX}}class h extends a{}i()}catch(t){i(t)}}))},2681:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{h:()=>_});var n=r(9458),s=r(3390),a=r(9608),o=t([n,a]);[n,a]=o.then?(await o)():o;class _{constructor(t){this.raw=t||new n.fl,this.map=new s.F,t&&t.forEachJointHandle((t=>{this.map.set(t,a.yf.newTyped(this.raw,t))}))}free(){this.raw&&this.raw.free(),this.raw=void 0,this.map&&this.map.clear(),this.map=void 0}createJoint(t,e,r,i){const n=t.intoRaw(),s=this.raw.createJoint(n,e,r,i);n.free();let o=a.yf.newTyped(this.raw,s);return this.map.set(s,o),o}remove(t,e){this.raw.remove(t,e),this.map.delete(t)}unmap(t){this.map.delete(t)}len(){return this.map.len()}contains(t){return null!=this.get(t)}get(t){return this.map.get(t)}forEach(t){this.map.forEach(t)}forEachJointHandleAttachedToRigidBody(t,e){this.raw.forEachJointAttachedToRigidBody(t,e)}getAll(){return this.map.getAll()}}i()}catch(t){i(t)}}))},8458:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{Jj:()=>n,ib:()=>o,xr:()=>_});var n,s=r(3750),a=t([s]);s=(a.then?(await a)():a)[0],function(t){t[t.Dynamic=0]="Dynamic",t[t.Fixed=1]="Fixed",t[t.KinematicPositionBased=2]="KinematicPositionBased",t[t.KinematicVelocityBased=3]="KinematicVelocityBased"}(n||(n={}));class o{constructor(t,e,r){this.rawSet=t,this.colliderSet=e,this.handle=r}finalizeDeserialization(t){this.colliderSet=t}isValid(){return this.rawSet.contains(this.handle)}lockTranslations(t,e){return this.rawSet.rbLockTranslations(this.handle,t,e)}lockRotations(t,e){return this.rawSet.rbLockRotations(this.handle,t,e)}setEnabledTranslations(t,e,r,i){return this.rawSet.rbSetEnabledTranslations(this.handle,t,e,r,i)}restrictTranslations(t,e,r,i){this.setEnabledTranslations(t,e,r,i)}setEnabledRotations(t,e,r,i){return this.rawSet.rbSetEnabledRotations(this.handle,t,e,r,i)}restrictRotations(t,e,r,i){this.setEnabledRotations(t,e,r,i)}dominanceGroup(){return this.rawSet.rbDominanceGroup(this.handle)}setDominanceGroup(t){this.rawSet.rbSetDominanceGroup(this.handle,t)}additionalSolverIterations(){return this.rawSet.rbAdditionalSolverIterations(this.handle)}setAdditionalSolverIterations(t){this.rawSet.rbSetAdditionalSolverIterations(this.handle,t)}enableCcd(t){this.rawSet.rbEnableCcd(this.handle,t)}translation(){let t=this.rawSet.rbTranslation(this.handle);return s.ut.fromRaw(t)}rotation(){let t=this.rawSet.rbRotation(this.handle);return s.T3.fromRaw(t)}nextTranslation(){let t=this.rawSet.rbNextTranslation(this.handle);return s.ut.fromRaw(t)}nextRotation(){let t=this.rawSet.rbNextRotation(this.handle);return s.T3.fromRaw(t)}setTranslation(t,e){this.rawSet.rbSetTranslation(this.handle,t.x,t.y,t.z,e)}setLinvel(t,e){let r=s.ut.intoRaw(t);this.rawSet.rbSetLinvel(this.handle,r,e),r.free()}gravityScale(){return this.rawSet.rbGravityScale(this.handle)}setGravityScale(t,e){this.rawSet.rbSetGravityScale(this.handle,t,e)}setRotation(t,e){this.rawSet.rbSetRotation(this.handle,t.x,t.y,t.z,t.w,e)}setAngvel(t,e){let r=s.ut.intoRaw(t);this.rawSet.rbSetAngvel(this.handle,r,e),r.free()}setNextKinematicTranslation(t){this.rawSet.rbSetNextKinematicTranslation(this.handle,t.x,t.y,t.z)}setNextKinematicRotation(t){this.rawSet.rbSetNextKinematicRotation(this.handle,t.x,t.y,t.z,t.w)}linvel(){return s.ut.fromRaw(this.rawSet.rbLinvel(this.handle))}angvel(){return s.ut.fromRaw(this.rawSet.rbAngvel(this.handle))}mass(){return this.rawSet.rbMass(this.handle)}effectiveInvMass(){return s.ut.fromRaw(this.rawSet.rbEffectiveInvMass(this.handle))}invMass(){return this.rawSet.rbInvMass(this.handle)}localCom(){return s.ut.fromRaw(this.rawSet.rbLocalCom(this.handle))}worldCom(){return s.ut.fromRaw(this.rawSet.rbWorldCom(this.handle))}invPrincipalInertiaSqrt(){return s.ut.fromRaw(this.rawSet.rbInvPrincipalInertiaSqrt(this.handle))}principalInertia(){return s.ut.fromRaw(this.rawSet.rbPrincipalInertia(this.handle))}principalInertiaLocalFrame(){return s.T3.fromRaw(this.rawSet.rbPrincipalInertiaLocalFrame(this.handle))}effectiveWorldInvInertiaSqrt(){return s.PR.fromRaw(this.rawSet.rbEffectiveWorldInvInertiaSqrt(this.handle))}effectiveAngularInertia(){return s.PR.fromRaw(this.rawSet.rbEffectiveAngularInertia(this.handle))}sleep(){this.rawSet.rbSleep(this.handle)}wakeUp(){this.rawSet.rbWakeUp(this.handle)}isCcdEnabled(){return this.rawSet.rbIsCcdEnabled(this.handle)}numColliders(){return this.rawSet.rbNumColliders(this.handle)}collider(t){return this.colliderSet.get(this.rawSet.rbCollider(this.handle,t))}setEnabled(t){this.rawSet.rbSetEnabled(this.handle,t)}isEnabled(){return this.rawSet.rbIsEnabled(this.handle)}bodyType(){return this.rawSet.rbBodyType(this.handle)}setBodyType(t,e){return this.rawSet.rbSetBodyType(this.handle,t,e)}isSleeping(){return this.rawSet.rbIsSleeping(this.handle)}isMoving(){return this.rawSet.rbIsMoving(this.handle)}isFixed(){return this.rawSet.rbIsFixed(this.handle)}isKinematic(){return this.rawSet.rbIsKinematic(this.handle)}isDynamic(){return this.rawSet.rbIsDynamic(this.handle)}linearDamping(){return this.rawSet.rbLinearDamping(this.handle)}angularDamping(){return this.rawSet.rbAngularDamping(this.handle)}setLinearDamping(t){this.rawSet.rbSetLinearDamping(this.handle,t)}recomputeMassPropertiesFromColliders(){this.rawSet.rbRecomputeMassPropertiesFromColliders(this.handle,this.colliderSet.raw)}setAdditionalMass(t,e){this.rawSet.rbSetAdditionalMass(this.handle,t,e)}setAdditionalMassProperties(t,e,r,i,n){let a=s.ut.intoRaw(e),o=s.ut.intoRaw(r),_=s.T3.intoRaw(i);this.rawSet.rbSetAdditionalMassProperties(this.handle,t,a,o,_,n),a.free(),o.free(),_.free()}setAngularDamping(t){this.rawSet.rbSetAngularDamping(this.handle,t)}resetForces(t){this.rawSet.rbResetForces(this.handle,t)}resetTorques(t){this.rawSet.rbResetTorques(this.handle,t)}addForce(t,e){const r=s.ut.intoRaw(t);this.rawSet.rbAddForce(this.handle,r,e),r.free()}applyImpulse(t,e){const r=s.ut.intoRaw(t);this.rawSet.rbApplyImpulse(this.handle,r,e),r.free()}addTorque(t,e){const r=s.ut.intoRaw(t);this.rawSet.rbAddTorque(this.handle,r,e),r.free()}applyTorqueImpulse(t,e){const r=s.ut.intoRaw(t);this.rawSet.rbApplyTorqueImpulse(this.handle,r,e),r.free()}addForceAtPoint(t,e,r){const i=s.ut.intoRaw(t),n=s.ut.intoRaw(e);this.rawSet.rbAddForceAtPoint(this.handle,i,n,r),i.free(),n.free()}applyImpulseAtPoint(t,e,r){const i=s.ut.intoRaw(t),n=s.ut.intoRaw(e);this.rawSet.rbApplyImpulseAtPoint(this.handle,i,n,r),i.free(),n.free()}}class _{constructor(t){this.enabled=!0,this.status=t,this.translation=s.ut.zeros(),this.rotation=s.T3.identity(),this.gravityScale=1,this.linvel=s.ut.zeros(),this.mass=0,this.massOnly=!1,this.centerOfMass=s.ut.zeros(),this.translationsEnabledX=!0,this.translationsEnabledY=!0,this.angvel=s.ut.zeros(),this.principalAngularInertia=s.ut.zeros(),this.angularInertiaLocalFrame=s.T3.identity(),this.translationsEnabledZ=!0,this.rotationsEnabledX=!0,this.rotationsEnabledY=!0,this.rotationsEnabledZ=!0,this.linearDamping=0,this.angularDamping=0,this.canSleep=!0,this.sleeping=!1,this.ccdEnabled=!1,this.dominanceGroup=0,this.additionalSolverIterations=0}static dynamic(){return new _(n.Dynamic)}static kinematicPositionBased(){return new _(n.KinematicPositionBased)}static kinematicVelocityBased(){return new _(n.KinematicVelocityBased)}static fixed(){return new _(n.Fixed)}static newDynamic(){return new _(n.Dynamic)}static newKinematicPositionBased(){return new _(n.KinematicPositionBased)}static newKinematicVelocityBased(){return new _(n.KinematicVelocityBased)}static newStatic(){return new _(n.Fixed)}setDominanceGroup(t){return this.dominanceGroup=t,this}setAdditionalSolverIterations(t){return this.additionalSolverIterations=t,this}setEnabled(t){return this.enabled=t,this}setTranslation(t,e,r){if("number"!=typeof t||"number"!=typeof e||"number"!=typeof r)throw TypeError("The translation components must be numbers.");return this.translation={x:t,y:e,z:r},this}setRotation(t){return s.T3.copy(this.rotation,t),this}setGravityScale(t){return this.gravityScale=t,this}setAdditionalMass(t){return this.mass=t,this.massOnly=!0,this}setLinvel(t,e,r){if("number"!=typeof t||"number"!=typeof e||"number"!=typeof r)throw TypeError("The linvel components must be numbers.");return this.linvel={x:t,y:e,z:r},this}setAngvel(t){return s.ut.copy(this.angvel,t),this}setAdditionalMassProperties(t,e,r,i){return this.mass=t,s.ut.copy(this.centerOfMass,e),s.ut.copy(this.principalAngularInertia,r),s.T3.copy(this.angularInertiaLocalFrame,i),this.massOnly=!1,this}enabledTranslations(t,e,r){return this.translationsEnabledX=t,this.translationsEnabledY=e,this.translationsEnabledZ=r,this}restrictTranslations(t,e,r){return this.enabledTranslations(t,e,r)}lockTranslations(){return this.enabledTranslations(!1,!1,!1)}enabledRotations(t,e,r){return this.rotationsEnabledX=t,this.rotationsEnabledY=e,this.rotationsEnabledZ=r,this}restrictRotations(t,e,r){return this.enabledRotations(t,e,r)}lockRotations(){return this.restrictRotations(!1,!1,!1)}setLinearDamping(t){return this.linearDamping=t,this}setAngularDamping(t){return this.angularDamping=t,this}setCanSleep(t){return this.canSleep=t,this}setSleeping(t){return this.sleeping=t,this}setCcdEnabled(t){return this.ccdEnabled=t,this}setUserData(t){return this.userData=t,this}}i()}catch(t){i(t)}}))},9743:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{r:()=>l});var n=r(9458),s=r(3390),a=r(3750),o=r(8458),_=t([n,o,a]);[n,o,a]=_.then?(await _)():_;class l{constructor(t){this.raw=t||new n.fY,this.map=new s.F,t&&t.forEachRigidBodyHandle((e=>{this.map.set(e,new o.ib(t,null,e))}))}free(){this.raw&&this.raw.free(),this.raw=void 0,this.map&&this.map.clear(),this.map=void 0}finalizeDeserialization(t){this.map.forEach((e=>e.finalizeDeserialization(t)))}createRigidBody(t,e){let r=a.ut.intoRaw(e.translation),i=a.T3.intoRaw(e.rotation),n=a.ut.intoRaw(e.linvel),s=a.ut.intoRaw(e.centerOfMass),_=a.ut.intoRaw(e.angvel),l=a.ut.intoRaw(e.principalAngularInertia),c=a.T3.intoRaw(e.angularInertiaLocalFrame),h=this.raw.createRigidBody(e.enabled,r,i,e.gravityScale,e.mass,e.massOnly,s,n,_,l,c,e.translationsEnabledX,e.translationsEnabledY,e.translationsEnabledZ,e.rotationsEnabledX,e.rotationsEnabledY,e.rotationsEnabledZ,e.linearDamping,e.angularDamping,e.status,e.canSleep,e.sleeping,e.ccdEnabled,e.dominanceGroup,e.additionalSolverIterations);r.free(),i.free(),n.free(),s.free(),_.free(),l.free(),c.free();const w=new o.ib(this.raw,t,h);return w.userData=e.userData,this.map.set(h,w),w}remove(t,e,r,i,n){for(let e=0;e<this.raw.rbNumColliders(t);e+=1)r.unmap(this.raw.rbCollider(t,e));i.forEachJointHandleAttachedToRigidBody(t,(t=>i.unmap(t))),n.forEachJointHandleAttachedToRigidBody(t,(t=>n.unmap(t))),this.raw.remove(t,e.raw,r.raw,i.raw,n.raw),this.map.delete(t)}len(){return this.map.len()}contains(t){return null!=this.get(t)}get(t){return this.map.get(t)}forEach(t){this.map.forEach(t)}forEachActiveRigidBody(t,e){t.forEachActiveRigidBodyHandle((t=>{e(this.get(t))}))}getAll(){return this.map.getAll()}}i()}catch(t){i(t)}}))},5535:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.r(e),r.d(e,{ActiveCollisionTypes:()=>o.vq,ActiveEvents:()=>_.Md,ActiveHooks:()=>_.iX,Ball:()=>o.ec,BroadPhase:()=>o.NT,CCDSolver:()=>a.Kd,Capsule:()=>o.sw,CharacterCollision:()=>l._i,CoefficientCombineRule:()=>a.jK,Collider:()=>o.YM,ColliderDesc:()=>o.ic,ColliderSet:()=>o.zY,Cone:()=>o.Qq,ConvexPolyhedron:()=>o.YD,Cuboid:()=>o.jv,Cylinder:()=>o.Ab,DebugRenderBuffers:()=>_.tt,DebugRenderPipeline:()=>_.kh,DynamicRayCastVehicleController:()=>l.SX,EventQueue:()=>_.NH,FeatureType:()=>o.Te,FixedImpulseJoint:()=>a.JW,FixedMultibodyJoint:()=>a.UW,GenericImpulseJoint:()=>a.TV,HalfSpace:()=>o.Fr,Heightfield:()=>o.f4,ImpulseJoint:()=>a.s2,ImpulseJointSet:()=>a.lX,IntegrationParameters:()=>a.RT,IslandManager:()=>a.yB,JointAxesMask:()=>a.ME,JointData:()=>a._h,JointType:()=>a.dl,KinematicCharacterController:()=>l.mI,MassPropsMode:()=>o.uV,MotorModel:()=>a.Vt,MultibodyJoint:()=>a.yf,MultibodyJointSet:()=>a.h1,NarrowPhase:()=>o.L4,PhysicsPipeline:()=>_.DJ,PointColliderProjection:()=>o.Vl,PointProjection:()=>o.FP,Polyline:()=>o.aH,PrismaticImpulseJoint:()=>a.eZ,PrismaticMultibodyJoint:()=>a.jp,Quaternion:()=>s._f,QueryFilterFlags:()=>_._m,QueryPipeline:()=>_.Vq,Ray:()=>o.zH,RayColliderIntersection:()=>o.No,RayColliderToi:()=>o.cu,RayIntersection:()=>o.Gz,RevoluteImpulseJoint:()=>a.au,RevoluteMultibodyJoint:()=>a.Am,RigidBody:()=>a.ib,RigidBodyDesc:()=>a.xr,RigidBodySet:()=>a.rF,RigidBodyType:()=>a.Jj,RopeImpulseJoint:()=>a.Pf,RotationOps:()=>s.T3,RoundCone:()=>o.eT,RoundConvexPolyhedron:()=>o.Ch,RoundCuboid:()=>o.iA,RoundCylinder:()=>o.$t,RoundTriangle:()=>o.$R,SdpMatrix3:()=>s.w4,SdpMatrix3Ops:()=>s.PR,Segment:()=>o.XX,SerializationPipeline:()=>_.y9,Shape:()=>o.bn,ShapeColliderTOI:()=>o.mB,ShapeContact:()=>o.Qi,ShapeTOI:()=>o.GJ,ShapeType:()=>o.DY,SolverFlags:()=>_.Nv,SphericalImpulseJoint:()=>a.VH,SphericalMultibodyJoint:()=>a.dx,SpringImpulseJoint:()=>a.T9,TempContactForceEvent:()=>_.qV,TempContactManifold:()=>o.eL,TriMesh:()=>o.az,Triangle:()=>o.CJ,UnitImpulseJoint:()=>a.C1,UnitMultibodyJoint:()=>a.wI,Vector3:()=>s.P,VectorOps:()=>s.ut,World:()=>_.q3,version:()=>h});var n=r(9458),s=r(3750),a=r(8275),o=r(939),_=r(1782),l=r(1970),c=t([n,s,a,o,_,l]);function h(){return(0,n.i8)()}[n,s,a,o,_,l]=c.then?(await c)():c,i()}catch(w){i(w)}}))},1313:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{N:()=>a});var n=r(9458),s=t([n]);n=(s.then?(await s)():s)[0];class a{constructor(t){this.raw=t||new n.FU}free(){this.raw&&this.raw.free(),this.raw=void 0}}i()}catch(t){i(t)}}))},4951:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{YM:()=>b,ic:()=>g,uV:()=>s,vq:()=>n});var n,s,a=r(3750),o=r(3992),_=r(4900),l=r(818),c=r(3869),h=r(4360),w=r(5222),d=r(9516),p=r(2141),u=t([c,a,w,d,p,h,_]);[c,a,w,d,p,h,_]=u.then?(await u)():u,function(t){t[t.DYNAMIC_DYNAMIC=1]="DYNAMIC_DYNAMIC",t[t.DYNAMIC_KINEMATIC=12]="DYNAMIC_KINEMATIC",t[t.DYNAMIC_FIXED=2]="DYNAMIC_FIXED",t[t.KINEMATIC_KINEMATIC=52224]="KINEMATIC_KINEMATIC",t[t.KINEMATIC_FIXED=8704]="KINEMATIC_FIXED",t[t.FIXED_FIXED=32]="FIXED_FIXED",t[t.DEFAULT=15]="DEFAULT",t[t.ALL=60943]="ALL"}(n||(n={}));class b{constructor(t,e,r,i){this.colliderSet=t,this.handle=e,this._parent=r,this._shape=i}finalizeDeserialization(t){null!=this.handle&&(this._parent=t.get(this.colliderSet.raw.coParent(this.handle)))}ensureShapeIsCached(){this._shape||(this._shape=c.bn.fromRaw(this.colliderSet.raw,this.handle))}get shape(){return this.ensureShapeIsCached(),this._shape}isValid(){return this.colliderSet.raw.contains(this.handle)}translation(){return a.ut.fromRaw(this.colliderSet.raw.coTranslation(this.handle))}rotation(){return a.T3.fromRaw(this.colliderSet.raw.coRotation(this.handle))}isSensor(){return this.colliderSet.raw.coIsSensor(this.handle)}setSensor(t){this.colliderSet.raw.coSetSensor(this.handle,t)}setShape(t){let e=t.intoRaw();this.colliderSet.raw.coSetShape(this.handle,e),e.free(),this._shape=t}setEnabled(t){this.colliderSet.raw.coSetEnabled(this.handle,t)}isEnabled(){return this.colliderSet.raw.coIsEnabled(this.handle)}setRestitution(t){this.colliderSet.raw.coSetRestitution(this.handle,t)}setFriction(t){this.colliderSet.raw.coSetFriction(this.handle,t)}frictionCombineRule(){return this.colliderSet.raw.coFrictionCombineRule(this.handle)}setFrictionCombineRule(t){this.colliderSet.raw.coSetFrictionCombineRule(this.handle,t)}restitutionCombineRule(){return this.colliderSet.raw.coRestitutionCombineRule(this.handle)}setRestitutionCombineRule(t){this.colliderSet.raw.coSetRestitutionCombineRule(this.handle,t)}setCollisionGroups(t){this.colliderSet.raw.coSetCollisionGroups(this.handle,t)}setSolverGroups(t){this.colliderSet.raw.coSetSolverGroups(this.handle,t)}activeHooks(){return this.colliderSet.raw.coActiveHooks(this.handle)}setActiveHooks(t){this.colliderSet.raw.coSetActiveHooks(this.handle,t)}activeEvents(){return this.colliderSet.raw.coActiveEvents(this.handle)}setActiveEvents(t){this.colliderSet.raw.coSetActiveEvents(this.handle,t)}activeCollisionTypes(){return this.colliderSet.raw.coActiveCollisionTypes(this.handle)}setContactForceEventThreshold(t){return this.colliderSet.raw.coSetContactForceEventThreshold(this.handle,t)}contactForceEventThreshold(){return this.colliderSet.raw.coContactForceEventThreshold(this.handle)}setActiveCollisionTypes(t){this.colliderSet.raw.coSetActiveCollisionTypes(this.handle,t)}setDensity(t){this.colliderSet.raw.coSetDensity(this.handle,t)}setMass(t){this.colliderSet.raw.coSetMass(this.handle,t)}setMassProperties(t,e,r,i){let n=a.ut.intoRaw(e),s=a.ut.intoRaw(r),o=a.T3.intoRaw(i);this.colliderSet.raw.coSetMassProperties(this.handle,t,n,s,o),n.free(),s.free(),o.free()}setTranslation(t){this.colliderSet.raw.coSetTranslation(this.handle,t.x,t.y,t.z)}setTranslationWrtParent(t){this.colliderSet.raw.coSetTranslationWrtParent(this.handle,t.x,t.y,t.z)}setRotation(t){this.colliderSet.raw.coSetRotation(this.handle,t.x,t.y,t.z,t.w)}setRotationWrtParent(t){this.colliderSet.raw.coSetRotationWrtParent(this.handle,t.x,t.y,t.z,t.w)}shapeType(){return this.colliderSet.raw.coShapeType(this.handle)}halfExtents(){return a.ut.fromRaw(this.colliderSet.raw.coHalfExtents(this.handle))}setHalfExtents(t){const e=a.ut.intoRaw(t);this.colliderSet.raw.coSetHalfExtents(this.handle,e)}radius(){return this.colliderSet.raw.coRadius(this.handle)}setRadius(t){this.colliderSet.raw.coSetRadius(this.handle,t)}roundRadius(){return this.colliderSet.raw.coRoundRadius(this.handle)}setRoundRadius(t){this.colliderSet.raw.coSetRoundRadius(this.handle,t)}halfHeight(){return this.colliderSet.raw.coHalfHeight(this.handle)}setHalfHeight(t){this.colliderSet.raw.coSetHalfHeight(this.handle,t)}vertices(){return this.colliderSet.raw.coVertices(this.handle)}indices(){return this.colliderSet.raw.coIndices(this.handle)}heightfieldHeights(){return this.colliderSet.raw.coHeightfieldHeights(this.handle)}heightfieldScale(){let t=this.colliderSet.raw.coHeightfieldScale(this.handle);return a.ut.fromRaw(t)}heightfieldNRows(){return this.colliderSet.raw.coHeightfieldNRows(this.handle)}heightfieldNCols(){return this.colliderSet.raw.coHeightfieldNCols(this.handle)}parent(){return this._parent}friction(){return this.colliderSet.raw.coFriction(this.handle)}restitution(){return this.colliderSet.raw.coRestitution(this.handle)}density(){return this.colliderSet.raw.coDensity(this.handle)}mass(){return this.colliderSet.raw.coMass(this.handle)}volume(){return this.colliderSet.raw.coVolume(this.handle)}collisionGroups(){return this.colliderSet.raw.coCollisionGroups(this.handle)}solverGroups(){return this.colliderSet.raw.coSolverGroups(this.handle)}containsPoint(t){let e=a.ut.intoRaw(t),r=this.colliderSet.raw.coContainsPoint(this.handle,e);return e.free(),r}projectPoint(t,e){let r=a.ut.intoRaw(t),i=w.F.fromRaw(this.colliderSet.raw.coProjectPoint(this.handle,r,e));return r.free(),i}intersectsRay(t,e){let r=a.ut.intoRaw(t.origin),i=a.ut.intoRaw(t.dir),n=this.colliderSet.raw.coIntersectsRay(this.handle,r,i,e);return r.free(),i.free(),n}castShape(t,e,r,i,n,s,o){let _=a.ut.intoRaw(t),l=a.ut.intoRaw(r),c=a.T3.intoRaw(i),h=a.ut.intoRaw(n),w=e.intoRaw(),p=d.G.fromRaw(this.colliderSet,this.colliderSet.raw.coCastShape(this.handle,_,w,l,c,h,s,o));return _.free(),l.free(),c.free(),h.free(),w.free(),p}castCollider(t,e,r,i,n){let s=a.ut.intoRaw(t),o=a.ut.intoRaw(r),_=d.m.fromRaw(this.colliderSet,this.colliderSet.raw.coCastCollider(this.handle,s,e.handle,o,i,n));return s.free(),o.free(),_}intersectsShape(t,e,r){let i=a.ut.intoRaw(e),n=a.T3.intoRaw(r),s=t.intoRaw(),o=this.colliderSet.raw.coIntersectsShape(this.handle,s,i,n);return i.free(),n.free(),s.free(),o}contactShape(t,e,r,i){let n=a.ut.intoRaw(e),s=a.T3.intoRaw(r),o=t.intoRaw(),_=p.Q.fromRaw(this.colliderSet.raw.coContactShape(this.handle,o,n,s,i));return n.free(),s.free(),o.free(),_}contactCollider(t,e){return p.Q.fromRaw(this.colliderSet.raw.coContactCollider(this.handle,t.handle,e))}castRay(t,e,r){let i=a.ut.intoRaw(t.origin),n=a.ut.intoRaw(t.dir),s=this.colliderSet.raw.coCastRay(this.handle,i,n,e,r);return i.free(),n.free(),s}castRayAndGetNormal(t,e,r){let i=a.ut.intoRaw(t.origin),n=a.ut.intoRaw(t.dir),s=h.Gz.fromRaw(this.colliderSet.raw.coCastRayAndGetNormal(this.handle,i,n,e,r));return i.free(),n.free(),s}}!function(t){t[t.Density=0]="Density",t[t.Mass=1]="Mass",t[t.MassProps=2]="MassProps"}(s||(s={}));class g{constructor(t){this.enabled=!0,this.shape=t,this.massPropsMode=s.Density,this.density=1,this.friction=.5,this.restitution=0,this.rotation=a.T3.identity(),this.translation=a.ut.zeros(),this.isSensor=!1,this.collisionGroups=4294967295,this.solverGroups=4294967295,this.frictionCombineRule=o.j.Average,this.restitutionCombineRule=o.j.Average,this.activeCollisionTypes=n.DEFAULT,this.activeEvents=_.Md.NONE,this.activeHooks=l.i.NONE,this.mass=0,this.centerOfMass=a.ut.zeros(),this.contactForceEventThreshold=0,this.principalAngularInertia=a.ut.zeros(),this.angularInertiaLocalFrame=a.T3.identity()}static ball(t){const e=new c.ec(t);return new g(e)}static capsule(t,e){const r=new c.sw(t,e);return new g(r)}static segment(t,e){const r=new c.XX(t,e);return new g(r)}static triangle(t,e,r){const i=new c.CJ(t,e,r);return new g(i)}static roundTriangle(t,e,r,i){const n=new c.$R(t,e,r,i);return new g(n)}static polyline(t,e){const r=new c.aH(t,e);return new g(r)}static trimesh(t,e){const r=new c.az(t,e);return new g(r)}static cuboid(t,e,r){const i=new c.jv(t,e,r);return new g(i)}static roundCuboid(t,e,r,i){const n=new c.iA(t,e,r,i);return new g(n)}static heightfield(t,e,r,i){const n=new c.f4(t,e,r,i);return new g(n)}static cylinder(t,e){const r=new c.Ab(t,e);return new g(r)}static roundCylinder(t,e,r){const i=new c.$t(t,e,r);return new g(i)}static cone(t,e){const r=new c.Qq(t,e);return new g(r)}static roundCone(t,e,r){const i=new c.eT(t,e,r);return new g(i)}static convexHull(t){const e=new c.YD(t,null);return new g(e)}static convexMesh(t,e){const r=new c.YD(t,e);return new g(r)}static roundConvexHull(t,e){const r=new c.Ch(t,null,e);return new g(r)}static roundConvexMesh(t,e,r){const i=new c.Ch(t,e,r);return new g(i)}setTranslation(t,e,r){if("number"!=typeof t||"number"!=typeof e||"number"!=typeof r)throw TypeError("The translation components must be numbers.");return this.translation={x:t,y:e,z:r},this}setRotation(t){return a.T3.copy(this.rotation,t),this}setSensor(t){return this.isSensor=t,this}setEnabled(t){return this.enabled=t,this}setDensity(t){return this.massPropsMode=s.Density,this.density=t,this}setMass(t){return this.massPropsMode=s.Mass,this.mass=t,this}setMassProperties(t,e,r,i){return this.massPropsMode=s.MassProps,this.mass=t,a.ut.copy(this.centerOfMass,e),a.ut.copy(this.principalAngularInertia,r),a.T3.copy(this.angularInertiaLocalFrame,i),this}setRestitution(t){return this.restitution=t,this}setFriction(t){return this.friction=t,this}setFrictionCombineRule(t){return this.frictionCombineRule=t,this}setRestitutionCombineRule(t){return this.restitutionCombineRule=t,this}setCollisionGroups(t){return this.collisionGroups=t,this}setSolverGroups(t){return this.solverGroups=t,this}setActiveHooks(t){return this.activeHooks=t,this}setActiveEvents(t){return this.activeEvents=t,this}setActiveCollisionTypes(t){return this.activeCollisionTypes=t,this}setContactForceEventThreshold(t){return this.contactForceEventThreshold=t,this}}i()}catch(t){i(t)}}))},2324:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{z:()=>l});var n=r(9458),s=r(3390),a=r(3750),o=r(4951),_=t([n,o,a]);[n,o,a]=_.then?(await _)():_;class l{constructor(t){this.raw=t||new n.IQ,this.map=new s.F,t&&t.forEachColliderHandle((t=>{this.map.set(t,new o.YM(this,t,null))}))}free(){this.raw&&this.raw.free(),this.raw=void 0,this.map&&this.map.clear(),this.map=void 0}castClosure(t){return e=>t?t(this.get(e)):void 0}finalizeDeserialization(t){this.map.forEach((e=>e.finalizeDeserialization(t)))}createCollider(t,e,r){let i=null!=r&&null!=r;if(i&&isNaN(r))throw Error("Cannot create a collider with a parent rigid-body handle that is not a number.");let n=e.shape.intoRaw(),s=a.ut.intoRaw(e.translation),_=a.T3.intoRaw(e.rotation),l=a.ut.intoRaw(e.centerOfMass),c=a.ut.intoRaw(e.principalAngularInertia),h=a.T3.intoRaw(e.angularInertiaLocalFrame),w=this.raw.createCollider(e.enabled,n,s,_,e.massPropsMode,e.mass,l,c,h,e.density,e.friction,e.restitution,e.frictionCombineRule,e.restitutionCombineRule,e.isSensor,e.collisionGroups,e.solverGroups,e.activeCollisionTypes,e.activeHooks,e.activeEvents,e.contactForceEventThreshold,i,i?r:0,t.raw);n.free(),s.free(),_.free(),l.free(),c.free(),h.free();let d=i?t.get(r):null,p=new o.YM(this,w,d,e.shape);return this.map.set(w,p),p}remove(t,e,r,i){this.raw.remove(t,e.raw,r.raw,i),this.unmap(t)}unmap(t){this.map.delete(t)}get(t){return this.map.get(t)}len(){return this.map.len()}contains(t){return null!=this.get(t)}forEach(t){this.map.forEach(t)}getAll(){return this.map.getAll()}}i()}catch(t){i(t)}}))},2141:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{Q:()=>a});var n=r(3750),s=t([n]);n=(s.then?(await s)():s)[0];class a{constructor(t,e,r,i,n){this.distance=t,this.point1=e,this.point2=r,this.normal1=i,this.normal2=n}static fromRaw(t){if(!t)return null;const e=new a(t.distance(),n.ut.fromRaw(t.point1()),n.ut.fromRaw(t.point2()),n.ut.fromRaw(t.normal1()),n.ut.fromRaw(t.normal2()));return t.free(),e}}i()}catch(t){i(t)}}))},5614:(t,e,r)=>{var i;r.d(e,{T:()=>i}),function(t){t[t.Vertex=0]="Vertex",t[t.Edge=1]="Edge",t[t.Face=2]="Face",t[t.Unknown=3]="Unknown"}(i||(i={}))},939:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{$R:()=>a.$R,$t:()=>a.$t,Ab:()=>a.Ab,CJ:()=>a.CJ,Ch:()=>a.Ch,DY:()=>a.DY,FP:()=>h.F,Fr:()=>a.Fr,GJ:()=>w.G,Gz:()=>c.Gz,L4:()=>s.L,NT:()=>n.N,No:()=>c.No,Qi:()=>d.Q,Qq:()=>a.Qq,Te:()=>l.T,Vl:()=>h.V,XX:()=>a.XX,YD:()=>a.YD,YM:()=>o.YM,aH:()=>a.aH,az:()=>a.az,bn:()=>a.bn,cu:()=>c.cu,eL:()=>s.e,eT:()=>a.eT,ec:()=>a.ec,f4:()=>a.f4,iA:()=>a.iA,ic:()=>o.ic,jv:()=>a.jv,mB:()=>w.m,sw:()=>a.sw,uV:()=>o.uV,vq:()=>o.vq,zH:()=>c.zH,zY:()=>_.z});var n=r(1313),s=r(7804),a=r(3869),o=r(4951),_=r(2324),l=r(5614),c=r(4360),h=r(5222),w=r(9516),d=r(2141),p=t([n,s,a,o,_,c,h,w,d]);[n,s,a,o,_,c,h,w,d]=p.then?(await p)():p,i()}catch(t){i(t)}}))},7804:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{L:()=>o,e:()=>_});var n=r(9458),s=r(3750),a=t([n,s]);[n,s]=a.then?(await a)():a;class o{constructor(t){this.raw=t||new n.uU,this.tempManifold=new _(null)}free(){this.raw&&this.raw.free(),this.raw=void 0}contactPairsWith(t,e){this.raw.contact_pairs_with(t,e)}intersectionPairsWith(t,e){this.raw.intersection_pairs_with(t,e)}contactPair(t,e,r){const i=this.raw.contact_pair(t,e);if(i){const e=i.collider1()!=t;let n;for(n=0;n<i.numContactManifolds();++n)this.tempManifold.raw=i.contactManifold(n),this.tempManifold.raw&&r(this.tempManifold,e),this.tempManifold.free();i.free()}}intersectionPair(t,e){return this.raw.intersection_pair(t,e)}}class _{constructor(t){this.raw=t}free(){this.raw&&this.raw.free(),this.raw=void 0}normal(){return s.ut.fromRaw(this.raw.normal())}localNormal1(){return s.ut.fromRaw(this.raw.local_n1())}localNormal2(){return s.ut.fromRaw(this.raw.local_n2())}subshape1(){return this.raw.subshape1()}subshape2(){return this.raw.subshape2()}numContacts(){return this.raw.num_contacts()}localContactPoint1(t){return s.ut.fromRaw(this.raw.contact_local_p1(t))}localContactPoint2(t){return s.ut.fromRaw(this.raw.contact_local_p2(t))}contactDist(t){return this.raw.contact_dist(t)}contactFid1(t){return this.raw.contact_fid1(t)}contactFid2(t){return this.raw.contact_fid2(t)}contactImpulse(t){return this.raw.contact_impulse(t)}contactTangentImpulseX(t){return this.raw.contact_tangent_impulse_x(t)}contactTangentImpulseY(t){return this.raw.contact_tangent_impulse_y(t)}numSolverContacts(){return this.raw.num_solver_contacts()}solverContactPoint(t){return s.ut.fromRaw(this.raw.solver_contact_point(t))}solverContactDist(t){return this.raw.solver_contact_dist(t)}solverContactFriction(t){return this.raw.solver_contact_friction(t)}solverContactRestitution(t){return this.raw.solver_contact_restitution(t)}solverContactTangentVelocity(t){return s.ut.fromRaw(this.raw.solver_contact_tangent_velocity(t))}}i()}catch(t){i(t)}}))},5222:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{F:()=>o,V:()=>_});var n=r(3750),s=r(5614),a=t([n]);n=(a.then?(await a)():a)[0];class o{constructor(t,e){this.point=t,this.isInside=e}static fromRaw(t){if(!t)return null;const e=new o(n.ut.fromRaw(t.point()),t.isInside());return t.free(),e}}class _{constructor(t,e,r,i,n){this.featureType=s.T.Unknown,this.featureId=void 0,this.collider=t,this.point=e,this.isInside=r,void 0!==n&&(this.featureId=n),void 0!==i&&(this.featureType=i)}static fromRaw(t,e){if(!e)return null;const r=new _(t.get(e.colliderHandle()),n.ut.fromRaw(e.point()),e.isInside(),e.featureType(),e.featureId());return e.free(),r}}i()}catch(t){i(t)}}))},4360:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{Gz:()=>_,No:()=>l,cu:()=>c,zH:()=>o});var n=r(3750),s=r(5614),a=t([n]);n=(a.then?(await a)():a)[0];class o{constructor(t,e){this.origin=t,this.dir=e}pointAt(t){return{x:this.origin.x+this.dir.x*t,y:this.origin.y+this.dir.y*t,z:this.origin.z+this.dir.z*t}}}class _{constructor(t,e,r,i){this.featureType=s.T.Unknown,this.featureId=void 0,this.toi=t,this.normal=e,void 0!==i&&(this.featureId=i),void 0!==r&&(this.featureType=r)}static fromRaw(t){if(!t)return null;const e=new _(t.toi(),n.ut.fromRaw(t.normal()),t.featureType(),t.featureId());return t.free(),e}}class l{constructor(t,e,r,i,n){this.featureType=s.T.Unknown,this.featureId=void 0,this.collider=t,this.toi=e,this.normal=r,void 0!==n&&(this.featureId=n),void 0!==i&&(this.featureType=i)}static fromRaw(t,e){if(!e)return null;const r=new l(t.get(e.colliderHandle()),e.toi(),n.ut.fromRaw(e.normal()),e.featureType(),e.featureId());return e.free(),r}}class c{constructor(t,e){this.collider=t,this.toi=e}static fromRaw(t,e){if(!e)return null;const r=new c(t.get(e.colliderHandle()),e.toi());return e.free(),r}}i()}catch(t){i(t)}}))},3869:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{$R:()=>f,$t:()=>A,Ab:()=>T,CJ:()=>m,Ch:()=>C,DY:()=>n,Fr:()=>p,Qq:()=>x,XX:()=>y,YD:()=>R,aH:()=>v,az:()=>S,bn:()=>w,eT:()=>P,ec:()=>d,f4:()=>I,iA:()=>b,jv:()=>u,sw:()=>g});var n,s=r(3750),a=r(9458),o=r(2141),_=r(5222),l=r(4360),c=r(9516),h=t([a,s,c,o,_,l]);[a,s,c,o,_,l]=h.then?(await h)():h;class w{static fromRaw(t,e){const r=t.coShapeType(e);let i,n,o,_,l,c,h;switch(r){case a.IB.Ball:return new d(t.coRadius(e));case a.IB.Cuboid:return i=t.coHalfExtents(e),new u(i.x,i.y,i.z);case a.IB.RoundCuboid:return i=t.coHalfExtents(e),n=t.coRoundRadius(e),new b(i.x,i.y,i.z,n);case a.IB.Capsule:return l=t.coHalfHeight(e),c=t.coRadius(e),new g(l,c);case a.IB.Segment:return o=t.coVertices(e),new y(s.ut.new(o[0],o[1],o[2]),s.ut.new(o[3],o[4],o[5]));case a.IB.Polyline:return o=t.coVertices(e),_=t.coIndices(e),new v(o,_);case a.IB.Triangle:return o=t.coVertices(e),new m(s.ut.new(o[0],o[1],o[2]),s.ut.new(o[3],o[4],o[5]),s.ut.new(o[6],o[7],o[8]));case a.IB.RoundTriangle:return o=t.coVertices(e),n=t.coRoundRadius(e),new f(s.ut.new(o[0],o[1],o[2]),s.ut.new(o[3],o[4],o[5]),s.ut.new(o[6],o[7],o[8]),n);case a.IB.HalfSpace:return h=s.ut.fromRaw(t.coHalfspaceNormal(e)),new p(h);case a.IB.TriMesh:return o=t.coVertices(e),_=t.coIndices(e),new S(o,_);case a.IB.HeightField:const w=t.coHeightfieldScale(e),E=t.coHeightfieldHeights(e),M=t.coHeightfieldNRows(e),j=t.coHeightfieldNCols(e);return new I(M,j,E,w);case a.IB.ConvexPolyhedron:return o=t.coVertices(e),_=t.coIndices(e),new R(o,_);case a.IB.RoundConvexPolyhedron:return o=t.coVertices(e),_=t.coIndices(e),n=t.coRoundRadius(e),new C(o,_,n);case a.IB.Cylinder:return l=t.coHalfHeight(e),c=t.coRadius(e),new T(l,c);case a.IB.RoundCylinder:return l=t.coHalfHeight(e),c=t.coRadius(e),n=t.coRoundRadius(e),new A(l,c,n);case a.IB.Cone:return l=t.coHalfHeight(e),c=t.coRadius(e),new x(l,c);case a.IB.RoundCone:return l=t.coHalfHeight(e),c=t.coRadius(e),n=t.coRoundRadius(e),new P(l,c,n);default:throw new Error("unknown shape type: "+r)}}castShape(t,e,r,i,n,a,o,_,l){let h=s.ut.intoRaw(t),w=s.T3.intoRaw(e),d=s.ut.intoRaw(r),p=s.ut.intoRaw(n),u=s.T3.intoRaw(a),b=s.ut.intoRaw(o),g=this.intoRaw(),y=i.intoRaw(),m=c.G.fromRaw(null,g.castShape(h,w,d,y,p,u,b,_,l));return h.free(),w.free(),d.free(),p.free(),u.free(),b.free(),g.free(),y.free(),m}intersectsShape(t,e,r,i,n){let a=s.ut.intoRaw(t),o=s.T3.intoRaw(e),_=s.ut.intoRaw(i),l=s.T3.intoRaw(n),c=this.intoRaw(),h=r.intoRaw(),w=c.intersectsShape(a,o,h,_,l);return a.free(),o.free(),_.free(),l.free(),c.free(),h.free(),w}contactShape(t,e,r,i,n,a){let _=s.ut.intoRaw(t),l=s.T3.intoRaw(e),c=s.ut.intoRaw(i),h=s.T3.intoRaw(n),w=this.intoRaw(),d=r.intoRaw(),p=o.Q.fromRaw(w.contactShape(_,l,d,c,h,a));return _.free(),l.free(),c.free(),h.free(),w.free(),d.free(),p}containsPoint(t,e,r){let i=s.ut.intoRaw(t),n=s.T3.intoRaw(e),a=s.ut.intoRaw(r),o=this.intoRaw(),_=o.containsPoint(i,n,a);return i.free(),n.free(),a.free(),o.free(),_}projectPoint(t,e,r,i){let n=s.ut.intoRaw(t),a=s.T3.intoRaw(e),o=s.ut.intoRaw(r),l=this.intoRaw(),c=_.F.fromRaw(l.projectPoint(n,a,o,i));return n.free(),a.free(),o.free(),l.free(),c}intersectsRay(t,e,r,i){let n=s.ut.intoRaw(e),a=s.T3.intoRaw(r),o=s.ut.intoRaw(t.origin),_=s.ut.intoRaw(t.dir),l=this.intoRaw(),c=l.intersectsRay(n,a,o,_,i);return n.free(),a.free(),o.free(),_.free(),l.free(),c}castRay(t,e,r,i,n){let a=s.ut.intoRaw(e),o=s.T3.intoRaw(r),_=s.ut.intoRaw(t.origin),l=s.ut.intoRaw(t.dir),c=this.intoRaw(),h=c.castRay(a,o,_,l,i,n);return a.free(),o.free(),_.free(),l.free(),c.free(),h}castRayAndGetNormal(t,e,r,i,n){let a=s.ut.intoRaw(e),o=s.T3.intoRaw(r),_=s.ut.intoRaw(t.origin),c=s.ut.intoRaw(t.dir),h=this.intoRaw(),w=l.Gz.fromRaw(h.castRayAndGetNormal(a,o,_,c,i,n));return a.free(),o.free(),_.free(),c.free(),h.free(),w}}!function(t){t[t.Ball=0]="Ball",t[t.Cuboid=1]="Cuboid",t[t.Capsule=2]="Capsule",t[t.Segment=3]="Segment",t[t.Polyline=4]="Polyline",t[t.Triangle=5]="Triangle",t[t.TriMesh=6]="TriMesh",t[t.HeightField=7]="HeightField",t[t.ConvexPolyhedron=9]="ConvexPolyhedron",t[t.Cylinder=10]="Cylinder",t[t.Cone=11]="Cone",t[t.RoundCuboid=12]="RoundCuboid",t[t.RoundTriangle=13]="RoundTriangle",t[t.RoundCylinder=14]="RoundCylinder",t[t.RoundCone=15]="RoundCone",t[t.RoundConvexPolyhedron=16]="RoundConvexPolyhedron",t[t.HalfSpace=17]="HalfSpace"}(n||(n={}));class d extends w{constructor(t){super(),this.type=n.Ball,this.radius=t}intoRaw(){return a.X7.ball(this.radius)}}class p extends w{constructor(t){super(),this.type=n.HalfSpace,this.normal=t}intoRaw(){let t=s.ut.intoRaw(this.normal),e=a.X7.halfspace(t);return t.free(),e}}class u extends w{constructor(t,e,r){super(),this.type=n.Cuboid,this.halfExtents=s.ut.new(t,e,r)}intoRaw(){return a.X7.cuboid(this.halfExtents.x,this.halfExtents.y,this.halfExtents.z)}}class b extends w{constructor(t,e,r,i){super(),this.type=n.RoundCuboid,this.halfExtents=s.ut.new(t,e,r),this.borderRadius=i}intoRaw(){return a.X7.roundCuboid(this.halfExtents.x,this.halfExtents.y,this.halfExtents.z,this.borderRadius)}}class g extends w{constructor(t,e){super(),this.type=n.Capsule,this.halfHeight=t,this.radius=e}intoRaw(){return a.X7.capsule(this.halfHeight,this.radius)}}class y extends w{constructor(t,e){super(),this.type=n.Segment,this.a=t,this.b=e}intoRaw(){let t=s.ut.intoRaw(this.a),e=s.ut.intoRaw(this.b),r=a.X7.segment(t,e);return t.free(),e.free(),r}}class m extends w{constructor(t,e,r){super(),this.type=n.Triangle,this.a=t,this.b=e,this.c=r}intoRaw(){let t=s.ut.intoRaw(this.a),e=s.ut.intoRaw(this.b),r=s.ut.intoRaw(this.c),i=a.X7.triangle(t,e,r);return t.free(),e.free(),r.free(),i}}class f extends w{constructor(t,e,r,i){super(),this.type=n.RoundTriangle,this.a=t,this.b=e,this.c=r,this.borderRadius=i}intoRaw(){let t=s.ut.intoRaw(this.a),e=s.ut.intoRaw(this.b),r=s.ut.intoRaw(this.c),i=a.X7.roundTriangle(t,e,r,this.borderRadius);return t.free(),e.free(),r.free(),i}}class v extends w{constructor(t,e){super(),this.type=n.Polyline,this.vertices=t,this.indices=null!=e?e:new Uint32Array(0)}intoRaw(){return a.X7.polyline(this.vertices,this.indices)}}class S extends w{constructor(t,e){super(),this.type=n.TriMesh,this.vertices=t,this.indices=e}intoRaw(){return a.X7.trimesh(this.vertices,this.indices)}}class R extends w{constructor(t,e){super(),this.type=n.ConvexPolyhedron,this.vertices=t,this.indices=e}intoRaw(){return this.indices?a.X7.convexMesh(this.vertices,this.indices):a.X7.convexHull(this.vertices)}}class C extends w{constructor(t,e,r){super(),this.type=n.RoundConvexPolyhedron,this.vertices=t,this.indices=e,this.borderRadius=r}intoRaw(){return this.indices?a.X7.roundConvexMesh(this.vertices,this.indices,this.borderRadius):a.X7.roundConvexHull(this.vertices,this.borderRadius)}}class I extends w{constructor(t,e,r,i){super(),this.type=n.HeightField,this.nrows=t,this.ncols=e,this.heights=r,this.scale=i}intoRaw(){let t=s.ut.intoRaw(this.scale),e=a.X7.heightfield(this.nrows,this.ncols,this.heights,t);return t.free(),e}}class T extends w{constructor(t,e){super(),this.type=n.Cylinder,this.halfHeight=t,this.radius=e}intoRaw(){return a.X7.cylinder(this.halfHeight,this.radius)}}class A extends w{constructor(t,e,r){super(),this.type=n.RoundCylinder,this.borderRadius=r,this.halfHeight=t,this.radius=e}intoRaw(){return a.X7.roundCylinder(this.halfHeight,this.radius,this.borderRadius)}}class x extends w{constructor(t,e){super(),this.type=n.Cone,this.halfHeight=t,this.radius=e}intoRaw(){return a.X7.cone(this.halfHeight,this.radius)}}class P extends w{constructor(t,e,r){super(),this.type=n.RoundCone,this.halfHeight=t,this.radius=e,this.borderRadius=r}intoRaw(){return a.X7.roundCone(this.halfHeight,this.radius,this.borderRadius)}}i()}catch(t){i(t)}}))},9516:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{G:()=>a,m:()=>o});var n=r(3750),s=t([n]);n=(s.then?(await s)():s)[0];class a{constructor(t,e,r,i,n){this.toi=t,this.witness1=e,this.witness2=r,this.normal1=i,this.normal2=n}static fromRaw(t,e){if(!e)return null;const r=new a(e.toi(),n.ut.fromRaw(e.witness1()),n.ut.fromRaw(e.witness2()),n.ut.fromRaw(e.normal1()),n.ut.fromRaw(e.normal2()));return e.free(),r}}class o extends a{constructor(t,e,r,i,n,s){super(e,r,i,n,s),this.collider=t}static fromRaw(t,e){if(!e)return null;const r=new o(t.get(e.colliderHandle()),e.toi(),n.ut.fromRaw(e.witness1()),n.ut.fromRaw(e.witness2()),n.ut.fromRaw(e.normal1()),n.ut.fromRaw(e.normal2()));return e.free(),r}}i()}catch(t){i(t)}}))},3750:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{P:()=>a,PR:()=>h,T3:()=>l,_f:()=>_,ut:()=>o,w4:()=>c});var n=r(9458),s=t([n]);n=(s.then?(await s)():s)[0];class a{constructor(t,e,r){this.x=t,this.y=e,this.z=r}}class o{static new(t,e,r){return new a(t,e,r)}static intoRaw(t){return new n.WF(t.x,t.y,t.z)}static zeros(){return o.new(0,0,0)}static fromRaw(t){if(!t)return null;let e=o.new(t.x,t.y,t.z);return t.free(),e}static copy(t,e){t.x=e.x,t.y=e.y,t.z=e.z}}class _{constructor(t,e,r,i){this.x=t,this.y=e,this.z=r,this.w=i}}class l{static identity(){return new _(0,0,0,1)}static fromRaw(t){if(!t)return null;let e=new _(t.x,t.y,t.z,t.w);return t.free(),e}static intoRaw(t){return new n.$Z(t.x,t.y,t.z,t.w)}static copy(t,e){t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w}}class c{constructor(t){this.elements=t}get m11(){return this.elements[0]}get m12(){return this.elements[1]}get m21(){return this.m12}get m13(){return this.elements[2]}get m31(){return this.m13}get m22(){return this.elements[3]}get m23(){return this.elements[4]}get m32(){return this.m23}get m33(){return this.elements[5]}}class h{static fromRaw(t){const e=new c(t.elements());return t.free(),e}}i()}catch(t){i(t)}}))},7192:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{k:()=>o,t:()=>a});var n=r(9458),s=t([n]);n=(s.then?(await s)():s)[0];class a{constructor(t,e){this.vertices=t,this.colors=e}}class o{constructor(t){this.raw=t||new n.wb}free(){this.raw&&this.raw.free(),this.raw=void 0,this.vertices=void 0,this.colors=void 0}render(t,e,r,i,n){this.raw.render(t.raw,e.raw,r.raw,i.raw,n.raw),this.vertices=this.raw.vertices(),this.colors=this.raw.colors()}}i()}catch(t){i(t)}}))},4900:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{Md:()=>n,NH:()=>l,qV:()=>_});var n,s=r(9458),a=r(3750),o=t([a,s]);[a,s]=o.then?(await o)():o,function(t){t[t.NONE=0]="NONE",t[t.COLLISION_EVENTS=1]="COLLISION_EVENTS",t[t.CONTACT_FORCE_EVENTS=2]="CONTACT_FORCE_EVENTS"}(n||(n={}));class _{free(){this.raw&&this.raw.free(),this.raw=void 0}collider1(){return this.raw.collider1()}collider2(){return this.raw.collider2()}totalForce(){return a.ut.fromRaw(this.raw.total_force())}totalForceMagnitude(){return this.raw.total_force_magnitude()}maxForceDirection(){return a.ut.fromRaw(this.raw.max_force_direction())}maxForceMagnitude(){return this.raw.max_force_magnitude()}}class l{constructor(t,e){this.raw=e||new s.we(t)}free(){this.raw&&this.raw.free(),this.raw=void 0}drainCollisionEvents(t){this.raw.drainCollisionEvents(t)}drainContactForceEvents(t){let e=new _;this.raw.drainContactForceEvents((r=>{e.raw=r,t(e),e.free()}))}clear(){this.raw.clear()}}i()}catch(t){i(t)}}))},1782:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{DJ:()=>s.D,Md:()=>o.Md,NH:()=>o.NH,Nv:()=>_.N,Vq:()=>c.V,_m:()=>c._,iX:()=>_.i,kh:()=>l.k,q3:()=>n.q,qV:()=>o.qV,tt:()=>l.t,y9:()=>a.y});var n=r(8352),s=r(5489),a=r(5047),o=r(4900),_=r(818),l=r(7192),c=r(9622),h=t([n,s,a,o,l,c]);[n,s,a,o,l,c]=h.then?(await h)():h,i()}catch(t){i(t)}}))},818:(t,e,r)=>{var i,n;r.d(e,{N:()=>n,i:()=>i}),function(t){t[t.NONE=0]="NONE",t[t.FILTER_CONTACT_PAIRS=1]="FILTER_CONTACT_PAIRS",t[t.FILTER_INTERSECTION_PAIRS=2]="FILTER_INTERSECTION_PAIRS"}(i||(i={})),function(t){t[t.EMPTY=0]="EMPTY",t[t.COMPUTE_IMPULSE=1]="COMPUTE_IMPULSE"}(n||(n={}))},5489:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{D:()=>o});var n=r(9458),s=r(3750),a=t([n,s]);[n,s]=a.then?(await a)():a;class o{constructor(t){this.raw=t||new n._q}free(){this.raw&&this.raw.free(),this.raw=void 0}step(t,e,r,i,n,a,o,_,l,c,h,w){let d=s.ut.intoRaw(t);h?this.raw.stepWithEvents(d,e.raw,r.raw,i.raw,n.raw,a.raw,o.raw,_.raw,l.raw,c.raw,h.raw,w,w?w.filterContactPair:null,w?w.filterIntersectionPair:null):this.raw.step(d,e.raw,r.raw,i.raw,n.raw,a.raw,o.raw,_.raw,l.raw,c.raw),d.free()}}i()}catch(t){i(t)}}))},9622:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{V:()=>h,_:()=>n});var n,s=r(9458),a=r(4360),o=r(5222),_=r(9516),l=r(3750),c=t([s,l,a,o,_]);[s,l,a,o,_]=c.then?(await c)():c,function(t){t[t.EXCLUDE_FIXED=1]="EXCLUDE_FIXED",t[t.EXCLUDE_KINEMATIC=2]="EXCLUDE_KINEMATIC",t[t.EXCLUDE_DYNAMIC=4]="EXCLUDE_DYNAMIC",t[t.EXCLUDE_SENSORS=8]="EXCLUDE_SENSORS",t[t.EXCLUDE_SOLIDS=16]="EXCLUDE_SOLIDS",t[t.ONLY_DYNAMIC=3]="ONLY_DYNAMIC",t[t.ONLY_KINEMATIC=5]="ONLY_KINEMATIC",t[t.ONLY_FIXED=6]="ONLY_FIXED"}(n||(n={}));class h{constructor(t){this.raw=t||new s.nv}free(){this.raw&&this.raw.free(),this.raw=void 0}update(t,e){this.raw.update(t.raw,e.raw)}castRay(t,e,r,i,n,s,o,_,c,h){let w=l.ut.intoRaw(r.origin),d=l.ut.intoRaw(r.dir),p=a.cu.fromRaw(e,this.raw.castRay(t.raw,e.raw,w,d,i,n,s,o,_,c,h));return w.free(),d.free(),p}castRayAndGetNormal(t,e,r,i,n,s,o,_,c,h){let w=l.ut.intoRaw(r.origin),d=l.ut.intoRaw(r.dir),p=a.No.fromRaw(e,this.raw.castRayAndGetNormal(t.raw,e.raw,w,d,i,n,s,o,_,c,h));return w.free(),d.free(),p}intersectionsWithRay(t,e,r,i,n,s,o,_,c,h,w){let d=l.ut.intoRaw(r.origin),p=l.ut.intoRaw(r.dir);this.raw.intersectionsWithRay(t.raw,e.raw,d,p,i,n,(t=>s(a.No.fromRaw(e,t))),o,_,c,h,w),d.free(),p.free()}intersectionWithShape(t,e,r,i,n,s,a,o,_,c){let h=l.ut.intoRaw(r),w=l.T3.intoRaw(i),d=n.intoRaw(),p=this.raw.intersectionWithShape(t.raw,e.raw,h,w,d,s,a,o,_,c);return h.free(),w.free(),d.free(),p}projectPoint(t,e,r,i,n,s,a,_,c){let h=l.ut.intoRaw(r),w=o.V.fromRaw(e,this.raw.projectPoint(t.raw,e.raw,h,i,n,s,a,_,c));return h.free(),w}projectPointAndGetFeature(t,e,r,i,n,s,a,_){let c=l.ut.intoRaw(r),h=o.V.fromRaw(e,this.raw.projectPointAndGetFeature(t.raw,e.raw,c,i,n,s,a,_));return c.free(),h}intersectionsWithPoint(t,e,r,i,n,s,a,o,_){let c=l.ut.intoRaw(r);this.raw.intersectionsWithPoint(t.raw,e.raw,c,i,n,s,a,o,_),c.free()}castShape(t,e,r,i,n,s,a,o,c,h,w,d,p){let u=l.ut.intoRaw(r),b=l.T3.intoRaw(i),g=l.ut.intoRaw(n),y=s.intoRaw(),m=_.m.fromRaw(e,this.raw.castShape(t.raw,e.raw,u,b,g,y,a,o,c,h,w,d,p));return u.free(),b.free(),g.free(),y.free(),m}intersectionsWithShape(t,e,r,i,n,s,a,o,_,c,h){let w=l.ut.intoRaw(r),d=l.T3.intoRaw(i),p=n.intoRaw();this.raw.intersectionsWithShape(t.raw,e.raw,w,d,p,s,a,o,_,c,h),w.free(),d.free(),p.free()}collidersWithAabbIntersectingAabb(t,e,r){let i=l.ut.intoRaw(t),n=l.ut.intoRaw(e);this.raw.collidersWithAabbIntersectingAabb(i,n,r),i.free(),n.free()}}i()}catch(t){i(t)}}))},5047:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{y:()=>_});var n=r(9458),s=r(3750),a=r(8352),o=t([n,s,a]);[n,s,a]=o.then?(await o)():o;class _{constructor(t){this.raw=t||new n.w0}free(){this.raw&&this.raw.free(),this.raw=void 0}serializeAll(t,e,r,i,n,a,o,_,l){let c=s.ut.intoRaw(t);const h=this.raw.serializeAll(c,e.raw,r.raw,i.raw,n.raw,a.raw,o.raw,_.raw,l.raw);return c.free(),h}deserializeAll(t){return a.q.fromRaw(this.raw.deserializeAll(t))}}i()}catch(t){i(t)}}))},8352:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{q:()=>v});var n=r(1313),s=r(7804),a=r(2324),o=r(2815),_=r(9484),l=r(9743),c=r(7292),h=r(2681),w=r(5671),d=r(3750),p=r(5489),u=r(9622),b=r(5047),g=r(7192),y=r(1322),m=r(273),f=t([o,_,n,s,l,a,c,h,w,u,p,b,g,d,y,m]);[o,_,n,s,l,a,c,h,w,u,p,b,g,d,y,m]=f.then?(await f)():f;class v{constructor(t,e,r,i,d,y,m,f,v,S,R,C,I,T){this.gravity=t,this.integrationParameters=new o.R(e),this.islands=new _.y(r),this.broadPhase=new n.N(i),this.narrowPhase=new s.L(d),this.bodies=new l.r(y),this.colliders=new a.z(m),this.impulseJoints=new c.l(f),this.multibodyJoints=new h.h(v),this.ccdSolver=new w.K(S),this.queryPipeline=new u.V(R),this.physicsPipeline=new p.D(C),this.serializationPipeline=new b.y(I),this.debugRenderPipeline=new g.k(T),this.characterControllers=new Set,this.vehicleControllers=new Set,this.impulseJoints.finalizeDeserialization(this.bodies),this.bodies.finalizeDeserialization(this.colliders),this.colliders.finalizeDeserialization(this.bodies)}free(){this.integrationParameters.free(),this.islands.free(),this.broadPhase.free(),this.narrowPhase.free(),this.bodies.free(),this.colliders.free(),this.impulseJoints.free(),this.multibodyJoints.free(),this.ccdSolver.free(),this.queryPipeline.free(),this.physicsPipeline.free(),this.serializationPipeline.free(),this.debugRenderPipeline.free(),this.characterControllers.forEach((t=>t.free())),this.vehicleControllers.forEach((t=>t.free())),this.integrationParameters=void 0,this.islands=void 0,this.broadPhase=void 0,this.narrowPhase=void 0,this.bodies=void 0,this.colliders=void 0,this.ccdSolver=void 0,this.impulseJoints=void 0,this.multibodyJoints=void 0,this.queryPipeline=void 0,this.physicsPipeline=void 0,this.serializationPipeline=void 0,this.debugRenderPipeline=void 0,this.characterControllers=void 0,this.vehicleControllers=void 0}static fromRaw(t){return t?new v(d.ut.fromRaw(t.takeGravity()),t.takeIntegrationParameters(),t.takeIslandManager(),t.takeBroadPhase(),t.takeNarrowPhase(),t.takeBodies(),t.takeColliders(),t.takeImpulseJoints(),t.takeMultibodyJoints()):null}takeSnapshot(){return this.serializationPipeline.serializeAll(this.gravity,this.integrationParameters,this.islands,this.broadPhase,this.narrowPhase,this.bodies,this.colliders,this.impulseJoints,this.multibodyJoints)}static restoreSnapshot(t){return(new b.y).deserializeAll(t)}debugRender(){return this.debugRenderPipeline.render(this.bodies,this.colliders,this.impulseJoints,this.multibodyJoints,this.narrowPhase),new g.t(this.debugRenderPipeline.vertices,this.debugRenderPipeline.colors)}step(t,e){this.physicsPipeline.step(this.gravity,this.integrationParameters,this.islands,this.broadPhase,this.narrowPhase,this.bodies,this.colliders,this.impulseJoints,this.multibodyJoints,this.ccdSolver,t,e),this.queryPipeline.update(this.bodies,this.colliders)}propagateModifiedBodyPositionsToColliders(){this.bodies.raw.propagateModifiedBodyPositionsToColliders(this.colliders.raw)}updateSceneQueries(){this.propagateModifiedBodyPositionsToColliders(),this.queryPipeline.update(this.bodies,this.colliders)}get timestep(){return this.integrationParameters.dt}set timestep(t){this.integrationParameters.dt=t}get numSolverIterations(){return this.integrationParameters.numSolverIterations}set numSolverIterations(t){this.integrationParameters.numSolverIterations=t}get numAdditionalFrictionIterations(){return this.integrationParameters.numAdditionalFrictionIterations}set numAdditionalFrictionIterations(t){this.integrationParameters.numAdditionalFrictionIterations=t}get numInternalPgsIterations(){return this.integrationParameters.numInternalPgsIterations}set numInternalPgsIterations(t){this.integrationParameters.numInternalPgsIterations=t}switchToStandardPgsSolver(){this.integrationParameters.switchToStandardPgsSolver()}switchToSmallStepsPgsSolver(){this.integrationParameters.switchToSmallStepsPgsSolver()}createRigidBody(t){return this.bodies.createRigidBody(this.colliders,t)}createCharacterController(t){let e=new y.m(t,this.integrationParameters,this.bodies,this.colliders,this.queryPipeline);return this.characterControllers.add(e),e}removeCharacterController(t){this.characterControllers.delete(t),t.free()}createVehicleController(t){let e=new m.S(t,this.bodies,this.colliders,this.queryPipeline);return this.vehicleControllers.add(e),e}removeVehicleController(t){this.vehicleControllers.delete(t),t.free()}createCollider(t,e){let r=e?e.handle:void 0;return this.colliders.createCollider(this.bodies,t,r)}createImpulseJoint(t,e,r,i){return this.impulseJoints.createJoint(this.bodies,t,e.handle,r.handle,i)}createMultibodyJoint(t,e,r,i){return this.multibodyJoints.createJoint(t,e.handle,r.handle,i)}getRigidBody(t){return this.bodies.get(t)}getCollider(t){return this.colliders.get(t)}getImpulseJoint(t){return this.impulseJoints.get(t)}getMultibodyJoint(t){return this.multibodyJoints.get(t)}removeRigidBody(t){this.bodies&&this.bodies.remove(t.handle,this.islands,this.colliders,this.impulseJoints,this.multibodyJoints)}removeCollider(t,e){this.colliders&&this.colliders.remove(t.handle,this.islands,this.bodies,e)}removeImpulseJoint(t,e){this.impulseJoints&&this.impulseJoints.remove(t.handle,e)}removeMultibodyJoint(t,e){this.impulseJoints&&this.multibodyJoints.remove(t.handle,e)}forEachCollider(t){this.colliders.forEach(t)}forEachRigidBody(t){this.bodies.forEach(t)}forEachActiveRigidBody(t){this.bodies.forEachActiveRigidBody(this.islands,t)}castRay(t,e,r,i,n,s,a,o){return this.queryPipeline.castRay(this.bodies,this.colliders,t,e,r,i,n,s?s.handle:null,a?a.handle:null,this.colliders.castClosure(o))}castRayAndGetNormal(t,e,r,i,n,s,a,o){return this.queryPipeline.castRayAndGetNormal(this.bodies,this.colliders,t,e,r,i,n,s?s.handle:null,a?a.handle:null,this.colliders.castClosure(o))}intersectionsWithRay(t,e,r,i,n,s,a,o,_){this.queryPipeline.intersectionsWithRay(this.bodies,this.colliders,t,e,r,i,n,s,a?a.handle:null,o?o.handle:null,this.colliders.castClosure(_))}intersectionWithShape(t,e,r,i,n,s,a,o){let _=this.queryPipeline.intersectionWithShape(this.bodies,this.colliders,t,e,r,i,n,s?s.handle:null,a?a.handle:null,this.colliders.castClosure(o));return null!=_?this.colliders.get(_):null}projectPoint(t,e,r,i,n,s,a){return this.queryPipeline.projectPoint(this.bodies,this.colliders,t,e,r,i,n?n.handle:null,s?s.handle:null,this.colliders.castClosure(a))}projectPointAndGetFeature(t,e,r,i,n,s){return this.queryPipeline.projectPointAndGetFeature(this.bodies,this.colliders,t,e,r,i?i.handle:null,n?n.handle:null,this.colliders.castClosure(s))}intersectionsWithPoint(t,e,r,i,n,s,a){this.queryPipeline.intersectionsWithPoint(this.bodies,this.colliders,t,this.colliders.castClosure(e),r,i,n?n.handle:null,s?s.handle:null,this.colliders.castClosure(a))}castShape(t,e,r,i,n,s,a,o,_,l,c){return this.queryPipeline.castShape(this.bodies,this.colliders,t,e,r,i,n,s,a,o,_?_.handle:null,l?l.handle:null,this.colliders.castClosure(c))}intersectionsWithShape(t,e,r,i,n,s,a,o,_){this.queryPipeline.intersectionsWithShape(this.bodies,this.colliders,t,e,r,this.colliders.castClosure(i),n,s,a?a.handle:null,o?o.handle:null,this.colliders.castClosure(_))}collidersWithAabbIntersectingAabb(t,e,r){this.queryPipeline.collidersWithAabbIntersectingAabb(t,e,this.colliders.castClosure(r))}contactPairsWith(t,e){this.narrowPhase.contactPairsWith(t.handle,this.colliders.castClosure(e))}intersectionPairsWith(t,e){this.narrowPhase.intersectionPairsWith(t.handle,this.colliders.castClosure(e))}contactPair(t,e,r){this.narrowPhase.contactPair(t.handle,e.handle,r)}intersectionPair(t,e){return this.narrowPhase.intersectionPair(t.handle,e.handle)}}i()}catch(t){i(t)}}))},4898:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.r(e),r.d(e,{ActiveCollisionTypes:()=>n.ActiveCollisionTypes,ActiveEvents:()=>n.ActiveEvents,ActiveHooks:()=>n.ActiveHooks,Ball:()=>n.Ball,BroadPhase:()=>n.BroadPhase,CCDSolver:()=>n.CCDSolver,Capsule:()=>n.Capsule,CharacterCollision:()=>n.CharacterCollision,CoefficientCombineRule:()=>n.CoefficientCombineRule,Collider:()=>n.Collider,ColliderDesc:()=>n.ColliderDesc,ColliderSet:()=>n.ColliderSet,Cone:()=>n.Cone,ConvexPolyhedron:()=>n.ConvexPolyhedron,Cuboid:()=>n.Cuboid,Cylinder:()=>n.Cylinder,DebugRenderBuffers:()=>n.DebugRenderBuffers,DebugRenderPipeline:()=>n.DebugRenderPipeline,DynamicRayCastVehicleController:()=>n.DynamicRayCastVehicleController,EventQueue:()=>n.EventQueue,FeatureType:()=>n.FeatureType,FixedImpulseJoint:()=>n.FixedImpulseJoint,FixedMultibodyJoint:()=>n.FixedMultibodyJoint,GenericImpulseJoint:()=>n.GenericImpulseJoint,HalfSpace:()=>n.HalfSpace,Heightfield:()=>n.Heightfield,ImpulseJoint:()=>n.ImpulseJoint,ImpulseJointSet:()=>n.ImpulseJointSet,IntegrationParameters:()=>n.IntegrationParameters,IslandManager:()=>n.IslandManager,JointAxesMask:()=>n.JointAxesMask,JointData:()=>n.JointData,JointType:()=>n.JointType,KinematicCharacterController:()=>n.KinematicCharacterController,MassPropsMode:()=>n.MassPropsMode,MotorModel:()=>n.MotorModel,MultibodyJoint:()=>n.MultibodyJoint,MultibodyJointSet:()=>n.MultibodyJointSet,NarrowPhase:()=>n.NarrowPhase,PhysicsPipeline:()=>n.PhysicsPipeline,PointColliderProjection:()=>n.PointColliderProjection,PointProjection:()=>n.PointProjection,Polyline:()=>n.Polyline,PrismaticImpulseJoint:()=>n.PrismaticImpulseJoint,PrismaticMultibodyJoint:()=>n.PrismaticMultibodyJoint,Quaternion:()=>n.Quaternion,QueryFilterFlags:()=>n.QueryFilterFlags,QueryPipeline:()=>n.QueryPipeline,Ray:()=>n.Ray,RayColliderIntersection:()=>n.RayColliderIntersection,RayColliderToi:()=>n.RayColliderToi,RayIntersection:()=>n.RayIntersection,RevoluteImpulseJoint:()=>n.RevoluteImpulseJoint,RevoluteMultibodyJoint:()=>n.RevoluteMultibodyJoint,RigidBody:()=>n.RigidBody,RigidBodyDesc:()=>n.RigidBodyDesc,RigidBodySet:()=>n.RigidBodySet,RigidBodyType:()=>n.RigidBodyType,RopeImpulseJoint:()=>n.RopeImpulseJoint,RotationOps:()=>n.RotationOps,RoundCone:()=>n.RoundCone,RoundConvexPolyhedron:()=>n.RoundConvexPolyhedron,RoundCuboid:()=>n.RoundCuboid,RoundCylinder:()=>n.RoundCylinder,RoundTriangle:()=>n.RoundTriangle,SdpMatrix3:()=>n.SdpMatrix3,SdpMatrix3Ops:()=>n.SdpMatrix3Ops,Segment:()=>n.Segment,SerializationPipeline:()=>n.SerializationPipeline,Shape:()=>n.Shape,ShapeColliderTOI:()=>n.ShapeColliderTOI,ShapeContact:()=>n.ShapeContact,ShapeTOI:()=>n.ShapeTOI,ShapeType:()=>n.ShapeType,SolverFlags:()=>n.SolverFlags,SphericalImpulseJoint:()=>n.SphericalImpulseJoint,SphericalMultibodyJoint:()=>n.SphericalMultibodyJoint,SpringImpulseJoint:()=>n.SpringImpulseJoint,TempContactForceEvent:()=>n.TempContactForceEvent,TempContactManifold:()=>n.TempContactManifold,TriMesh:()=>n.TriMesh,Triangle:()=>n.Triangle,UnitImpulseJoint:()=>n.UnitImpulseJoint,UnitMultibodyJoint:()=>n.UnitMultibodyJoint,Vector3:()=>n.Vector3,VectorOps:()=>n.VectorOps,World:()=>n.World,default:()=>a,version:()=>n.version});var n=r(5535),s=t([n]);const a=n=(s.then?(await s)():s)[0];i()}catch(t){i(t)}}))},9458:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{$Z:()=>s.$Z,FU:()=>s.FU,IB:()=>s.IB,IQ:()=>s.IQ,Is:()=>s.Is,JM:()=>s.JM,JX:()=>s.JX,LE:()=>s.LE,Qc:()=>s.Qc,WF:()=>s.WF,Wx:()=>s.Wx,X7:()=>s.X7,_q:()=>s._q,cQ:()=>s.cQ,fY:()=>s.fY,fl:()=>s.fl,i8:()=>s.i8,nv:()=>s.nv,uU:()=>s.uU,vg:()=>s.vg,w0:()=>s.w0,wb:()=>s.wb,we:()=>s.we,yk:()=>s.yk,zu:()=>s.zu});var n=r(3669),s=r(7974),a=t([n]);n=(a.then?(await a)():a)[0],(0,s.oT)(n),i()}catch(t){i(t)}}))},7974:(t,e,r)=>{let i;function n(t){i=t}r.d(e,{$B:()=>ft,$Z:()=>at,FU:()=>F,H6:()=>xt,HT:()=>ut,IB:()=>j,IQ:()=>z,Is:()=>U,JM:()=>k,JX:()=>W,Ky:()=>Pt,L6:()=>jt,LE:()=>D,M1:()=>gt,Ne:()=>mt,Nl:()=>vt,Or:()=>Ft,PN:()=>St,Qc:()=>q,Qk:()=>Et,Tt:()=>Rt,WF:()=>dt,Wx:()=>H,X7:()=>lt,Zc:()=>kt,Zf:()=>It,_q:()=>Z,cQ:()=>O,e_:()=>Mt,fY:()=>st,fl:()=>K,fr:()=>Tt,i8:()=>y,nv:()=>et,o$:()=>yt,oH:()=>Dt,oT:()=>n,p7:()=>Ct,pT:()=>pt,rU:()=>At,uU:()=>Q,ug:()=>bt,vg:()=>Y,w0:()=>_t,wb:()=>L,we:()=>X,yk:()=>M,zu:()=>V}),t=r.hmd(t);const s=new Array(128).fill(void 0);s.push(void 0,null,!0,!1);let a=s.length;function o(t){a===s.length&&s.push(s.length+1);const e=a;return a=s[e],s[e]=t,e}function _(t){return s[t]}function l(t){const e=_(t);return function(t){t<132||(s[t]=a,a=t)}(t),e}function c(t){return null==t}let h=null;function w(){return null!==h&&0!==h.byteLength||(h=new Float64Array(i.memory.buffer)),h}let d=null;function p(){return null!==d&&0!==d.byteLength||(d=new Int32Array(i.memory.buffer)),d}let u=new("undefined"==typeof TextDecoder?(0,t.require)("util").TextDecoder:TextDecoder)("utf-8",{ignoreBOM:!0,fatal:!0});u.decode();let b=null;function g(t,e){return t>>>=0,u.decode((null!==b&&0!==b.byteLength||(b=new Uint8Array(i.memory.buffer)),b).subarray(t,t+e))}function y(){let t,e;try{const s=i.__wbindgen_add_to_stack_pointer(-16);i.version(s);var r=p()[s/4+0],n=p()[s/4+1];return t=r,e=n,g(r,n)}finally{i.__wbindgen_add_to_stack_pointer(16),i.__wbindgen_free(t,e,1)}}function m(t,e){if(!(t instanceof e))throw new Error(`expected instance of ${e.name}`);return t.ptr}let f=null;function v(){return null!==f&&0!==f.byteLength||(f=new Float32Array(i.memory.buffer)),f}let S=128;function R(t){if(1==S)throw new Error("out of js stack");return s[--S]=t,S}function C(t,e){return t>>>=0,v().subarray(t/4,t/4+e)}let I=null;function T(){return null!==I&&0!==I.byteLength||(I=new Uint32Array(i.memory.buffer)),I}let A=0;function x(t,e){const r=e(4*t.length,4)>>>0;return v().set(t,r/4),A=t.length,r}function P(t,e){const r=e(4*t.length,4)>>>0;return T().set(t,r/4),A=t.length,r}function E(t,e){try{return t.apply(this,e)}catch(t){i.__wbindgen_exn_store(o(t))}}const M=Object.freeze({Revolute:0,0:"Revolute",Fixed:1,1:"Fixed",Prismatic:2,2:"Prismatic",Rope:3,3:"Rope",Spring:4,4:"Spring",Spherical:5,5:"Spherical",Generic:6,6:"Generic"}),j=(Object.freeze({Vertex:0,0:"Vertex",Edge:1,1:"Edge",Face:2,2:"Face",Unknown:3,3:"Unknown"}),Object.freeze({AccelerationBased:0,0:"AccelerationBased",ForceBased:1,1:"ForceBased"}),Object.freeze({Dynamic:0,0:"Dynamic",Fixed:1,1:"Fixed",KinematicPositionBased:2,2:"KinematicPositionBased",KinematicVelocityBased:3,3:"KinematicVelocityBased"}),Object.freeze({Ball:0,0:"Ball",Cuboid:1,1:"Cuboid",Capsule:2,2:"Capsule",Segment:3,3:"Segment",Polyline:4,4:"Polyline",Triangle:5,5:"Triangle",TriMesh:6,6:"TriMesh",HeightField:7,7:"HeightField",Compound:8,8:"Compound",ConvexPolyhedron:9,9:"ConvexPolyhedron",Cylinder:10,10:"Cylinder",Cone:11,11:"Cone",RoundCuboid:12,12:"RoundCuboid",RoundTriangle:13,13:"RoundTriangle",RoundCylinder:14,14:"RoundCylinder",RoundCone:15,15:"RoundCone",RoundConvexPolyhedron:16,16:"RoundConvexPolyhedron",HalfSpace:17,17:"HalfSpace"})),k=Object.freeze({X:0,0:"X",Y:1,1:"Y",Z:2,2:"Z",AngX:3,3:"AngX",AngY:4,4:"AngY",AngZ:5,5:"AngZ"});class F{static __wrap(t){t>>>=0;const e=Object.create(F.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawbroadphase_free(t)}constructor(){const t=i.rawbroadphase_new();return this.__wbg_ptr=t>>>0,this}}class D{__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawccdsolver_free(t)}constructor(){const t=i.rawccdsolver_new();return this.__wbg_ptr=t>>>0,this}}class H{__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawcharactercollision_free(t)}constructor(){const t=i.rawcharactercollision_new();return this.__wbg_ptr=t>>>0,this}handle(){return i.rawcharactercollision_handle(this.__wbg_ptr)}translationDeltaApplied(){const t=i.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);return dt.__wrap(t)}translationDeltaRemaining(){const t=i.rawcharactercollision_translationDeltaRemaining(this.__wbg_ptr);return dt.__wrap(t)}toi(){return i.rawcharactercollision_toi(this.__wbg_ptr)}worldWitness1(){const t=i.rawcharactercollision_worldWitness1(this.__wbg_ptr);return dt.__wrap(t)}worldWitness2(){const t=i.rawcharactercollision_worldWitness2(this.__wbg_ptr);return dt.__wrap(t)}worldNormal1(){const t=i.rawcharactercollision_worldNormal1(this.__wbg_ptr);return dt.__wrap(t)}worldNormal2(){const t=i.rawcharactercollision_worldNormal2(this.__wbg_ptr);return dt.__wrap(t)}}class z{static __wrap(t){t>>>=0;const e=Object.create(z.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawcolliderset_free(t)}coTranslation(t){const e=i.rawcolliderset_coTranslation(this.__wbg_ptr,t);return dt.__wrap(e)}coRotation(t){const e=i.rawcolliderset_coRotation(this.__wbg_ptr,t);return at.__wrap(e)}coSetTranslation(t,e,r,n){i.rawcolliderset_coSetTranslation(this.__wbg_ptr,t,e,r,n)}coSetTranslationWrtParent(t,e,r,n){i.rawcolliderset_coSetTranslationWrtParent(this.__wbg_ptr,t,e,r,n)}coSetRotation(t,e,r,n,s){i.rawcolliderset_coSetRotation(this.__wbg_ptr,t,e,r,n,s)}coSetRotationWrtParent(t,e,r,n,s){i.rawcolliderset_coSetRotationWrtParent(this.__wbg_ptr,t,e,r,n,s)}coIsSensor(t){return 0!==i.rawcolliderset_coIsSensor(this.__wbg_ptr,t)}coShapeType(t){return i.rawcolliderset_coShapeType(this.__wbg_ptr,t)}coHalfspaceNormal(t){const e=i.rawcolliderset_coHalfspaceNormal(this.__wbg_ptr,t);return 0===e?void 0:dt.__wrap(e)}coHalfExtents(t){const e=i.rawcolliderset_coHalfExtents(this.__wbg_ptr,t);return 0===e?void 0:dt.__wrap(e)}coSetHalfExtents(t,e){m(e,dt),i.rawcolliderset_coSetHalfExtents(this.__wbg_ptr,t,e.__wbg_ptr)}coRadius(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawcolliderset_coRadius(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=v()[n/4+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}coSetRadius(t,e){i.rawcolliderset_coSetRadius(this.__wbg_ptr,t,e)}coHalfHeight(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawcolliderset_coHalfHeight(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=v()[n/4+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}coSetHalfHeight(t,e){i.rawcolliderset_coSetHalfHeight(this.__wbg_ptr,t,e)}coRoundRadius(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawcolliderset_coRoundRadius(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=v()[n/4+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}coSetRoundRadius(t,e){i.rawcolliderset_coSetRoundRadius(this.__wbg_ptr,t,e)}coVertices(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawcolliderset_coVertices(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=p()[n/4+1];let s;return 0!==e&&(s=C(e,r).slice(),i.__wbindgen_free(e,4*r,4)),s}finally{i.__wbindgen_add_to_stack_pointer(16)}}coIndices(t){try{const a=i.__wbindgen_add_to_stack_pointer(-16);i.rawcolliderset_coIndices(a,this.__wbg_ptr,t);var e=p()[a/4+0],r=p()[a/4+1];let o;return 0!==e&&(o=(n=e,s=r,n>>>=0,T().subarray(n/4,n/4+s)).slice(),i.__wbindgen_free(e,4*r,4)),o}finally{i.__wbindgen_add_to_stack_pointer(16)}var n,s}coHeightfieldHeights(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawcolliderset_coHeightfieldHeights(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=p()[n/4+1];let s;return 0!==e&&(s=C(e,r).slice(),i.__wbindgen_free(e,4*r,4)),s}finally{i.__wbindgen_add_to_stack_pointer(16)}}coHeightfieldScale(t){const e=i.rawcolliderset_coHeightfieldScale(this.__wbg_ptr,t);return 0===e?void 0:dt.__wrap(e)}coHeightfieldNRows(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawcolliderset_coHeightfieldNRows(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=p()[n/4+1];return 0===e?void 0:r>>>0}finally{i.__wbindgen_add_to_stack_pointer(16)}}coHeightfieldNCols(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawcolliderset_coHeightfieldNCols(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=p()[n/4+1];return 0===e?void 0:r>>>0}finally{i.__wbindgen_add_to_stack_pointer(16)}}coParent(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawcolliderset_coParent(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=w()[n/8+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}coSetEnabled(t,e){i.rawcolliderset_coSetEnabled(this.__wbg_ptr,t,e)}coIsEnabled(t){return 0!==i.rawcolliderset_coIsEnabled(this.__wbg_ptr,t)}coFriction(t){return i.rawcolliderset_coFriction(this.__wbg_ptr,t)}coRestitution(t){return i.rawcolliderset_coRestitution(this.__wbg_ptr,t)}coDensity(t){return i.rawcolliderset_coDensity(this.__wbg_ptr,t)}coMass(t){return i.rawcolliderset_coMass(this.__wbg_ptr,t)}coVolume(t){return i.rawcolliderset_coVolume(this.__wbg_ptr,t)}coCollisionGroups(t){return i.rawcolliderset_coCollisionGroups(this.__wbg_ptr,t)>>>0}coSolverGroups(t){return i.rawcolliderset_coSolverGroups(this.__wbg_ptr,t)>>>0}coActiveHooks(t){return i.rawcolliderset_coActiveHooks(this.__wbg_ptr,t)>>>0}coActiveCollisionTypes(t){return i.rawcolliderset_coActiveCollisionTypes(this.__wbg_ptr,t)}coActiveEvents(t){return i.rawcolliderset_coActiveEvents(this.__wbg_ptr,t)>>>0}coContactForceEventThreshold(t){return i.rawcolliderset_coContactForceEventThreshold(this.__wbg_ptr,t)}coContainsPoint(t,e){return m(e,dt),0!==i.rawcolliderset_coContainsPoint(this.__wbg_ptr,t,e.__wbg_ptr)}coCastShape(t,e,r,n,s,a,o,_){m(e,dt),m(r,lt),m(n,dt),m(s,at),m(a,dt);const l=i.rawcolliderset_coCastShape(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,a.__wbg_ptr,o,_);return 0===l?void 0:wt.__wrap(l)}coCastCollider(t,e,r,n,s,a){m(e,dt),m(n,dt);const o=i.rawcolliderset_coCastCollider(this.__wbg_ptr,t,e.__wbg_ptr,r,n.__wbg_ptr,s,a);return 0===o?void 0:ct.__wrap(o)}coIntersectsShape(t,e,r,n){return m(e,lt),m(r,dt),m(n,at),0!==i.rawcolliderset_coIntersectsShape(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr)}coContactShape(t,e,r,n,s){m(e,lt),m(r,dt),m(n,at);const a=i.rawcolliderset_coContactShape(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,s);return 0===a?void 0:ht.__wrap(a)}coContactCollider(t,e,r){const n=i.rawcolliderset_coContactCollider(this.__wbg_ptr,t,e,r);return 0===n?void 0:ht.__wrap(n)}coProjectPoint(t,e,r){m(e,dt);const n=i.rawcolliderset_coProjectPoint(this.__wbg_ptr,t,e.__wbg_ptr,r);return tt.__wrap(n)}coIntersectsRay(t,e,r,n){return m(e,dt),m(r,dt),0!==i.rawcolliderset_coIntersectsRay(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n)}coCastRay(t,e,r,n,s){return m(e,dt),m(r,dt),i.rawcolliderset_coCastRay(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n,s)}coCastRayAndGetNormal(t,e,r,n,s){m(e,dt),m(r,dt);const a=i.rawcolliderset_coCastRayAndGetNormal(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n,s);return 0===a?void 0:nt.__wrap(a)}coSetSensor(t,e){i.rawcolliderset_coSetSensor(this.__wbg_ptr,t,e)}coSetRestitution(t,e){i.rawcolliderset_coSetRestitution(this.__wbg_ptr,t,e)}coSetFriction(t,e){i.rawcolliderset_coSetFriction(this.__wbg_ptr,t,e)}coFrictionCombineRule(t){return i.rawcolliderset_coFrictionCombineRule(this.__wbg_ptr,t)>>>0}coSetFrictionCombineRule(t,e){i.rawcolliderset_coSetFrictionCombineRule(this.__wbg_ptr,t,e)}coRestitutionCombineRule(t){return i.rawcolliderset_coRestitutionCombineRule(this.__wbg_ptr,t)>>>0}coSetRestitutionCombineRule(t,e){i.rawcolliderset_coSetRestitutionCombineRule(this.__wbg_ptr,t,e)}coSetCollisionGroups(t,e){i.rawcolliderset_coSetCollisionGroups(this.__wbg_ptr,t,e)}coSetSolverGroups(t,e){i.rawcolliderset_coSetSolverGroups(this.__wbg_ptr,t,e)}coSetActiveHooks(t,e){i.rawcolliderset_coSetActiveHooks(this.__wbg_ptr,t,e)}coSetActiveEvents(t,e){i.rawcolliderset_coSetActiveEvents(this.__wbg_ptr,t,e)}coSetActiveCollisionTypes(t,e){i.rawcolliderset_coSetActiveCollisionTypes(this.__wbg_ptr,t,e)}coSetShape(t,e){m(e,lt),i.rawcolliderset_coSetShape(this.__wbg_ptr,t,e.__wbg_ptr)}coSetContactForceEventThreshold(t,e){i.rawcolliderset_coSetContactForceEventThreshold(this.__wbg_ptr,t,e)}coSetDensity(t,e){i.rawcolliderset_coSetDensity(this.__wbg_ptr,t,e)}coSetMass(t,e){i.rawcolliderset_coSetMass(this.__wbg_ptr,t,e)}coSetMassProperties(t,e,r,n,s){m(r,dt),m(n,dt),m(s,at),i.rawcolliderset_coSetMassProperties(this.__wbg_ptr,t,e,r.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr)}constructor(){const t=i.rawcolliderset_new();return this.__wbg_ptr=t>>>0,this}len(){return i.rawcolliderset_len(this.__wbg_ptr)>>>0}contains(t){return 0!==i.rawcolliderset_contains(this.__wbg_ptr,t)}createCollider(t,e,r,n,s,a,o,_,l,c,h,d,u,b,g,y,f,v,S,R,C,I,T,A){try{const E=i.__wbindgen_add_to_stack_pointer(-16);m(e,lt),m(r,dt),m(n,at),m(o,dt),m(_,dt),m(l,at),m(A,st),i.rawcolliderset_createCollider(E,this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,s,a,o.__wbg_ptr,_.__wbg_ptr,l.__wbg_ptr,c,h,d,u,b,g,y,f,v,S,R,C,I,T,A.__wbg_ptr);var x=p()[E/4+0],P=w()[E/8+1];return 0===x?void 0:P}finally{i.__wbindgen_add_to_stack_pointer(16)}}remove(t,e,r,n){m(e,U),m(r,st),i.rawcolliderset_remove(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n)}isHandleValid(t){return 0!==i.rawcolliderset_contains(this.__wbg_ptr,t)}forEachColliderHandle(t){try{i.rawcolliderset_forEachColliderHandle(this.__wbg_ptr,R(t))}finally{s[S++]=void 0}}}class J{static __wrap(t){t>>>=0;const e=Object.create(J.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawcontactforceevent_free(t)}collider1(){return i.rawcharactercollision_handle(this.__wbg_ptr)}collider2(){return i.rawcontactforceevent_collider2(this.__wbg_ptr)}total_force(){const t=i.rawcontactforceevent_total_force(this.__wbg_ptr);return dt.__wrap(t)}total_force_magnitude(){return i.rawcontactforceevent_total_force_magnitude(this.__wbg_ptr)}max_force_direction(){const t=i.rawcontactforceevent_max_force_direction(this.__wbg_ptr);return dt.__wrap(t)}max_force_magnitude(){return i.rawcontactforceevent_max_force_magnitude(this.__wbg_ptr)}}class N{static __wrap(t){t>>>=0;const e=Object.create(N.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawcontactmanifold_free(t)}normal(){const t=i.rawcontactmanifold_normal(this.__wbg_ptr);return dt.__wrap(t)}local_n1(){const t=i.rawcontactmanifold_local_n1(this.__wbg_ptr);return dt.__wrap(t)}local_n2(){const t=i.rawcontactmanifold_local_n2(this.__wbg_ptr);return dt.__wrap(t)}subshape1(){return i.rawcontactmanifold_subshape1(this.__wbg_ptr)>>>0}subshape2(){return i.rawcontactmanifold_subshape2(this.__wbg_ptr)>>>0}num_contacts(){return i.rawcontactmanifold_num_contacts(this.__wbg_ptr)>>>0}contact_local_p1(t){const e=i.rawcontactmanifold_contact_local_p1(this.__wbg_ptr,t);return 0===e?void 0:dt.__wrap(e)}contact_local_p2(t){const e=i.rawcontactmanifold_contact_local_p2(this.__wbg_ptr,t);return 0===e?void 0:dt.__wrap(e)}contact_dist(t){return i.rawcontactmanifold_contact_dist(this.__wbg_ptr,t)}contact_fid1(t){return i.rawcontactmanifold_contact_fid1(this.__wbg_ptr,t)>>>0}contact_fid2(t){return i.rawcontactmanifold_contact_fid2(this.__wbg_ptr,t)>>>0}contact_impulse(t){return i.rawcontactmanifold_contact_impulse(this.__wbg_ptr,t)}contact_tangent_impulse_x(t){return i.rawcontactmanifold_contact_tangent_impulse_x(this.__wbg_ptr,t)}contact_tangent_impulse_y(t){return i.rawcontactmanifold_contact_tangent_impulse_y(this.__wbg_ptr,t)}num_solver_contacts(){return i.rawcontactmanifold_num_solver_contacts(this.__wbg_ptr)>>>0}solver_contact_point(t){const e=i.rawcontactmanifold_solver_contact_point(this.__wbg_ptr,t);return 0===e?void 0:dt.__wrap(e)}solver_contact_dist(t){return i.rawcontactmanifold_solver_contact_dist(this.__wbg_ptr,t)}solver_contact_friction(t){return i.rawcontactmanifold_solver_contact_friction(this.__wbg_ptr,t)}solver_contact_restitution(t){return i.rawcontactmanifold_solver_contact_restitution(this.__wbg_ptr,t)}solver_contact_tangent_velocity(t){const e=i.rawcontactmanifold_solver_contact_tangent_velocity(this.__wbg_ptr,t);return dt.__wrap(e)}}class B{static __wrap(t){t>>>=0;const e=Object.create(B.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawcontactpair_free(t)}collider1(){return i.rawcontactpair_collider1(this.__wbg_ptr)}collider2(){return i.rawcontactpair_collider2(this.__wbg_ptr)}numContactManifolds(){return i.rawcontactpair_numContactManifolds(this.__wbg_ptr)>>>0}contactManifold(t){const e=i.rawcontactpair_contactManifold(this.__wbg_ptr,t);return 0===e?void 0:N.__wrap(e)}}class L{__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawdebugrenderpipeline_free(t)}constructor(){const t=i.rawdebugrenderpipeline_new();return this.__wbg_ptr=t>>>0,this}vertices(){return l(i.rawdebugrenderpipeline_vertices(this.__wbg_ptr))}colors(){return l(i.rawdebugrenderpipeline_colors(this.__wbg_ptr))}render(t,e,r,n,s){m(t,st),m(e,z),m(r,q),m(n,K),m(s,Q),i.rawdebugrenderpipeline_render(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr)}}class G{static __wrap(t){t>>>=0;const e=Object.create(G.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawdeserializedworld_free(t)}takeGravity(){const t=i.rawdeserializedworld_takeGravity(this.__wbg_ptr);return 0===t?void 0:dt.__wrap(t)}takeIntegrationParameters(){const t=i.rawdeserializedworld_takeIntegrationParameters(this.__wbg_ptr);return 0===t?void 0:V.__wrap(t)}takeIslandManager(){const t=i.rawdeserializedworld_takeIslandManager(this.__wbg_ptr);return 0===t?void 0:U.__wrap(t)}takeBroadPhase(){const t=i.rawdeserializedworld_takeBroadPhase(this.__wbg_ptr);return 0===t?void 0:F.__wrap(t)}takeNarrowPhase(){const t=i.rawdeserializedworld_takeNarrowPhase(this.__wbg_ptr);return 0===t?void 0:Q.__wrap(t)}takeBodies(){const t=i.rawdeserializedworld_takeBodies(this.__wbg_ptr);return 0===t?void 0:st.__wrap(t)}takeColliders(){const t=i.rawdeserializedworld_takeColliders(this.__wbg_ptr);return 0===t?void 0:z.__wrap(t)}takeImpulseJoints(){const t=i.rawdeserializedworld_takeImpulseJoints(this.__wbg_ptr);return 0===t?void 0:q.__wrap(t)}takeMultibodyJoints(){const t=i.rawdeserializedworld_takeMultibodyJoints(this.__wbg_ptr);return 0===t?void 0:K.__wrap(t)}}class W{__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawdynamicraycastvehiclecontroller_free(t)}constructor(t){const e=i.rawdynamicraycastvehiclecontroller_new(t);return this.__wbg_ptr=e>>>0,this}current_vehicle_speed(){return i.rawdynamicraycastvehiclecontroller_current_vehicle_speed(this.__wbg_ptr)}chassis(){return i.rawdynamicraycastvehiclecontroller_chassis(this.__wbg_ptr)}index_up_axis(){return i.rawdynamicraycastvehiclecontroller_index_up_axis(this.__wbg_ptr)>>>0}set_index_up_axis(t){i.rawdynamicraycastvehiclecontroller_set_index_up_axis(this.__wbg_ptr,t)}index_forward_axis(){return i.rawdynamicraycastvehiclecontroller_index_forward_axis(this.__wbg_ptr)>>>0}set_index_forward_axis(t){i.rawdynamicraycastvehiclecontroller_set_index_forward_axis(this.__wbg_ptr,t)}add_wheel(t,e,r,n,s){m(t,dt),m(e,dt),m(r,dt),i.rawdynamicraycastvehiclecontroller_add_wheel(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n,s)}num_wheels(){return i.rawdynamicraycastvehiclecontroller_num_wheels(this.__wbg_ptr)>>>0}update_vehicle(t,e,r,n,a,o,_){try{m(e,st),m(r,z),m(n,et),i.rawdynamicraycastvehiclecontroller_update_vehicle(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,a,!c(o),c(o)?0:o,R(_))}finally{s[S++]=void 0}}wheel_chassis_connection_point_cs(t){const e=i.rawdynamicraycastvehiclecontroller_wheel_chassis_connection_point_cs(this.__wbg_ptr,t);return 0===e?void 0:dt.__wrap(e)}set_wheel_chassis_connection_point_cs(t,e){m(e,dt),i.rawdynamicraycastvehiclecontroller_set_wheel_chassis_connection_point_cs(this.__wbg_ptr,t,e.__wbg_ptr)}wheel_suspension_rest_length(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawdynamicraycastvehiclecontroller_wheel_suspension_rest_length(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=v()[n/4+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}set_wheel_suspension_rest_length(t,e){i.rawdynamicraycastvehiclecontroller_set_wheel_suspension_rest_length(this.__wbg_ptr,t,e)}wheel_max_suspension_travel(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawdynamicraycastvehiclecontroller_wheel_max_suspension_travel(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=v()[n/4+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}set_wheel_max_suspension_travel(t,e){i.rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_travel(this.__wbg_ptr,t,e)}wheel_radius(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawdynamicraycastvehiclecontroller_wheel_radius(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=v()[n/4+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}set_wheel_radius(t,e){i.rawdynamicraycastvehiclecontroller_set_wheel_radius(this.__wbg_ptr,t,e)}wheel_suspension_stiffness(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawdynamicraycastvehiclecontroller_wheel_suspension_stiffness(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=v()[n/4+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}set_wheel_suspension_stiffness(t,e){i.rawdynamicraycastvehiclecontroller_set_wheel_suspension_stiffness(this.__wbg_ptr,t,e)}wheel_suspension_compression(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawdynamicraycastvehiclecontroller_wheel_suspension_compression(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=v()[n/4+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}set_wheel_suspension_compression(t,e){i.rawdynamicraycastvehiclecontroller_set_wheel_suspension_compression(this.__wbg_ptr,t,e)}wheel_suspension_relaxation(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawdynamicraycastvehiclecontroller_wheel_suspension_relaxation(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=v()[n/4+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}set_wheel_suspension_relaxation(t,e){i.rawdynamicraycastvehiclecontroller_set_wheel_suspension_relaxation(this.__wbg_ptr,t,e)}wheel_max_suspension_force(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawdynamicraycastvehiclecontroller_wheel_max_suspension_force(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=v()[n/4+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}set_wheel_max_suspension_force(t,e){i.rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_force(this.__wbg_ptr,t,e)}wheel_brake(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawdynamicraycastvehiclecontroller_wheel_brake(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=v()[n/4+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}set_wheel_brake(t,e){i.rawdynamicraycastvehiclecontroller_set_wheel_brake(this.__wbg_ptr,t,e)}wheel_steering(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawdynamicraycastvehiclecontroller_wheel_steering(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=v()[n/4+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}set_wheel_steering(t,e){i.rawdynamicraycastvehiclecontroller_set_wheel_steering(this.__wbg_ptr,t,e)}wheel_engine_force(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawdynamicraycastvehiclecontroller_wheel_engine_force(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=v()[n/4+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}set_wheel_engine_force(t,e){i.rawdynamicraycastvehiclecontroller_set_wheel_engine_force(this.__wbg_ptr,t,e)}wheel_direction_cs(t){const e=i.rawdynamicraycastvehiclecontroller_wheel_direction_cs(this.__wbg_ptr,t);return 0===e?void 0:dt.__wrap(e)}set_wheel_direction_cs(t,e){m(e,dt),i.rawdynamicraycastvehiclecontroller_set_wheel_direction_cs(this.__wbg_ptr,t,e.__wbg_ptr)}wheel_axle_cs(t){const e=i.rawdynamicraycastvehiclecontroller_wheel_axle_cs(this.__wbg_ptr,t);return 0===e?void 0:dt.__wrap(e)}set_wheel_axle_cs(t,e){m(e,dt),i.rawdynamicraycastvehiclecontroller_set_wheel_axle_cs(this.__wbg_ptr,t,e.__wbg_ptr)}wheel_friction_slip(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawdynamicraycastvehiclecontroller_wheel_friction_slip(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=v()[n/4+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}set_wheel_friction_slip(t,e){i.rawdynamicraycastvehiclecontroller_set_wheel_friction_slip(this.__wbg_ptr,t,e)}wheel_side_friction_stiffness(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawdynamicraycastvehiclecontroller_wheel_side_friction_stiffness(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=v()[n/4+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}set_wheel_side_friction_stiffness(t,e){i.rawdynamicraycastvehiclecontroller_set_wheel_side_friction_stiffness(this.__wbg_ptr,t,e)}wheel_rotation(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawdynamicraycastvehiclecontroller_wheel_rotation(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=v()[n/4+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}wheel_forward_impulse(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawdynamicraycastvehiclecontroller_wheel_forward_impulse(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=v()[n/4+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}wheel_side_impulse(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawdynamicraycastvehiclecontroller_wheel_side_impulse(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=v()[n/4+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}wheel_suspension_force(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawdynamicraycastvehiclecontroller_wheel_suspension_force(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=v()[n/4+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}wheel_contact_normal_ws(t){const e=i.rawdynamicraycastvehiclecontroller_wheel_contact_normal_ws(this.__wbg_ptr,t);return 0===e?void 0:dt.__wrap(e)}wheel_contact_point_ws(t){const e=i.rawdynamicraycastvehiclecontroller_wheel_contact_point_ws(this.__wbg_ptr,t);return 0===e?void 0:dt.__wrap(e)}wheel_suspension_length(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawdynamicraycastvehiclecontroller_wheel_suspension_length(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=v()[n/4+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}wheel_hard_point_ws(t){const e=i.rawdynamicraycastvehiclecontroller_wheel_hard_point_ws(this.__wbg_ptr,t);return 0===e?void 0:dt.__wrap(e)}wheel_is_in_contact(t){return 0!==i.rawdynamicraycastvehiclecontroller_wheel_is_in_contact(this.__wbg_ptr,t)}wheel_ground_object(t){try{const n=i.__wbindgen_add_to_stack_pointer(-16);i.rawdynamicraycastvehiclecontroller_wheel_ground_object(n,this.__wbg_ptr,t);var e=p()[n/4+0],r=w()[n/8+1];return 0===e?void 0:r}finally{i.__wbindgen_add_to_stack_pointer(16)}}}class X{__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_raweventqueue_free(t)}constructor(t){const e=i.raweventqueue_new(t);return this.__wbg_ptr=e>>>0,this}drainCollisionEvents(t){try{i.raweventqueue_drainCollisionEvents(this.__wbg_ptr,R(t))}finally{s[S++]=void 0}}drainContactForceEvents(t){try{i.raweventqueue_drainContactForceEvents(this.__wbg_ptr,R(t))}finally{s[S++]=void 0}}clear(){i.raweventqueue_clear(this.__wbg_ptr)}}class O{static __wrap(t){t>>>=0;const e=Object.create(O.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawgenericjoint_free(t)}static generic(t,e,r,n){m(t,dt),m(e,dt),m(r,dt);const s=i.rawgenericjoint_generic(t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n);return 0===s?void 0:O.__wrap(s)}static spring(t,e,r,n,s){m(n,dt),m(s,dt);const a=i.rawgenericjoint_spring(t,e,r,n.__wbg_ptr,s.__wbg_ptr);return O.__wrap(a)}static rope(t,e,r){m(e,dt),m(r,dt);const n=i.rawgenericjoint_rope(t,e.__wbg_ptr,r.__wbg_ptr);return O.__wrap(n)}static spherical(t,e){m(t,dt),m(e,dt);const r=i.rawgenericjoint_spherical(t.__wbg_ptr,e.__wbg_ptr);return O.__wrap(r)}static prismatic(t,e,r,n,s,a){m(t,dt),m(e,dt),m(r,dt);const o=i.rawgenericjoint_prismatic(t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n,s,a);return 0===o?void 0:O.__wrap(o)}static fixed(t,e,r,n){m(t,dt),m(e,at),m(r,dt),m(n,at);const s=i.rawgenericjoint_fixed(t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr);return O.__wrap(s)}static revolute(t,e,r){m(t,dt),m(e,dt),m(r,dt);const n=i.rawgenericjoint_revolute(t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr);return 0===n?void 0:O.__wrap(n)}}class q{static __wrap(t){t>>>=0;const e=Object.create(q.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawimpulsejointset_free(t)}jointType(t){return i.rawimpulsejointset_jointType(this.__wbg_ptr,t)}jointBodyHandle1(t){return i.rawimpulsejointset_jointBodyHandle1(this.__wbg_ptr,t)}jointBodyHandle2(t){return i.rawimpulsejointset_jointBodyHandle2(this.__wbg_ptr,t)}jointFrameX1(t){const e=i.rawimpulsejointset_jointFrameX1(this.__wbg_ptr,t);return at.__wrap(e)}jointFrameX2(t){const e=i.rawimpulsejointset_jointFrameX2(this.__wbg_ptr,t);return at.__wrap(e)}jointAnchor1(t){const e=i.rawimpulsejointset_jointAnchor1(this.__wbg_ptr,t);return dt.__wrap(e)}jointAnchor2(t){const e=i.rawimpulsejointset_jointAnchor2(this.__wbg_ptr,t);return dt.__wrap(e)}jointSetAnchor1(t,e){m(e,dt),i.rawimpulsejointset_jointSetAnchor1(this.__wbg_ptr,t,e.__wbg_ptr)}jointSetAnchor2(t,e){m(e,dt),i.rawimpulsejointset_jointSetAnchor2(this.__wbg_ptr,t,e.__wbg_ptr)}jointContactsEnabled(t){return 0!==i.rawimpulsejointset_jointContactsEnabled(this.__wbg_ptr,t)}jointSetContactsEnabled(t,e){i.rawimpulsejointset_jointSetContactsEnabled(this.__wbg_ptr,t,e)}jointLimitsEnabled(t,e){return 0!==i.rawimpulsejointset_jointLimitsEnabled(this.__wbg_ptr,t,e)}jointLimitsMin(t,e){return i.rawimpulsejointset_jointLimitsMin(this.__wbg_ptr,t,e)}jointLimitsMax(t,e){return i.rawimpulsejointset_jointLimitsMax(this.__wbg_ptr,t,e)}jointSetLimits(t,e,r,n){i.rawimpulsejointset_jointSetLimits(this.__wbg_ptr,t,e,r,n)}jointConfigureMotorModel(t,e,r){i.rawimpulsejointset_jointConfigureMotorModel(this.__wbg_ptr,t,e,r)}jointConfigureMotorVelocity(t,e,r,n){i.rawimpulsejointset_jointConfigureMotorVelocity(this.__wbg_ptr,t,e,r,n)}jointConfigureMotorPosition(t,e,r,n,s){i.rawimpulsejointset_jointConfigureMotorPosition(this.__wbg_ptr,t,e,r,n,s)}jointConfigureMotor(t,e,r,n,s,a){i.rawimpulsejointset_jointConfigureMotor(this.__wbg_ptr,t,e,r,n,s,a)}constructor(){const t=i.rawimpulsejointset_new();return this.__wbg_ptr=t>>>0,this}createJoint(t,e,r,n){return m(t,O),i.rawimpulsejointset_createJoint(this.__wbg_ptr,t.__wbg_ptr,e,r,n)}remove(t,e){i.rawimpulsejointset_remove(this.__wbg_ptr,t,e)}len(){return i.rawimpulsejointset_len(this.__wbg_ptr)>>>0}contains(t){return 0!==i.rawimpulsejointset_contains(this.__wbg_ptr,t)}forEachJointHandle(t){try{i.rawimpulsejointset_forEachJointHandle(this.__wbg_ptr,R(t))}finally{s[S++]=void 0}}forEachJointAttachedToRigidBody(t,e){try{i.rawimpulsejointset_forEachJointAttachedToRigidBody(this.__wbg_ptr,t,R(e))}finally{s[S++]=void 0}}}class V{static __wrap(t){t>>>=0;const e=Object.create(V.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawintegrationparameters_free(t)}constructor(){const t=i.rawintegrationparameters_new();return this.__wbg_ptr=t>>>0,this}get dt(){return i.rawintegrationparameters_dt(this.__wbg_ptr)}get erp(){return i.rawintegrationparameters_erp(this.__wbg_ptr)}get allowedLinearError(){return i.rawcontactforceevent_total_force_magnitude(this.__wbg_ptr)}get predictionDistance(){return i.rawdynamicraycastvehiclecontroller_current_vehicle_speed(this.__wbg_ptr)}get numSolverIterations(){return i.rawintegrationparameters_numSolverIterations(this.__wbg_ptr)>>>0}get numAdditionalFrictionIterations(){return i.rawintegrationparameters_numAdditionalFrictionIterations(this.__wbg_ptr)>>>0}get numInternalPgsIterations(){return i.rawintegrationparameters_numInternalPgsIterations(this.__wbg_ptr)>>>0}get minIslandSize(){return i.rawdynamicraycastvehiclecontroller_index_up_axis(this.__wbg_ptr)>>>0}get maxCcdSubsteps(){return i.rawdynamicraycastvehiclecontroller_index_forward_axis(this.__wbg_ptr)>>>0}set dt(t){i.rawintegrationparameters_set_dt(this.__wbg_ptr,t)}set erp(t){i.rawintegrationparameters_set_erp(this.__wbg_ptr,t)}set allowedLinearError(t){i.rawintegrationparameters_set_allowedLinearError(this.__wbg_ptr,t)}set predictionDistance(t){i.rawintegrationparameters_set_predictionDistance(this.__wbg_ptr,t)}set numSolverIterations(t){i.rawintegrationparameters_set_numSolverIterations(this.__wbg_ptr,t)}set numAdditionalFrictionIterations(t){i.rawintegrationparameters_set_numAdditionalFrictionIterations(this.__wbg_ptr,t)}set numInternalPgsIterations(t){i.rawintegrationparameters_set_numInternalPgsIterations(this.__wbg_ptr,t)}set minIslandSize(t){i.rawdynamicraycastvehiclecontroller_set_index_up_axis(this.__wbg_ptr,t)}set maxCcdSubsteps(t){i.rawdynamicraycastvehiclecontroller_set_index_forward_axis(this.__wbg_ptr,t)}switchToStandardPgsSolver(){i.rawintegrationparameters_switchToStandardPgsSolver(this.__wbg_ptr)}switchToSmallStepsPgsSolver(){i.rawintegrationparameters_switchToSmallStepsPgsSolver(this.__wbg_ptr)}}class U{static __wrap(t){t>>>=0;const e=Object.create(U.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawislandmanager_free(t)}constructor(){const t=i.rawislandmanager_new();return this.__wbg_ptr=t>>>0,this}forEachActiveRigidBodyHandle(t){try{i.rawislandmanager_forEachActiveRigidBodyHandle(this.__wbg_ptr,R(t))}finally{s[S++]=void 0}}}class Y{__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawkinematiccharactercontroller_free(t)}constructor(t){const e=i.rawkinematiccharactercontroller_new(t);return this.__wbg_ptr=e>>>0,this}up(){const t=i.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);return dt.__wrap(t)}setUp(t){m(t,dt),i.rawkinematiccharactercontroller_setUp(this.__wbg_ptr,t.__wbg_ptr)}offset(){return i.rawintegrationparameters_dt(this.__wbg_ptr)}setOffset(t){i.rawkinematiccharactercontroller_setOffset(this.__wbg_ptr,t)}slideEnabled(){return 0!==i.rawkinematiccharactercontroller_slideEnabled(this.__wbg_ptr)}setSlideEnabled(t){i.rawkinematiccharactercontroller_setSlideEnabled(this.__wbg_ptr,t)}autostepMaxHeight(){try{const r=i.__wbindgen_add_to_stack_pointer(-16);i.rawkinematiccharactercontroller_autostepMaxHeight(r,this.__wbg_ptr);var t=p()[r/4+0],e=v()[r/4+1];return 0===t?void 0:e}finally{i.__wbindgen_add_to_stack_pointer(16)}}autostepMinWidth(){try{const r=i.__wbindgen_add_to_stack_pointer(-16);i.rawkinematiccharactercontroller_autostepMinWidth(r,this.__wbg_ptr);var t=p()[r/4+0],e=v()[r/4+1];return 0===t?void 0:e}finally{i.__wbindgen_add_to_stack_pointer(16)}}autostepIncludesDynamicBodies(){const t=i.rawkinematiccharactercontroller_autostepIncludesDynamicBodies(this.__wbg_ptr);return 16777215===t?void 0:0!==t}autostepEnabled(){return 0!==i.rawkinematiccharactercontroller_autostepEnabled(this.__wbg_ptr)}enableAutostep(t,e,r){i.rawkinematiccharactercontroller_enableAutostep(this.__wbg_ptr,t,e,r)}disableAutostep(){i.rawkinematiccharactercontroller_disableAutostep(this.__wbg_ptr)}maxSlopeClimbAngle(){return i.rawkinematiccharactercontroller_maxSlopeClimbAngle(this.__wbg_ptr)}setMaxSlopeClimbAngle(t){i.rawkinematiccharactercontroller_setMaxSlopeClimbAngle(this.__wbg_ptr,t)}minSlopeSlideAngle(){return i.rawkinematiccharactercontroller_minSlopeSlideAngle(this.__wbg_ptr)}setMinSlopeSlideAngle(t){i.rawkinematiccharactercontroller_setMinSlopeSlideAngle(this.__wbg_ptr,t)}snapToGroundDistance(){try{const r=i.__wbindgen_add_to_stack_pointer(-16);i.rawkinematiccharactercontroller_snapToGroundDistance(r,this.__wbg_ptr);var t=p()[r/4+0],e=v()[r/4+1];return 0===t?void 0:e}finally{i.__wbindgen_add_to_stack_pointer(16)}}enableSnapToGround(t){i.rawkinematiccharactercontroller_enableSnapToGround(this.__wbg_ptr,t)}disableSnapToGround(){i.rawkinematiccharactercontroller_disableSnapToGround(this.__wbg_ptr)}snapToGroundEnabled(){return 0!==i.rawkinematiccharactercontroller_snapToGroundEnabled(this.__wbg_ptr)}computeColliderMovement(t,e,r,n,a,o,_,l,h,w,d){try{m(e,st),m(r,z),m(n,et),m(o,dt),i.rawkinematiccharactercontroller_computeColliderMovement(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,a,o.__wbg_ptr,_,!c(l),c(l)?0:l,h,!c(w),c(w)?0:w,R(d))}finally{s[S++]=void 0}}computedMovement(){const t=i.rawkinematiccharactercontroller_computedMovement(this.__wbg_ptr);return dt.__wrap(t)}computedGrounded(){return 0!==i.rawkinematiccharactercontroller_computedGrounded(this.__wbg_ptr)}numComputedCollisions(){return i.rawkinematiccharactercontroller_numComputedCollisions(this.__wbg_ptr)>>>0}computedCollision(t,e){return m(e,H),0!==i.rawkinematiccharactercontroller_computedCollision(this.__wbg_ptr,t,e.__wbg_ptr)}}class K{static __wrap(t){t>>>=0;const e=Object.create(K.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawmultibodyjointset_free(t)}jointType(t){return i.rawmultibodyjointset_jointType(this.__wbg_ptr,t)}jointFrameX1(t){const e=i.rawmultibodyjointset_jointFrameX1(this.__wbg_ptr,t);return at.__wrap(e)}jointFrameX2(t){const e=i.rawmultibodyjointset_jointFrameX2(this.__wbg_ptr,t);return at.__wrap(e)}jointAnchor1(t){const e=i.rawmultibodyjointset_jointAnchor1(this.__wbg_ptr,t);return dt.__wrap(e)}jointAnchor2(t){const e=i.rawmultibodyjointset_jointAnchor2(this.__wbg_ptr,t);return dt.__wrap(e)}jointContactsEnabled(t){return 0!==i.rawmultibodyjointset_jointContactsEnabled(this.__wbg_ptr,t)}jointSetContactsEnabled(t,e){i.rawmultibodyjointset_jointSetContactsEnabled(this.__wbg_ptr,t,e)}jointLimitsEnabled(t,e){return 0!==i.rawmultibodyjointset_jointLimitsEnabled(this.__wbg_ptr,t,e)}jointLimitsMin(t,e){return i.rawmultibodyjointset_jointLimitsMin(this.__wbg_ptr,t,e)}jointLimitsMax(t,e){return i.rawmultibodyjointset_jointLimitsMax(this.__wbg_ptr,t,e)}constructor(){const t=i.rawmultibodyjointset_new();return this.__wbg_ptr=t>>>0,this}createJoint(t,e,r,n){return m(t,O),i.rawmultibodyjointset_createJoint(this.__wbg_ptr,t.__wbg_ptr,e,r,n)}remove(t,e){i.rawmultibodyjointset_remove(this.__wbg_ptr,t,e)}contains(t){return 0!==i.rawmultibodyjointset_contains(this.__wbg_ptr,t)}forEachJointHandle(t){try{i.rawmultibodyjointset_forEachJointHandle(this.__wbg_ptr,R(t))}finally{s[S++]=void 0}}forEachJointAttachedToRigidBody(t,e){try{i.rawmultibodyjointset_forEachJointAttachedToRigidBody(this.__wbg_ptr,t,R(e))}finally{s[S++]=void 0}}}class Q{static __wrap(t){t>>>=0;const e=Object.create(Q.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawnarrowphase_free(t)}constructor(){const t=i.rawnarrowphase_new();return this.__wbg_ptr=t>>>0,this}contact_pairs_with(t,e){i.rawnarrowphase_contact_pairs_with(this.__wbg_ptr,t,o(e))}contact_pair(t,e){const r=i.rawnarrowphase_contact_pair(this.__wbg_ptr,t,e);return 0===r?void 0:B.__wrap(r)}intersection_pairs_with(t,e){i.rawnarrowphase_intersection_pairs_with(this.__wbg_ptr,t,o(e))}intersection_pair(t,e){return 0!==i.rawnarrowphase_intersection_pair(this.__wbg_ptr,t,e)}}class Z{__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawphysicspipeline_free(t)}constructor(){const t=i.rawphysicspipeline_new();return this.__wbg_ptr=t>>>0,this}step(t,e,r,n,s,a,o,_,l,c){m(t,dt),m(e,V),m(r,U),m(n,F),m(s,Q),m(a,st),m(o,z),m(_,q),m(l,K),m(c,D),i.rawphysicspipeline_step(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,a.__wbg_ptr,o.__wbg_ptr,_.__wbg_ptr,l.__wbg_ptr,c.__wbg_ptr)}stepWithEvents(t,e,r,n,s,a,_,l,c,h,w,d,p,u){m(t,dt),m(e,V),m(r,U),m(n,F),m(s,Q),m(a,st),m(_,z),m(l,q),m(c,K),m(h,D),m(w,X),i.rawphysicspipeline_stepWithEvents(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,a.__wbg_ptr,_.__wbg_ptr,l.__wbg_ptr,c.__wbg_ptr,h.__wbg_ptr,w.__wbg_ptr,o(d),o(p),o(u))}}class ${static __wrap(t){t>>>=0;const e=Object.create($.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawpointcolliderprojection_free(t)}colliderHandle(){return i.rawpointcolliderprojection_colliderHandle(this.__wbg_ptr)}point(){const t=i.rawpointcolliderprojection_point(this.__wbg_ptr);return dt.__wrap(t)}isInside(){return 0!==i.rawpointcolliderprojection_isInside(this.__wbg_ptr)}featureType(){return i.rawpointcolliderprojection_featureType(this.__wbg_ptr)}featureId(){try{const r=i.__wbindgen_add_to_stack_pointer(-16);i.rawpointcolliderprojection_featureId(r,this.__wbg_ptr);var t=p()[r/4+0],e=p()[r/4+1];return 0===t?void 0:e>>>0}finally{i.__wbindgen_add_to_stack_pointer(16)}}}class tt{static __wrap(t){t>>>=0;const e=Object.create(tt.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawpointprojection_free(t)}point(){const t=i.rawpointprojection_point(this.__wbg_ptr);return dt.__wrap(t)}isInside(){return 0!==i.rawpointprojection_isInside(this.__wbg_ptr)}}class et{__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawquerypipeline_free(t)}constructor(){const t=i.rawquerypipeline_new();return this.__wbg_ptr=t>>>0,this}update(t,e){m(t,st),m(e,z),i.rawquerypipeline_update(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr)}castRay(t,e,r,n,a,o,_,l,h,w,d){try{m(t,st),m(e,z),m(r,dt),m(n,dt);const p=i.rawquerypipeline_castRay(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,a,o,_,!c(l),c(l)?0:l,!c(h),c(h)?0:h,!c(w),c(w)?0:w,R(d));return 0===p?void 0:it.__wrap(p)}finally{s[S++]=void 0}}castRayAndGetNormal(t,e,r,n,a,o,_,l,h,w,d){try{m(t,st),m(e,z),m(r,dt),m(n,dt);const p=i.rawquerypipeline_castRayAndGetNormal(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,a,o,_,!c(l),c(l)?0:l,!c(h),c(h)?0:h,!c(w),c(w)?0:w,R(d));return 0===p?void 0:rt.__wrap(p)}finally{s[S++]=void 0}}intersectionsWithRay(t,e,r,n,a,o,_,l,h,w,d,p){try{m(t,st),m(e,z),m(r,dt),m(n,dt),i.rawquerypipeline_intersectionsWithRay(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,a,o,R(_),l,!c(h),c(h)?0:h,!c(w),c(w)?0:w,!c(d),c(d)?0:d,R(p))}finally{s[S++]=void 0,s[S++]=void 0}}intersectionWithShape(t,e,r,n,a,o,_,l,h,d){try{const g=i.__wbindgen_add_to_stack_pointer(-16);m(t,st),m(e,z),m(r,dt),m(n,at),m(a,lt),i.rawquerypipeline_intersectionWithShape(g,this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,a.__wbg_ptr,o,!c(_),c(_)?0:_,!c(l),c(l)?0:l,!c(h),c(h)?0:h,R(d));var u=p()[g/4+0],b=w()[g/8+1];return 0===u?void 0:b}finally{i.__wbindgen_add_to_stack_pointer(16),s[S++]=void 0}}projectPoint(t,e,r,n,a,o,_,l,h){try{m(t,st),m(e,z),m(r,dt);const w=i.rawquerypipeline_projectPoint(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n,a,!c(o),c(o)?0:o,!c(_),c(_)?0:_,!c(l),c(l)?0:l,R(h));return 0===w?void 0:$.__wrap(w)}finally{s[S++]=void 0}}projectPointAndGetFeature(t,e,r,n,a,o,_,l){try{m(t,st),m(e,z),m(r,dt);const h=i.rawquerypipeline_projectPointAndGetFeature(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n,!c(a),c(a)?0:a,!c(o),c(o)?0:o,!c(_),c(_)?0:_,R(l));return 0===h?void 0:$.__wrap(h)}finally{s[S++]=void 0}}intersectionsWithPoint(t,e,r,n,a,o,_,l,h){try{m(t,st),m(e,z),m(r,dt),i.rawquerypipeline_intersectionsWithPoint(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,R(n),a,!c(o),c(o)?0:o,!c(_),c(_)?0:_,!c(l),c(l)?0:l,R(h))}finally{s[S++]=void 0,s[S++]=void 0}}castShape(t,e,r,n,a,o,_,l,h,w,d,p,u){try{m(t,st),m(e,z),m(r,dt),m(n,at),m(a,dt),m(o,lt);const b=i.rawquerypipeline_castShape(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,a.__wbg_ptr,o.__wbg_ptr,_,l,h,!c(w),c(w)?0:w,!c(d),c(d)?0:d,!c(p),c(p)?0:p,R(u));return 0===b?void 0:ct.__wrap(b)}finally{s[S++]=void 0}}intersectionsWithShape(t,e,r,n,a,o,_,l,h,w,d){try{m(t,st),m(e,z),m(r,dt),m(n,at),m(a,lt),i.rawquerypipeline_intersectionsWithShape(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,a.__wbg_ptr,R(o),_,!c(l),c(l)?0:l,!c(h),c(h)?0:h,!c(w),c(w)?0:w,R(d))}finally{s[S++]=void 0,s[S++]=void 0}}collidersWithAabbIntersectingAabb(t,e,r){try{m(t,dt),m(e,dt),i.rawquerypipeline_collidersWithAabbIntersectingAabb(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,R(r))}finally{s[S++]=void 0}}}class rt{static __wrap(t){t>>>=0;const e=Object.create(rt.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawraycolliderintersection_free(t)}colliderHandle(){return i.rawpointcolliderprojection_colliderHandle(this.__wbg_ptr)}normal(){const t=i.rawraycolliderintersection_normal(this.__wbg_ptr);return dt.__wrap(t)}toi(){return i.rawraycolliderintersection_toi(this.__wbg_ptr)}featureType(){return i.rawpointcolliderprojection_featureType(this.__wbg_ptr)}featureId(){try{const r=i.__wbindgen_add_to_stack_pointer(-16);i.rawpointcolliderprojection_featureId(r,this.__wbg_ptr);var t=p()[r/4+0],e=p()[r/4+1];return 0===t?void 0:e>>>0}finally{i.__wbindgen_add_to_stack_pointer(16)}}}class it{static __wrap(t){t>>>=0;const e=Object.create(it.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawraycollidertoi_free(t)}colliderHandle(){return i.rawcharactercollision_handle(this.__wbg_ptr)}toi(){return i.rawraycolliderintersection_toi(this.__wbg_ptr)}}class nt{static __wrap(t){t>>>=0;const e=Object.create(nt.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawrayintersection_free(t)}normal(){const t=i.rawraycolliderintersection_normal(this.__wbg_ptr);return dt.__wrap(t)}toi(){return i.rawraycolliderintersection_toi(this.__wbg_ptr)}featureType(){return i.rawpointcolliderprojection_featureType(this.__wbg_ptr)}featureId(){try{const r=i.__wbindgen_add_to_stack_pointer(-16);i.rawpointcolliderprojection_featureId(r,this.__wbg_ptr);var t=p()[r/4+0],e=p()[r/4+1];return 0===t?void 0:e>>>0}finally{i.__wbindgen_add_to_stack_pointer(16)}}}class st{static __wrap(t){t>>>=0;const e=Object.create(st.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawrigidbodyset_free(t)}rbTranslation(t){const e=i.rawrigidbodyset_rbTranslation(this.__wbg_ptr,t);return dt.__wrap(e)}rbRotation(t){const e=i.rawrigidbodyset_rbRotation(this.__wbg_ptr,t);return at.__wrap(e)}rbSleep(t){i.rawrigidbodyset_rbSleep(this.__wbg_ptr,t)}rbIsSleeping(t){return 0!==i.rawrigidbodyset_rbIsSleeping(this.__wbg_ptr,t)}rbIsMoving(t){return 0!==i.rawrigidbodyset_rbIsMoving(this.__wbg_ptr,t)}rbNextTranslation(t){const e=i.rawrigidbodyset_rbNextTranslation(this.__wbg_ptr,t);return dt.__wrap(e)}rbNextRotation(t){const e=i.rawrigidbodyset_rbNextRotation(this.__wbg_ptr,t);return at.__wrap(e)}rbSetTranslation(t,e,r,n,s){i.rawrigidbodyset_rbSetTranslation(this.__wbg_ptr,t,e,r,n,s)}rbSetRotation(t,e,r,n,s,a){i.rawrigidbodyset_rbSetRotation(this.__wbg_ptr,t,e,r,n,s,a)}rbSetLinvel(t,e,r){m(e,dt),i.rawrigidbodyset_rbSetLinvel(this.__wbg_ptr,t,e.__wbg_ptr,r)}rbSetAngvel(t,e,r){m(e,dt),i.rawrigidbodyset_rbSetAngvel(this.__wbg_ptr,t,e.__wbg_ptr,r)}rbSetNextKinematicTranslation(t,e,r,n){i.rawrigidbodyset_rbSetNextKinematicTranslation(this.__wbg_ptr,t,e,r,n)}rbSetNextKinematicRotation(t,e,r,n,s){i.rawrigidbodyset_rbSetNextKinematicRotation(this.__wbg_ptr,t,e,r,n,s)}rbRecomputeMassPropertiesFromColliders(t,e){m(e,z),i.rawrigidbodyset_rbRecomputeMassPropertiesFromColliders(this.__wbg_ptr,t,e.__wbg_ptr)}rbSetAdditionalMass(t,e,r){i.rawrigidbodyset_rbSetAdditionalMass(this.__wbg_ptr,t,e,r)}rbSetAdditionalMassProperties(t,e,r,n,s,a){m(r,dt),m(n,dt),m(s,at),i.rawrigidbodyset_rbSetAdditionalMassProperties(this.__wbg_ptr,t,e,r.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,a)}rbLinvel(t){const e=i.rawrigidbodyset_rbLinvel(this.__wbg_ptr,t);return dt.__wrap(e)}rbAngvel(t){const e=i.rawrigidbodyset_rbAngvel(this.__wbg_ptr,t);return dt.__wrap(e)}rbLockTranslations(t,e,r){i.rawrigidbodyset_rbLockTranslations(this.__wbg_ptr,t,e,r)}rbSetEnabledTranslations(t,e,r,n,s){i.rawrigidbodyset_rbSetEnabledTranslations(this.__wbg_ptr,t,e,r,n,s)}rbLockRotations(t,e,r){i.rawrigidbodyset_rbLockRotations(this.__wbg_ptr,t,e,r)}rbSetEnabledRotations(t,e,r,n,s){i.rawrigidbodyset_rbSetEnabledRotations(this.__wbg_ptr,t,e,r,n,s)}rbDominanceGroup(t){return i.rawrigidbodyset_rbDominanceGroup(this.__wbg_ptr,t)}rbSetDominanceGroup(t,e){i.rawrigidbodyset_rbSetDominanceGroup(this.__wbg_ptr,t,e)}rbEnableCcd(t,e){i.rawrigidbodyset_rbEnableCcd(this.__wbg_ptr,t,e)}rbMass(t){return i.rawrigidbodyset_rbMass(this.__wbg_ptr,t)}rbInvMass(t){return i.rawrigidbodyset_rbInvMass(this.__wbg_ptr,t)}rbEffectiveInvMass(t){const e=i.rawrigidbodyset_rbEffectiveInvMass(this.__wbg_ptr,t);return dt.__wrap(e)}rbLocalCom(t){const e=i.rawrigidbodyset_rbLocalCom(this.__wbg_ptr,t);return dt.__wrap(e)}rbWorldCom(t){const e=i.rawrigidbodyset_rbWorldCom(this.__wbg_ptr,t);return dt.__wrap(e)}rbInvPrincipalInertiaSqrt(t){const e=i.rawrigidbodyset_rbInvPrincipalInertiaSqrt(this.__wbg_ptr,t);return dt.__wrap(e)}rbPrincipalInertiaLocalFrame(t){const e=i.rawrigidbodyset_rbPrincipalInertiaLocalFrame(this.__wbg_ptr,t);return at.__wrap(e)}rbPrincipalInertia(t){const e=i.rawrigidbodyset_rbPrincipalInertia(this.__wbg_ptr,t);return dt.__wrap(e)}rbEffectiveWorldInvInertiaSqrt(t){const e=i.rawrigidbodyset_rbEffectiveWorldInvInertiaSqrt(this.__wbg_ptr,t);return ot.__wrap(e)}rbEffectiveAngularInertia(t){const e=i.rawrigidbodyset_rbEffectiveAngularInertia(this.__wbg_ptr,t);return ot.__wrap(e)}rbWakeUp(t){i.rawrigidbodyset_rbWakeUp(this.__wbg_ptr,t)}rbIsCcdEnabled(t){return 0!==i.rawrigidbodyset_rbIsCcdEnabled(this.__wbg_ptr,t)}rbNumColliders(t){return i.rawrigidbodyset_rbNumColliders(this.__wbg_ptr,t)>>>0}rbCollider(t,e){return i.rawrigidbodyset_rbCollider(this.__wbg_ptr,t,e)}rbBodyType(t){return i.rawrigidbodyset_rbBodyType(this.__wbg_ptr,t)}rbSetBodyType(t,e,r){i.rawrigidbodyset_rbSetBodyType(this.__wbg_ptr,t,e,r)}rbIsFixed(t){return 0!==i.rawrigidbodyset_rbIsFixed(this.__wbg_ptr,t)}rbIsKinematic(t){return 0!==i.rawrigidbodyset_rbIsKinematic(this.__wbg_ptr,t)}rbIsDynamic(t){return 0!==i.rawrigidbodyset_rbIsDynamic(this.__wbg_ptr,t)}rbLinearDamping(t){return i.rawrigidbodyset_rbLinearDamping(this.__wbg_ptr,t)}rbAngularDamping(t){return i.rawrigidbodyset_rbAngularDamping(this.__wbg_ptr,t)}rbSetLinearDamping(t,e){i.rawrigidbodyset_rbSetLinearDamping(this.__wbg_ptr,t,e)}rbSetAngularDamping(t,e){i.rawrigidbodyset_rbSetAngularDamping(this.__wbg_ptr,t,e)}rbSetEnabled(t,e){i.rawrigidbodyset_rbSetEnabled(this.__wbg_ptr,t,e)}rbIsEnabled(t){return 0!==i.rawrigidbodyset_rbIsEnabled(this.__wbg_ptr,t)}rbGravityScale(t){return i.rawrigidbodyset_rbGravityScale(this.__wbg_ptr,t)}rbSetGravityScale(t,e,r){i.rawrigidbodyset_rbSetGravityScale(this.__wbg_ptr,t,e,r)}rbResetForces(t,e){i.rawrigidbodyset_rbResetForces(this.__wbg_ptr,t,e)}rbResetTorques(t,e){i.rawrigidbodyset_rbResetTorques(this.__wbg_ptr,t,e)}rbAddForce(t,e,r){m(e,dt),i.rawrigidbodyset_rbAddForce(this.__wbg_ptr,t,e.__wbg_ptr,r)}rbApplyImpulse(t,e,r){m(e,dt),i.rawrigidbodyset_rbApplyImpulse(this.__wbg_ptr,t,e.__wbg_ptr,r)}rbAddTorque(t,e,r){m(e,dt),i.rawrigidbodyset_rbAddTorque(this.__wbg_ptr,t,e.__wbg_ptr,r)}rbApplyTorqueImpulse(t,e,r){m(e,dt),i.rawrigidbodyset_rbApplyTorqueImpulse(this.__wbg_ptr,t,e.__wbg_ptr,r)}rbAddForceAtPoint(t,e,r,n){m(e,dt),m(r,dt),i.rawrigidbodyset_rbAddForceAtPoint(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n)}rbApplyImpulseAtPoint(t,e,r,n){m(e,dt),m(r,dt),i.rawrigidbodyset_rbApplyImpulseAtPoint(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n)}rbAdditionalSolverIterations(t){return i.rawrigidbodyset_rbAdditionalSolverIterations(this.__wbg_ptr,t)>>>0}rbSetAdditionalSolverIterations(t,e){i.rawrigidbodyset_rbSetAdditionalSolverIterations(this.__wbg_ptr,t,e)}rbUserData(t){return i.rawrigidbodyset_rbUserData(this.__wbg_ptr,t)>>>0}rbSetUserData(t,e){i.rawrigidbodyset_rbSetUserData(this.__wbg_ptr,t,e)}constructor(){const t=i.rawrigidbodyset_new();return this.__wbg_ptr=t>>>0,this}createRigidBody(t,e,r,n,s,a,o,_,l,c,h,w,d,p,u,b,g,y,f,v,S,R,C,I,T){return m(e,dt),m(r,at),m(o,dt),m(_,dt),m(l,dt),m(c,dt),m(h,at),i.rawrigidbodyset_createRigidBody(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n,s,a,o.__wbg_ptr,_.__wbg_ptr,l.__wbg_ptr,c.__wbg_ptr,h.__wbg_ptr,w,d,p,u,b,g,y,f,v,S,R,C,I,T)}remove(t,e,r,n,s){m(e,U),m(r,z),m(n,q),m(s,K),i.rawrigidbodyset_remove(this.__wbg_ptr,t,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr)}len(){return i.rawcolliderset_len(this.__wbg_ptr)>>>0}contains(t){return 0!==i.rawrigidbodyset_contains(this.__wbg_ptr,t)}forEachRigidBodyHandle(t){try{i.rawrigidbodyset_forEachRigidBodyHandle(this.__wbg_ptr,R(t))}finally{s[S++]=void 0}}propagateModifiedBodyPositionsToColliders(t){m(t,z),i.rawrigidbodyset_propagateModifiedBodyPositionsToColliders(this.__wbg_ptr,t.__wbg_ptr)}}class at{static __wrap(t){t>>>=0;const e=Object.create(at.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawrotation_free(t)}constructor(t,e,r,n){const s=i.rawrotation_new(t,e,r,n);return this.__wbg_ptr=s>>>0,this}static identity(){const t=i.rawrotation_identity();return at.__wrap(t)}get x(){return i.rawrotation_x(this.__wbg_ptr)}get y(){return i.rawintegrationparameters_dt(this.__wbg_ptr)}get z(){return i.rawraycolliderintersection_toi(this.__wbg_ptr)}get w(){return i.rawintegrationparameters_erp(this.__wbg_ptr)}}class ot{static __wrap(t){t>>>=0;const e=Object.create(ot.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawsdpmatrix3_free(t)}elements(){return l(i.rawsdpmatrix3_elements(this.__wbg_ptr))}}class _t{__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawserializationpipeline_free(t)}constructor(){const t=i.rawserializationpipeline_new();return this.__wbg_ptr=t>>>0,this}serializeAll(t,e,r,n,s,a,o,_,c){return m(t,dt),m(e,V),m(r,U),m(n,F),m(s,Q),m(a,st),m(o,z),m(_,q),m(c,K),l(i.rawserializationpipeline_serializeAll(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,a.__wbg_ptr,o.__wbg_ptr,_.__wbg_ptr,c.__wbg_ptr))}deserializeAll(t){const e=i.rawserializationpipeline_deserializeAll(this.__wbg_ptr,o(t));return 0===e?void 0:G.__wrap(e)}}class lt{static __wrap(t){t>>>=0;const e=Object.create(lt.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawshape_free(t)}static cuboid(t,e,r){const n=i.rawshape_cuboid(t,e,r);return lt.__wrap(n)}static roundCuboid(t,e,r,n){const s=i.rawshape_roundCuboid(t,e,r,n);return lt.__wrap(s)}static ball(t){const e=i.rawshape_ball(t);return lt.__wrap(e)}static halfspace(t){m(t,dt);const e=i.rawshape_halfspace(t.__wbg_ptr);return lt.__wrap(e)}static capsule(t,e){const r=i.rawshape_capsule(t,e);return lt.__wrap(r)}static cylinder(t,e){const r=i.rawshape_cylinder(t,e);return lt.__wrap(r)}static roundCylinder(t,e,r){const n=i.rawshape_roundCylinder(t,e,r);return lt.__wrap(n)}static cone(t,e){const r=i.rawshape_cone(t,e);return lt.__wrap(r)}static roundCone(t,e,r){const n=i.rawshape_roundCone(t,e,r);return lt.__wrap(n)}static polyline(t,e){const r=x(t,i.__wbindgen_malloc),n=A,s=P(e,i.__wbindgen_malloc),a=A,o=i.rawshape_polyline(r,n,s,a);return lt.__wrap(o)}static trimesh(t,e){const r=x(t,i.__wbindgen_malloc),n=A,s=P(e,i.__wbindgen_malloc),a=A,o=i.rawshape_trimesh(r,n,s,a);return lt.__wrap(o)}static heightfield(t,e,r,n){const s=x(r,i.__wbindgen_malloc),a=A;m(n,dt);const o=i.rawshape_heightfield(t,e,s,a,n.__wbg_ptr);return lt.__wrap(o)}static segment(t,e){m(t,dt),m(e,dt);const r=i.rawshape_segment(t.__wbg_ptr,e.__wbg_ptr);return lt.__wrap(r)}static triangle(t,e,r){m(t,dt),m(e,dt),m(r,dt);const n=i.rawshape_triangle(t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr);return lt.__wrap(n)}static roundTriangle(t,e,r,n){m(t,dt),m(e,dt),m(r,dt);const s=i.rawshape_roundTriangle(t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n);return lt.__wrap(s)}static convexHull(t){const e=x(t,i.__wbindgen_malloc),r=A,n=i.rawshape_convexHull(e,r);return 0===n?void 0:lt.__wrap(n)}static roundConvexHull(t,e){const r=x(t,i.__wbindgen_malloc),n=A,s=i.rawshape_roundConvexHull(r,n,e);return 0===s?void 0:lt.__wrap(s)}static convexMesh(t,e){const r=x(t,i.__wbindgen_malloc),n=A,s=P(e,i.__wbindgen_malloc),a=A,o=i.rawshape_convexMesh(r,n,s,a);return 0===o?void 0:lt.__wrap(o)}static roundConvexMesh(t,e,r){const n=x(t,i.__wbindgen_malloc),s=A,a=P(e,i.__wbindgen_malloc),o=A,_=i.rawshape_roundConvexMesh(n,s,a,o,r);return 0===_?void 0:lt.__wrap(_)}castShape(t,e,r,n,s,a,o,_,l){m(t,dt),m(e,at),m(r,dt),m(n,lt),m(s,dt),m(a,at),m(o,dt);const c=i.rawshape_castShape(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,a.__wbg_ptr,o.__wbg_ptr,_,l);return 0===c?void 0:wt.__wrap(c)}intersectsShape(t,e,r,n,s){return m(t,dt),m(e,at),m(r,lt),m(n,dt),m(s,at),0!==i.rawshape_intersectsShape(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr)}contactShape(t,e,r,n,s,a){m(t,dt),m(e,at),m(r,lt),m(n,dt),m(s,at);const o=i.rawshape_contactShape(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,a);return 0===o?void 0:ht.__wrap(o)}containsPoint(t,e,r){return m(t,dt),m(e,at),m(r,dt),0!==i.rawshape_containsPoint(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr)}projectPoint(t,e,r,n){m(t,dt),m(e,at),m(r,dt);const s=i.rawshape_projectPoint(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n);return tt.__wrap(s)}intersectsRay(t,e,r,n,s){return m(t,dt),m(e,at),m(r,dt),m(n,dt),0!==i.rawshape_intersectsRay(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,s)}castRay(t,e,r,n,s,a){return m(t,dt),m(e,at),m(r,dt),m(n,dt),i.rawshape_castRay(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,s,a)}castRayAndGetNormal(t,e,r,n,s,a){m(t,dt),m(e,at),m(r,dt),m(n,dt);const o=i.rawshape_castRayAndGetNormal(this.__wbg_ptr,t.__wbg_ptr,e.__wbg_ptr,r.__wbg_ptr,n.__wbg_ptr,s,a);return 0===o?void 0:nt.__wrap(o)}}class ct{static __wrap(t){t>>>=0;const e=Object.create(ct.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawshapecollidertoi_free(t)}colliderHandle(){return i.rawcharactercollision_handle(this.__wbg_ptr)}toi(){return i.rawraycolliderintersection_toi(this.__wbg_ptr)}witness1(){const t=i.rawraycolliderintersection_normal(this.__wbg_ptr);return dt.__wrap(t)}witness2(){const t=i.rawshapecollidertoi_witness2(this.__wbg_ptr);return dt.__wrap(t)}normal1(){const t=i.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);return dt.__wrap(t)}normal2(){const t=i.rawcharactercollision_translationDeltaRemaining(this.__wbg_ptr);return dt.__wrap(t)}}class ht{static __wrap(t){t>>>=0;const e=Object.create(ht.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawshapecontact_free(t)}distance(){return i.rawkinematiccharactercontroller_maxSlopeClimbAngle(this.__wbg_ptr)}point1(){const t=i.rawpointprojection_point(this.__wbg_ptr);return dt.__wrap(t)}point2(){const t=i.rawraycolliderintersection_normal(this.__wbg_ptr);return dt.__wrap(t)}normal1(){const t=i.rawshapecollidertoi_witness2(this.__wbg_ptr);return dt.__wrap(t)}normal2(){const t=i.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);return dt.__wrap(t)}}class wt{static __wrap(t){t>>>=0;const e=Object.create(wt.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawshapetoi_free(t)}toi(){return i.rawrotation_x(this.__wbg_ptr)}witness1(){const t=i.rawshapetoi_witness1(this.__wbg_ptr);return dt.__wrap(t)}witness2(){const t=i.rawcontactforceevent_total_force(this.__wbg_ptr);return dt.__wrap(t)}normal1(){const t=i.rawshapetoi_normal1(this.__wbg_ptr);return dt.__wrap(t)}normal2(){const t=i.rawshapetoi_normal2(this.__wbg_ptr);return dt.__wrap(t)}}class dt{static __wrap(t){t>>>=0;const e=Object.create(dt.prototype);return e.__wbg_ptr=t,e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();i.__wbg_rawvector_free(t)}static zero(){const t=i.rawvector_zero();return dt.__wrap(t)}constructor(t,e,r){const n=i.rawvector_new(t,e,r);return this.__wbg_ptr=n>>>0,this}get x(){return i.rawrotation_x(this.__wbg_ptr)}set x(t){i.rawvector_set_x(this.__wbg_ptr,t)}get y(){return i.rawintegrationparameters_dt(this.__wbg_ptr)}set y(t){i.rawintegrationparameters_set_dt(this.__wbg_ptr,t)}get z(){return i.rawraycolliderintersection_toi(this.__wbg_ptr)}set z(t){i.rawvector_set_z(this.__wbg_ptr,t)}xyz(){const t=i.rawvector_xyz(this.__wbg_ptr);return dt.__wrap(t)}yxz(){const t=i.rawvector_yxz(this.__wbg_ptr);return dt.__wrap(t)}zxy(){const t=i.rawvector_zxy(this.__wbg_ptr);return dt.__wrap(t)}xzy(){const t=i.rawvector_xzy(this.__wbg_ptr);return dt.__wrap(t)}yzx(){const t=i.rawvector_yzx(this.__wbg_ptr);return dt.__wrap(t)}zyx(){const t=i.rawvector_zyx(this.__wbg_ptr);return dt.__wrap(t)}}function pt(t){return o(t)}function ut(t){const e=_(t);return"boolean"==typeof e?e?1:0:2}function bt(t){l(t)}function gt(t,e){const r=_(e),i="number"==typeof r?r:void 0;w()[t/8+1]=c(i)?0:i,p()[t/4+0]=!c(i)}function yt(t){return"function"==typeof _(t)}function mt(t){return o(rt.__wrap(t))}function ft(t){return o(J.__wrap(t))}function vt(){return E((function(t,e,r){return o(_(t).call(_(e),_(r)))}),arguments)}function St(){return E((function(t,e,r,i){return o(_(t).call(_(e),_(r),_(i)))}),arguments)}function Rt(){return E((function(t,e,r,i,n){return o(_(t).call(_(e),_(r),_(i),_(n)))}),arguments)}function Ct(t,e,r,i){return o(_(t).bind(_(e),_(r),_(i)))}function It(t){return o(_(t).buffer)}function Tt(t,e,r){return o(new Uint8Array(_(t),e>>>0,r>>>0))}function At(t){return o(new Uint8Array(_(t)))}function xt(t,e,r){_(t).set(_(e),r>>>0)}function Pt(t){return _(t).length}function Et(t,e,r){return o(new Float32Array(_(t),e>>>0,r>>>0))}function Mt(t,e,r){_(t).set(_(e),r>>>0)}function jt(t){return _(t).length}function kt(t){return o(new Float32Array(t>>>0))}function Ft(t,e){throw new Error(g(t,e))}function Dt(){return o(i.memory)}},3669:(t,e,r)=>{var i=r(7974);t.exports=r.v(e,t.id,"baca153413a4b98f5edb",{"./rapier_wasm3d_bg.js":{__wbindgen_number_new:i.pT,__wbindgen_boolean_get:i.HT,__wbindgen_object_drop_ref:i.ug,__wbindgen_number_get:i.M1,__wbindgen_is_function:i.o$,__wbg_rawraycolliderintersection_new:i.Ne,__wbg_rawcontactforceevent_new:i.$B,__wbg_call_01734de55d61e11d:i.Nl,__wbg_call_4c92f6aec1e1d6e6:i.PN,__wbg_call_776890ca77946e2f:i.Tt,__wbg_bind_60a9a80cada2f33c:i.p7,__wbg_buffer_085ec1f694018c4f:i.Zf,__wbg_newwithbyteoffsetandlength_6da8e527659b86aa:i.fr,__wbg_new_8125e318e6245eed:i.rU,__wbg_set_5cf90238115182c3:i.H6,__wbg_length_72e2208bbc0efc61:i.Ky,__wbg_newwithbyteoffsetandlength_69193e31c844b792:i.Qk,__wbg_set_6146c51d49a2c0df:i.e_,__wbg_length_d7327c75a759af37:i.L6,__wbg_newwithlength_68d29ab115d0099c:i.Zc,__wbindgen_throw:i.Or,__wbindgen_memory:i.oH}})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,